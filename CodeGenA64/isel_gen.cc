// NOTE: this file is PARTIALLY autogenerated via: ./isel_tab.py gen_c
// (c) Robert Muth - see LICENSE for more info

#include "CodeGenA64/isel_gen.h"
#include "Base/opcode_gen.h"

#include <cstdint>

namespace cwerg::code_gen_a64 {
namespace {
using namespace cwerg;
using namespace cwerg::base;

// +-prefix converts an enum the underlying integer type
template <typename T>
constexpr auto operator+(T e) noexcept
    -> std::enable_if_t<std::is_enum<T>::value, std::underlying_type_t<T>> {
  return static_cast<std::underlying_type_t<T>>(e);
}

using IC = IMM_CURB;

bool ImmFitsConstraint(IMM_CURB constr,
                       int64_t x,
                       int32_t last_stack_offset,
                       bool assume_stk_op_matches) {
  switch (constr) {
    default:
    case IC::INVALID:
      ASSERT(false, "unexpected IMM_KIND " << (unsigned)constr);
      return false;
    case IC::ZERO:
      return x == 0;
    case IC::ANY:
      return true;
    case IC::IMM_SHIFTED_10_21_22:
    case IC::IMM_10_15_16_22_W:
    case IC::IMM_10_15_16_22_X:
    case IC::IMM_SHIFTED_5_20_21_22:
    case IC::IMM_SHIFTED_5_20_21_22_NOT:
    case IC::pos_stk_combo_shifted_10_21_22:
    case IC::pos_stk_combo_16_bits:
    case IC::pos_stk_combo_32_bits:
    case IC::pos_stk_combo_10_21:
    case IC::pos_stk_combo_10_21_times_2:
    case IC::pos_stk_combo_10_21_times_4:
    case IC::pos_stk_combo_10_21_times_8:
      return false;
  }
}

uint64_t ExtractTypeMaskForPattern(Ins ins) {
  uint64_t reg_matcher = 0;
  unsigned num_ops = InsOpcode(ins).num_operands;
  for (unsigned i = 0; i < num_ops; ++i) {
    const Handle h = InsOperand(ins, i);
    if (h.kind() == RefKind::REG) {
      reg_matcher |= uint64_t(RegKind(Reg(h))) << 8 * i;
    } else if (h.kind() == RefKind::CONST) {
      reg_matcher |= uint64_t(ConstKind(Const(h))) << 8 * i;
    }
  }
  return reg_matcher;
}

bool IsConstMatch(Const num,
                  IMM_CURB imm_constraint,
                  int32_t last_stack_offset,
                  bool assume_stk_op_matches) {
  if (imm_constraint == IMM_CURB::INVALID) return false;

  int64_t x;
  switch (DKFlavor(ConstKind(num))) {
    default:
      return MATCH_IMPOSSIBLE;
    case DK_FLAVOR_U:
      // it is ok to convert to signed since we can handle at most 32 bit
      // immediates
      x = ConstValueU(num);
      break;
    case DK_FLAVOR_A:
    case DK_FLAVOR_C:
    case DK_FLAVOR_S:
      x = ConstValueACS(num);
      break;
  }
  return ImmFitsConstraint(imm_constraint, x, last_stack_offset,
                           assume_stk_op_matches);
}

bool PatternMatchesTypeConstraints(const Pattern& pat, uint64_t type_mask) {
  return type_mask == *(uint64_t*)pat.reg_constraints;
}

uint8_t PatternMismatchesImmConstraints(const Pattern& pat,
                                        Ins ins,
                                        bool assume_stk_op_matches) {
  unsigned num_ops = InsOpcode(ins).num_operands;
  uint8_t out = 0;
  int32_t last_stack_offset = 0;
  for (unsigned i = 0; i < num_ops; ++i) {
    const Const op(InsOperand(ins, i));
    const IC imm_constraint = pat.imm_constraints[i];
    if (op.kind() == RefKind::STK) {
      if (assume_stk_op_matches) {
        last_stack_offset = 0;
      } else {
        last_stack_offset = StkSlot(Stk(op));
      }
    } else if (op.kind() == RefKind::REG) {
      if (imm_constraint != IC::INVALID)
        return MATCH_IMPOSSIBLE;  // we have a reg but need an imm
    } else if (op.kind() == RefKind::CONST) {
      if (imm_constraint == IC::INVALID) {
        // we have an imm but need a reg - this can be accomodated.
        out |= 1 << i;
      } else if (!IsConstMatch(op, imm_constraint, last_stack_offset,
                               assume_stk_op_matches)) {
        return MATCH_IMPOSSIBLE;
      }
    }
  }
  return out;
}

/* @AUTOGEN-START@ */

enum class FIXARG : uint8_t {
    WZR = 31,
    X8 = 8,
    UXTW = 0,
    SXTW = 1,
};

enum class SHIFT : uint8_t {
    lsl = 0,
    lsr = 1,
    asr = 2,
    ror = 3,
};

const InsTmpl kInsTemplates[] = {
  { /*used first entry*/ },
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::add_w_reg, 0x7 },  // add [2]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::add_w_imm, 0x7 },  // add [3]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::add_w_reg, 0x7 },  // add [4]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::add_w_imm, 0x7 },  // add [5]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::add_x_reg, 0x7 },  // add [6]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::add_x_imm, 0x7 },  // add [7]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::add_x_reg, 0x7 },  // add [8]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::add_x_imm, 0x7 },  // add [9]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::fadd_s, 0x7 },  // add [10]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::fadd_d, 0x7 },  // add [11]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::sub_w_reg, 0x7 },  // sub [12]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::sub_w_imm, 0x7 },  // sub [13]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::sub_w_reg, 0x5 },  // sub [14]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::sub_w_reg, 0x7 },  // sub [15]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::sub_w_imm, 0x7 },  // sub [16]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::sub_w_reg, 0x5 },  // sub [17]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::sub_x_reg, 0x7 },  // sub [18]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::sub_x_imm, 0x7 },  // sub [19]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::sub_x_reg, 0x5 },  // sub [20]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::sub_x_reg, 0x7 },  // sub [21]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::sub_x_imm, 0x7 },  // sub [22]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::sub_x_reg, 0x5 },  // sub [23]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::fsub_s, 0x7 },  // sub [24]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::fsub_d, 0x7 },  // sub [25]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::WZR},
    a64::OPC::madd_w, 0x7 },  // mul [26]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::WZR},
    a64::OPC::madd_w, 0x7 },  // mul [27]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::WZR},
    a64::OPC::madd_x, 0x7 },  // mul [28]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::WZR},
    a64::OPC::madd_x, 0x7 },  // mul [29]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::fmul_s, 0x7 },  // mul [30]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::fmul_d, 0x7 },  // mul [31]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::udiv_w, 0x7 },  // div [32]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::sdiv_w, 0x7 },  // div [33]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::udiv_x, 0x7 },  // div [34]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::sdiv_x, 0x7 },  // div [35]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::fdiv_s, 0x7 },  // div [36]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::fdiv_d, 0x7 },  // div [37]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::eor_w_reg, 0x7 },  // xor [38]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::eor_w_imm, 0x7 },  // xor [39]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::eor_w_reg, 0x7 },  // xor [40]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::eor_w_imm, 0x7 },  // xor [41]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::eor_x_reg, 0x7 },  // xor [42]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::eor_x_imm, 0x7 },  // xor [43]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::eor_x_reg, 0x7 },  // xor [44]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::eor_x_imm, 0x7 },  // xor [45]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::and_w_reg, 0x7 },  // and [46]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::and_w_imm, 0x7 },  // and [47]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::and_w_reg, 0x7 },  // and [48]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::and_w_imm, 0x7 },  // and [49]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::and_x_reg, 0x7 },  // and [50]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::and_x_imm, 0x7 },  // and [51]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::and_x_reg, 0x7 },  // and [52]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::and_x_imm, 0x7 },  // and [53]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::orr_w_reg, 0x7 },  // or [54]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::orr_w_imm, 0x7 },  // or [55]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::orr_w_reg, 0x7 },  // or [56]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::orr_w_imm, 0x7 },  // or [57]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x7 },  // or [58]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::orr_x_imm, 0x7 },  // or [59]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x7 },  // or [60]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a64::OPC::orr_x_imm, 0x7 },  // or [61]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::lslv_w, 0x7 },  // shl [62]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::lslv_w, 0x7 },  // shl [63]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::lslv_x, 0x7 },  // shl [64]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::lslv_x, 0x7 },  // shl [65]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2_rsb_width, +PARAM::num2_rsb_width_minus1},
    a64::OPC::ubfm_w, 0xf },  // shl [66]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2_rsb_width, +PARAM::num2_rsb_width_minus1},
    a64::OPC::ubfm_w, 0xf },  // shl [67]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2_rsb_width, +PARAM::num2_rsb_width_minus1},
    a64::OPC::ubfm_x, 0xf },  // shl [68]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2_rsb_width, +PARAM::num2_rsb_width_minus1},
    a64::OPC::ubfm_x, 0xf },  // shl [69]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::lsrv_w, 0x7 },  // shr [70]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::asrv_w, 0x7 },  // shr [71]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::lsrv_x, 0x7 },  // shr [72]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::asrv_x, 0x7 },  // shr [73]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2, 31},
    a64::OPC::ubfm_w, 0x7 },  // shr [74]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2, 31},
    a64::OPC::sbfm_w, 0x7 },  // shr [75]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2, 63},
    a64::OPC::ubfm_x, 0x7 },  // shr [76]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::num2, 63},
    a64::OPC::sbfm_x, 0x7 },  // shr [77]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_w_reg, 0x6 },  // beq [78]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [79]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_w_imm, 0x6 },  // beq [80]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [81]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_w_reg, 0x6 },  // beq [82]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [83]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_w_imm, 0x6 },  // beq [84]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [85]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // beq [86]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [87]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // beq [88]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [89]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // beq [90]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [91]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // beq [92]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [93]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // beq [94]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [95]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // beq [96]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [97]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // beq [98]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [99]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // beq [100]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [101]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcmpe_s, 0x3 },  // beq [102]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [103]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcmpe_d, 0x3 },  // beq [104]
  { {+PARAM::bbl2},
    a64::OPC::b_eq, 0x1 },  // beq [105]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_w_reg, 0x6 },  // bne [106]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [107]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_w_imm, 0x6 },  // bne [108]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [109]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_w_reg, 0x6 },  // bne [110]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [111]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_w_imm, 0x6 },  // bne [112]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [113]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // bne [114]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [115]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // bne [116]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [117]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // bne [118]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [119]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // bne [120]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [121]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // bne [122]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [123]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // bne [124]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [125]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // bne [126]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [127]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // bne [128]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [129]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcmpe_s, 0x3 },  // bne [130]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [131]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcmpe_d, 0x3 },  // bne [132]
  { {+PARAM::bbl2},
    a64::OPC::b_ne, 0x1 },  // bne [133]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_w_reg, 0x6 },  // blt [134]
  { {+PARAM::bbl2},
    a64::OPC::b_cc, 0x1 },  // blt [135]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_w_imm, 0x6 },  // blt [136]
  { {+PARAM::bbl2},
    a64::OPC::b_cc, 0x1 },  // blt [137]
  { {+FIXARG::WZR, +PARAM::reg1, +PARAM::num0},
    a64::OPC::subs_w_imm, 0x6 },  // blt [138]
  { {+PARAM::bbl2},
    a64::OPC::b_hi, 0x1 },  // blt [139]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_w_reg, 0x6 },  // blt [140]
  { {+PARAM::bbl2},
    a64::OPC::b_lt, 0x1 },  // blt [141]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_w_imm, 0x6 },  // blt [142]
  { {+PARAM::bbl2},
    a64::OPC::b_lt, 0x1 },  // blt [143]
  { {+FIXARG::WZR, +PARAM::reg1, +PARAM::num0},
    a64::OPC::subs_w_imm, 0x6 },  // blt [144]
  { {+PARAM::bbl2},
    a64::OPC::b_gt, 0x1 },  // blt [145]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // blt [146]
  { {+PARAM::bbl2},
    a64::OPC::b_cc, 0x1 },  // blt [147]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // blt [148]
  { {+PARAM::bbl2},
    a64::OPC::b_cc, 0x1 },  // blt [149]
  { {+FIXARG::WZR, +PARAM::reg1, +PARAM::num0},
    a64::OPC::subs_x_imm, 0x6 },  // blt [150]
  { {+PARAM::bbl2},
    a64::OPC::b_hi, 0x1 },  // blt [151]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // blt [152]
  { {+PARAM::bbl2},
    a64::OPC::b_cc, 0x1 },  // blt [153]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // blt [154]
  { {+PARAM::bbl2},
    a64::OPC::b_cc, 0x1 },  // blt [155]
  { {+FIXARG::WZR, +PARAM::reg1, +PARAM::num0},
    a64::OPC::subs_x_imm, 0x6 },  // blt [156]
  { {+PARAM::bbl2},
    a64::OPC::b_hi, 0x1 },  // blt [157]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // blt [158]
  { {+PARAM::bbl2},
    a64::OPC::b_cc, 0x1 },  // blt [159]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // blt [160]
  { {+PARAM::bbl2},
    a64::OPC::b_cc, 0x1 },  // blt [161]
  { {+FIXARG::WZR, +PARAM::reg1, +PARAM::num0},
    a64::OPC::subs_x_imm, 0x6 },  // blt [162]
  { {+PARAM::bbl2},
    a64::OPC::b_hi, 0x1 },  // blt [163]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // blt [164]
  { {+PARAM::bbl2},
    a64::OPC::b_cc, 0x1 },  // blt [165]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // blt [166]
  { {+PARAM::bbl2},
    a64::OPC::b_cc, 0x1 },  // blt [167]
  { {+FIXARG::WZR, +PARAM::reg1, +PARAM::num0},
    a64::OPC::subs_x_imm, 0x6 },  // blt [168]
  { {+PARAM::bbl2},
    a64::OPC::b_hi, 0x1 },  // blt [169]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcmpe_s, 0x3 },  // blt [170]
  { {+PARAM::bbl2},
    a64::OPC::b_mi, 0x1 },  // blt [171]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcmpe_d, 0x3 },  // blt [172]
  { {+PARAM::bbl2},
    a64::OPC::b_mi, 0x1 },  // blt [173]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_w_reg, 0x6 },  // ble [174]
  { {+PARAM::bbl2},
    a64::OPC::b_ls, 0x1 },  // ble [175]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_w_imm, 0x6 },  // ble [176]
  { {+PARAM::bbl2},
    a64::OPC::b_ls, 0x1 },  // ble [177]
  { {+FIXARG::WZR, +PARAM::reg1, +PARAM::num0},
    a64::OPC::subs_w_imm, 0x6 },  // ble [178]
  { {+PARAM::bbl2},
    a64::OPC::b_cs, 0x1 },  // ble [179]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_w_reg, 0x6 },  // ble [180]
  { {+PARAM::bbl2},
    a64::OPC::b_le, 0x1 },  // ble [181]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_w_imm, 0x6 },  // ble [182]
  { {+PARAM::bbl2},
    a64::OPC::b_le, 0x1 },  // ble [183]
  { {+FIXARG::WZR, +PARAM::reg1, +PARAM::num0},
    a64::OPC::subs_w_imm, 0x6 },  // ble [184]
  { {+PARAM::bbl2},
    a64::OPC::b_ge, 0x1 },  // ble [185]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // ble [186]
  { {+PARAM::bbl2},
    a64::OPC::b_ls, 0x1 },  // ble [187]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // ble [188]
  { {+PARAM::bbl2},
    a64::OPC::b_ls, 0x1 },  // ble [189]
  { {+FIXARG::WZR, +PARAM::reg1, +PARAM::num0},
    a64::OPC::subs_x_imm, 0x6 },  // ble [190]
  { {+PARAM::bbl2},
    a64::OPC::b_cs, 0x1 },  // ble [191]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // ble [192]
  { {+PARAM::bbl2},
    a64::OPC::b_ls, 0x1 },  // ble [193]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // ble [194]
  { {+PARAM::bbl2},
    a64::OPC::b_ls, 0x1 },  // ble [195]
  { {+FIXARG::WZR, +PARAM::reg1, +PARAM::num0},
    a64::OPC::subs_x_imm, 0x6 },  // ble [196]
  { {+PARAM::bbl2},
    a64::OPC::b_cs, 0x1 },  // ble [197]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // ble [198]
  { {+PARAM::bbl2},
    a64::OPC::b_ls, 0x1 },  // ble [199]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // ble [200]
  { {+PARAM::bbl2},
    a64::OPC::b_ls, 0x1 },  // ble [201]
  { {+FIXARG::WZR, +PARAM::reg1, +PARAM::num0},
    a64::OPC::subs_x_imm, 0x6 },  // ble [202]
  { {+PARAM::bbl2},
    a64::OPC::b_cs, 0x1 },  // ble [203]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // ble [204]
  { {+PARAM::bbl2},
    a64::OPC::b_ls, 0x1 },  // ble [205]
  { {+FIXARG::WZR, +PARAM::reg0, +PARAM::num1},
    a64::OPC::subs_x_imm, 0x6 },  // ble [206]
  { {+PARAM::bbl2},
    a64::OPC::b_ls, 0x1 },  // ble [207]
  { {+FIXARG::WZR, +PARAM::reg1, +PARAM::num0},
    a64::OPC::subs_x_imm, 0x6 },  // ble [208]
  { {+PARAM::bbl2},
    a64::OPC::b_cs, 0x1 },  // ble [209]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcmpe_s, 0x3 },  // ble [210]
  { {+PARAM::bbl2},
    a64::OPC::b_ls, 0x1 },  // ble [211]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcmpe_d, 0x3 },  // ble [212]
  { {+PARAM::bbl2},
    a64::OPC::b_ls, 0x1 },  // ble [213]
  { {+PARAM::scratch_gpr, +PARAM::jtb1_prel_hi21},
    a64::OPC::adrp, 0x3 },  // switch [214]
  { {+PARAM::scratch_gpr, +PARAM::scratch_gpr, +PARAM::jtb1_lo12},
    a64::OPC::add_x_imm, 0x7 },  // switch [215]
  { {+PARAM::scratch_gpr, +PARAM::scratch_gpr, +PARAM::reg0, +FIXARG::UXTW, 3},
    a64::OPC::ldr_x_reg_w, 0x7 },  // switch [216]
  { {+PARAM::scratch_gpr},
    a64::OPC::br, 0x1 },  // switch [217]
  { {+PARAM::bbl0},
    a64::OPC::b, 0x1 },  // bra [218]
  { {+PARAM::fun0},
    a64::OPC::bl, 0x1 },  // bsr [219]
  { {+PARAM::reg0},
    a64::OPC::blr, 0x1 },  // jsr [220]
  { {+FIXARG::X8, +PARAM::num1},
    a64::OPC::movz_x_imm, 0x2 },  // syscall [221]
  { {0},
    a64::OPC::svc, 0x0 },  // syscall [222]
  { {0},
    a64::OPC::brk, 0x0 },  // trap [223]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [224]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [225]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [226]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [227]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [228]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [229]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [230]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [231]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [232]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [233]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [234]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [235]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [236]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [237]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [238]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [239]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [240]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [241]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [242]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [243]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [244]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [245]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [246]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [247]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [248]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [249]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [250]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [251]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [252]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [253]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [254]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [255]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [256]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [257]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [258]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [259]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [260]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [261]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [262]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // conv [263]
  { {+PARAM::reg0, +PARAM::reg1, 255},
    a64::OPC::and_x_imm, 0x3 },  // conv [264]
  { {+PARAM::reg0, +PARAM::reg1, 65535},
    a64::OPC::and_x_imm, 0x3 },  // conv [265]
  { {+PARAM::reg0, +PARAM::reg1, 255},
    a64::OPC::and_x_imm, 0x3 },  // conv [266]
  { {+PARAM::reg0, +PARAM::reg1, 65535},
    a64::OPC::and_x_imm, 0x3 },  // conv [267]
  { {+PARAM::reg0, +PARAM::reg1, 0, 31},
    a64::OPC::sbfm_x, 0x3 },  // conv [268]
  { {+PARAM::reg0, +PARAM::reg1, 0, 7},
    a64::OPC::sbfm_x, 0x3 },  // conv [269]
  { {+PARAM::reg0, +PARAM::reg1, 0, 15},
    a64::OPC::sbfm_x, 0x3 },  // conv [270]
  { {+PARAM::reg0, +PARAM::reg1, 0, 7},
    a64::OPC::sbfm_x, 0x3 },  // conv [271]
  { {+PARAM::reg0, +PARAM::reg1, 0, 15},
    a64::OPC::sbfm_x, 0x3 },  // conv [272]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_w_reg, 0x5 },  // conv [273]
  { {+PARAM::reg0, +PARAM::reg1, 0, 31},
    a64::OPC::sbfm_x, 0x3 },  // conv [274]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::scvtf_d_from_w, 0x3 },  // conv [275]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::ucvtf_d_from_w, 0x3 },  // conv [276]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::scvtf_s_from_w, 0x3 },  // conv [277]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::ucvtf_s_from_w, 0x3 },  // conv [278]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::scvtf_d_from_x, 0x3 },  // conv [279]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::ucvtf_d_from_x, 0x3 },  // conv [280]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::scvtf_s_from_x, 0x3 },  // conv [281]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::ucvtf_s_from_x, 0x3 },  // conv [282]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcvtzs_w_s, 0x3 },  // conv [283]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcvtzs_w_d, 0x3 },  // conv [284]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcvtzu_w_s, 0x3 },  // conv [285]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcvtzu_w_d, 0x3 },  // conv [286]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcvtzs_x_s, 0x3 },  // conv [287]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcvtzs_x_d, 0x3 },  // conv [288]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcvtzu_x_s, 0x3 },  // conv [289]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fcvtzu_x_d, 0x3 },  // conv [290]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [291]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [292]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [293]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [294]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [295]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [296]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [297]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [298]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [299]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [300]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [301]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [302]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [303]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [304]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [305]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [306]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [307]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [308]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [309]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // bitcast [310]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // mov [311]
  { {+PARAM::reg0, +PARAM::num1},
    a64::OPC::movz_x_imm, 0x3 },  // mov [312]
  { {+PARAM::reg0, +PARAM::num1_not},
    a64::OPC::movn_x_imm, 0x3 },  // mov [313]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // mov [314]
  { {+PARAM::reg0, +PARAM::num1},
    a64::OPC::movz_x_imm, 0x3 },  // mov [315]
  { {+PARAM::reg0, +PARAM::num1_not},
    a64::OPC::movn_x_imm, 0x3 },  // mov [316]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // mov [317]
  { {+PARAM::reg0, +PARAM::num1},
    a64::OPC::movz_x_imm, 0x3 },  // mov [318]
  { {+PARAM::reg0, +PARAM::num1_not},
    a64::OPC::movn_x_imm, 0x3 },  // mov [319]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // mov [320]
  { {+PARAM::reg0, +PARAM::num1},
    a64::OPC::movz_x_imm, 0x3 },  // mov [321]
  { {+PARAM::reg0, +PARAM::num1_not},
    a64::OPC::movn_x_imm, 0x3 },  // mov [322]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // mov [323]
  { {+PARAM::reg0, +PARAM::num1},
    a64::OPC::movz_x_imm, 0x3 },  // mov [324]
  { {+PARAM::reg0, +PARAM::num1_not},
    a64::OPC::movn_x_imm, 0x3 },  // mov [325]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // mov [326]
  { {+PARAM::reg0, +PARAM::num1},
    a64::OPC::movz_x_imm, 0x3 },  // mov [327]
  { {+PARAM::reg0, +PARAM::num1_not},
    a64::OPC::movn_x_imm, 0x3 },  // mov [328]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // mov [329]
  { {+PARAM::reg0, +PARAM::num1},
    a64::OPC::movz_x_imm, 0x3 },  // mov [330]
  { {+PARAM::reg0, +PARAM::num1_not},
    a64::OPC::movn_x_imm, 0x3 },  // mov [331]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // mov [332]
  { {+PARAM::reg0, +PARAM::num1},
    a64::OPC::movz_x_imm, 0x3 },  // mov [333]
  { {+PARAM::reg0, +PARAM::num1_not},
    a64::OPC::movn_x_imm, 0x3 },  // mov [334]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // mov [335]
  { {+PARAM::reg0, +PARAM::num1},
    a64::OPC::movz_x_imm, 0x3 },  // mov [336]
  { {+PARAM::reg0, +PARAM::num1_not},
    a64::OPC::movn_x_imm, 0x3 },  // mov [337]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg1, +SHIFT::lsl, 0},
    a64::OPC::orr_x_reg, 0x5 },  // mov [338]
  { {+PARAM::reg0, +PARAM::num1},
    a64::OPC::movz_x_imm, 0x3 },  // mov [339]
  { {+PARAM::reg0, +PARAM::num1_not},
    a64::OPC::movn_x_imm, 0x3 },  // mov [340]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fmov_s_reg, 0x3 },  // mov [341]
  { {+PARAM::reg0, +PARAM::reg1},
    a64::OPC::fmov_d_reg, 0x3 },  // mov [342]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::reg4, +SHIFT::lsl, 0},
    a64::OPC::subs_w_reg, 0x6 },  // cmpeq [343]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_w_eq, 0x7 },  // cmpeq [344]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::num4},
    a64::OPC::subs_w_imm, 0x6 },  // cmpeq [345]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_w_eq, 0x7 },  // cmpeq [346]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::reg4, +SHIFT::lsl, 0},
    a64::OPC::subs_w_reg, 0x6 },  // cmpeq [347]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_w_eq, 0x7 },  // cmpeq [348]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::num4},
    a64::OPC::subs_w_imm, 0x6 },  // cmpeq [349]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_w_eq, 0x7 },  // cmpeq [350]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::reg4, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // cmpeq [351]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_eq, 0x7 },  // cmpeq [352]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::num4},
    a64::OPC::subs_x_imm, 0x6 },  // cmpeq [353]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_eq, 0x7 },  // cmpeq [354]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::reg4, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // cmpeq [355]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_eq, 0x7 },  // cmpeq [356]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::num4},
    a64::OPC::subs_x_imm, 0x6 },  // cmpeq [357]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_eq, 0x7 },  // cmpeq [358]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::reg4, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // cmpeq [359]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_eq, 0x7 },  // cmpeq [360]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::num4},
    a64::OPC::subs_x_imm, 0x6 },  // cmpeq [361]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_eq, 0x7 },  // cmpeq [362]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::reg4, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // cmpeq [363]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_eq, 0x7 },  // cmpeq [364]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::num4},
    a64::OPC::subs_x_imm, 0x6 },  // cmpeq [365]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_eq, 0x7 },  // cmpeq [366]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::num4},
    a64::OPC::subs_w_imm, 0x6 },  // cmpeq [367]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_w_cc, 0x7 },  // cmpeq [368]
  { {+FIXARG::WZR, +PARAM::num3, +PARAM::reg4},
    a64::OPC::subs_w_imm, 0x6 },  // cmpeq [369]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_w_cs, 0x7 },  // cmpeq [370]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::num4},
    a64::OPC::subs_w_imm, 0x6 },  // cmpeq [371]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_w_lt, 0x7 },  // cmpeq [372]
  { {+FIXARG::WZR, +PARAM::num3, +PARAM::reg4},
    a64::OPC::subs_w_imm, 0x6 },  // cmpeq [373]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_w_ge, 0x7 },  // cmpeq [374]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::num4},
    a64::OPC::subs_x_imm, 0x6 },  // cmpeq [375]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_cc, 0x7 },  // cmpeq [376]
  { {+FIXARG::WZR, +PARAM::num3, +PARAM::reg4},
    a64::OPC::subs_x_imm, 0x6 },  // cmpeq [377]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_cs, 0x7 },  // cmpeq [378]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::num4},
    a64::OPC::subs_x_imm, 0x6 },  // cmpeq [379]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_cc, 0x7 },  // cmpeq [380]
  { {+FIXARG::WZR, +PARAM::num3, +PARAM::reg4},
    a64::OPC::subs_x_imm, 0x6 },  // cmpeq [381]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_cs, 0x7 },  // cmpeq [382]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::num4},
    a64::OPC::subs_x_imm, 0x6 },  // cmpeq [383]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_lt, 0x7 },  // cmpeq [384]
  { {+FIXARG::WZR, +PARAM::num3, +PARAM::reg4},
    a64::OPC::subs_x_imm, 0x6 },  // cmpeq [385]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_ge, 0x7 },  // cmpeq [386]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::reg4, +SHIFT::lsl, 0},
    a64::OPC::subs_w_reg, 0x6 },  // cmplt [387]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_w_cc, 0x7 },  // cmplt [388]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::reg4, +SHIFT::lsl, 0},
    a64::OPC::subs_w_reg, 0x6 },  // cmplt [389]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_w_lt, 0x7 },  // cmplt [390]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::reg4, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // cmplt [391]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_cc, 0x7 },  // cmplt [392]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::reg4, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // cmplt [393]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_cc, 0x7 },  // cmplt [394]
  { {+FIXARG::WZR, +PARAM::reg3, +PARAM::reg4, +SHIFT::lsl, 0},
    a64::OPC::subs_x_reg, 0x6 },  // cmplt [395]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a64::OPC::csel_x_lt, 0x7 },  // cmplt [396]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::add_x_reg, 0x7 },  // lea [397]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::add_x_reg, 0x7 },  // lea [398]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, 0},
    a64::OPC::add_x_reg_uxtw, 0x7 },  // lea [399]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, 0},
    a64::OPC::add_x_reg_sxtw, 0x7 },  // lea [400]
  { {+PARAM::reg0, +PARAM::mem1_num2_prel_hi21},
    a64::OPC::adrp, 0x3 },  // lea.mem [401]
  { {+PARAM::reg0, +PARAM::reg0, +PARAM::mem1_num2_lo12},
    a64::OPC::add_x_imm, 0x7 },  // lea.mem [402]
  { {+PARAM::reg0, +PARAM::mem1_num2_prel_hi21},
    a64::OPC::adrp, 0x3 },  // lea.mem [403]
  { {+PARAM::reg0, +PARAM::reg0, +PARAM::mem1_num2_lo12},
    a64::OPC::add_x_imm, 0x7 },  // lea.mem [404]
  { {+PARAM::reg0, +PARAM::mem1_num2_prel_hi21},
    a64::OPC::adrp, 0x3 },  // lea.mem [405]
  { {+PARAM::reg0, +PARAM::reg0, +PARAM::mem1_num2_lo12},
    a64::OPC::add_x_imm, 0x7 },  // lea.mem [406]
  { {+PARAM::reg0, +PARAM::mem1_num2_prel_hi21},
    a64::OPC::adrp, 0x3 },  // lea.mem [407]
  { {+PARAM::reg0, +PARAM::reg0, +PARAM::mem1_num2_lo12},
    a64::OPC::add_x_imm, 0x7 },  // lea.mem [408]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::add_x_imm, 0x5 },  // lea.stk [409]
  { {+PARAM::reg0, +PARAM::stk1_offset2},
    a64::OPC::movz_x_imm, 0x3 },  // lea.stk [410]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg0, +SHIFT::lsl, 0},
    a64::OPC::add_x_reg, 0x5 },  // lea.stk [411]
  { {+PARAM::reg0, +PARAM::stk1_offset2_lo},
    a64::OPC::movz_x_imm, 0x3 },  // lea.stk [412]
  { {+PARAM::reg0, +PARAM::stk1_offset2_hi},
    a64::OPC::movk_x, 0x3 },  // lea.stk [413]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg0, +SHIFT::lsl, 0},
    a64::OPC::add_x_reg, 0x5 },  // lea.stk [414]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::add_x_imm, 0x5 },  // lea.stk [415]
  { {+PARAM::reg0, +PARAM::stk1_offset2},
    a64::OPC::movz_x_imm, 0x3 },  // lea.stk [416]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg0, +SHIFT::lsl, 0},
    a64::OPC::add_x_reg, 0x5 },  // lea.stk [417]
  { {+PARAM::reg0, +PARAM::stk1_offset2_lo},
    a64::OPC::movz_x_imm, 0x3 },  // lea.stk [418]
  { {+PARAM::reg0, +PARAM::stk1_offset2_hi},
    a64::OPC::movk_x, 0x3 },  // lea.stk [419]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg0, +SHIFT::lsl, 0},
    a64::OPC::add_x_reg, 0x5 },  // lea.stk [420]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::add_x_imm, 0x5 },  // lea.stk [421]
  { {+PARAM::reg0, +PARAM::stk1_offset2},
    a64::OPC::movz_x_imm, 0x3 },  // lea.stk [422]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg0, +SHIFT::lsl, 0},
    a64::OPC::add_x_reg, 0x5 },  // lea.stk [423]
  { {+PARAM::reg0, +PARAM::stk1_offset2_lo},
    a64::OPC::movz_x_imm, 0x3 },  // lea.stk [424]
  { {+PARAM::reg0, +PARAM::stk1_offset2_hi},
    a64::OPC::movk_x, 0x3 },  // lea.stk [425]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg0, +SHIFT::lsl, 0},
    a64::OPC::add_x_reg, 0x5 },  // lea.stk [426]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::add_x_imm, 0x5 },  // lea.stk [427]
  { {+PARAM::reg0, +PARAM::stk1_offset2},
    a64::OPC::movz_x_imm, 0x3 },  // lea.stk [428]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg0, +SHIFT::lsl, 0},
    a64::OPC::add_x_reg, 0x5 },  // lea.stk [429]
  { {+PARAM::reg0, +PARAM::stk1_offset2_lo},
    a64::OPC::movz_x_imm, 0x3 },  // lea.stk [430]
  { {+PARAM::reg0, +PARAM::stk1_offset2_hi},
    a64::OPC::movk_x, 0x3 },  // lea.stk [431]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::reg0, +SHIFT::lsl, 0},
    a64::OPC::add_x_reg, 0x5 },  // lea.stk [432]
  { {+PARAM::reg0, +PARAM::fun1_prel_hi21},
    a64::OPC::adrp, 0x3 },  // lea.fun [433]
  { {+PARAM::reg0, +PARAM::reg0, +PARAM::fun1_lo12},
    a64::OPC::add_x_imm, 0x7 },  // lea.fun [434]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_x_reg_x, 0x7 },  // ld [435]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_x_reg_x, 0x7 },  // ld [436]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::SXTW, 0},
    a64::OPC::ldr_x_reg_w, 0x7 },  // ld [437]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::UXTW, 0},
    a64::OPC::ldr_x_reg_w, 0x7 },  // ld [438]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_x_reg_x, 0x7 },  // ld [439]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_x_reg_x, 0x7 },  // ld [440]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::SXTW, 0},
    a64::OPC::ldr_x_reg_w, 0x7 },  // ld [441]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::UXTW, 0},
    a64::OPC::ldr_x_reg_w, 0x7 },  // ld [442]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_x_reg_x, 0x7 },  // ld [443]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_x_reg_x, 0x7 },  // ld [444]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::SXTW, 0},
    a64::OPC::ldr_x_reg_w, 0x7 },  // ld [445]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::UXTW, 0},
    a64::OPC::ldr_x_reg_w, 0x7 },  // ld [446]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_x_reg_x, 0x7 },  // ld [447]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_x_reg_x, 0x7 },  // ld [448]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::SXTW, 0},
    a64::OPC::ldr_x_reg_w, 0x7 },  // ld [449]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::UXTW, 0},
    a64::OPC::ldr_x_reg_w, 0x7 },  // ld [450]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_w_reg_x, 0x7 },  // ld [451]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_w_reg_x, 0x7 },  // ld [452]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::SXTW, 0},
    a64::OPC::ldr_w_reg_w, 0x7 },  // ld [453]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::UXTW, 0},
    a64::OPC::ldr_w_reg_w, 0x7 },  // ld [454]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldrsw_reg_x, 0x7 },  // ld [455]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldrsw_reg_x, 0x7 },  // ld [456]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::SXTW, 0},
    a64::OPC::ldrsw_reg_w, 0x7 },  // ld [457]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::UXTW, 0},
    a64::OPC::ldrsw_reg_w, 0x7 },  // ld [458]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_h_reg_x, 0x7 },  // ld [459]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_h_reg_x, 0x7 },  // ld [460]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::SXTW, 0},
    a64::OPC::ldr_h_reg_w, 0x7 },  // ld [461]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::UXTW, 0},
    a64::OPC::ldr_h_reg_w, 0x7 },  // ld [462]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldrsh_x_reg_x, 0x7 },  // ld [463]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldrsh_x_reg_x, 0x7 },  // ld [464]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::SXTW, 0},
    a64::OPC::ldrsh_x_reg_w, 0x7 },  // ld [465]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::UXTW, 0},
    a64::OPC::ldrsh_x_reg_w, 0x7 },  // ld [466]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_b_reg_x, 0x7 },  // ld [467]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldr_b_reg_x, 0x7 },  // ld [468]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::SXTW, 0},
    a64::OPC::ldr_b_reg_w, 0x7 },  // ld [469]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::UXTW, 0},
    a64::OPC::ldr_b_reg_w, 0x7 },  // ld [470]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldrsb_x_reg_x, 0x7 },  // ld [471]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::ldrsb_x_reg_x, 0x7 },  // ld [472]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::SXTW, 0},
    a64::OPC::ldrsb_x_reg_w, 0x7 },  // ld [473]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::UXTW, 0},
    a64::OPC::ldrsb_x_reg_w, 0x7 },  // ld [474]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::fldr_s_reg_x, 0x7 },  // ld [475]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::fldr_s_reg_x, 0x7 },  // ld [476]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::SXTW, 0},
    a64::OPC::fldr_s_reg_w, 0x7 },  // ld [477]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::UXTW, 0},
    a64::OPC::fldr_s_reg_w, 0x7 },  // ld [478]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::fldr_d_reg_x, 0x7 },  // ld [479]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +SHIFT::lsl, 0},
    a64::OPC::fldr_d_reg_x, 0x7 },  // ld [480]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::SXTW, 0},
    a64::OPC::fldr_d_reg_w, 0x7 },  // ld [481]
  { {+PARAM::reg0, +PARAM::reg1, +PARAM::reg2, +FIXARG::UXTW, 0},
    a64::OPC::fldr_d_reg_w, 0x7 },  // ld [482]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [483]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [484]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [485]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [486]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [487]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [488]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [489]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [490]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [491]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [492]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [493]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [494]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [495]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [496]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [497]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_x_imm, 0x5 },  // ld.stk [498]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_w_imm, 0x5 },  // ld.stk [499]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_w_imm, 0x5 },  // ld.stk [500]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_w_imm, 0x5 },  // ld.stk [501]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_w_imm, 0x5 },  // ld.stk [502]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldrsw_imm, 0x5 },  // ld.stk [503]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldrsw_imm, 0x5 },  // ld.stk [504]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldrsw_imm, 0x5 },  // ld.stk [505]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldrsw_imm, 0x5 },  // ld.stk [506]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldrsh_x_imm, 0x5 },  // ld.stk [507]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldrsh_x_imm, 0x5 },  // ld.stk [508]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldrsh_x_imm, 0x5 },  // ld.stk [509]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldrsh_x_imm, 0x5 },  // ld.stk [510]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_h_imm, 0x5 },  // ld.stk [511]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_h_imm, 0x5 },  // ld.stk [512]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_h_imm, 0x5 },  // ld.stk [513]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_h_imm, 0x5 },  // ld.stk [514]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_b_imm, 0x5 },  // ld.stk [515]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_b_imm, 0x5 },  // ld.stk [516]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_b_imm, 0x5 },  // ld.stk [517]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldr_b_imm, 0x5 },  // ld.stk [518]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldrsb_x_imm, 0x5 },  // ld.stk [519]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldrsb_x_imm, 0x5 },  // ld.stk [520]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldrsb_x_imm, 0x5 },  // ld.stk [521]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::ldrsb_x_imm, 0x5 },  // ld.stk [522]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::fldr_s_imm, 0x5 },  // ld.stk [523]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::fldr_s_imm, 0x5 },  // ld.stk [524]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::fldr_s_imm, 0x5 },  // ld.stk [525]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::fldr_s_imm, 0x5 },  // ld.stk [526]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::fldr_d_imm, 0x5 },  // ld.stk [527]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::fldr_d_imm, 0x5 },  // ld.stk [528]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::fldr_d_imm, 0x5 },  // ld.stk [529]
  { {+PARAM::reg0, +FIXARG::WZR, +PARAM::stk1_offset2},
    a64::OPC::fldr_d_imm, 0x5 },  // ld.stk [530]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_x, 0x13 },  // st [531]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_x, 0x13 },  // st [532]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::SXTW, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_w, 0x13 },  // st [533]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::UXTW, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_w, 0x13 },  // st [534]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_x, 0x13 },  // st [535]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_x, 0x13 },  // st [536]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::SXTW, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_w, 0x13 },  // st [537]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::UXTW, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_w, 0x13 },  // st [538]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_x, 0x13 },  // st [539]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_x, 0x13 },  // st [540]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::SXTW, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_w, 0x13 },  // st [541]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::UXTW, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_w, 0x13 },  // st [542]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_x, 0x13 },  // st [543]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_x, 0x13 },  // st [544]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::SXTW, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_w, 0x13 },  // st [545]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::UXTW, 0, +PARAM::reg2},
    a64::OPC::str_x_reg_w, 0x13 },  // st [546]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_w_reg_x, 0x13 },  // st [547]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_w_reg_x, 0x13 },  // st [548]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::SXTW, 0, +PARAM::reg2},
    a64::OPC::str_w_reg_w, 0x13 },  // st [549]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::UXTW, 0, +PARAM::reg2},
    a64::OPC::str_w_reg_w, 0x13 },  // st [550]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_w_reg_x, 0x13 },  // st [551]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_w_reg_x, 0x13 },  // st [552]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::SXTW, 0, +PARAM::reg2},
    a64::OPC::str_w_reg_w, 0x13 },  // st [553]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::UXTW, 0, +PARAM::reg2},
    a64::OPC::str_w_reg_w, 0x13 },  // st [554]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_h_reg_x, 0x13 },  // st [555]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_h_reg_x, 0x13 },  // st [556]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::SXTW, 0, +PARAM::reg2},
    a64::OPC::str_h_reg_w, 0x13 },  // st [557]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::UXTW, 0, +PARAM::reg2},
    a64::OPC::str_h_reg_w, 0x13 },  // st [558]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_h_reg_x, 0x13 },  // st [559]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_h_reg_x, 0x13 },  // st [560]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::SXTW, 0, +PARAM::reg2},
    a64::OPC::str_h_reg_w, 0x13 },  // st [561]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::UXTW, 0, +PARAM::reg2},
    a64::OPC::str_h_reg_w, 0x13 },  // st [562]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_b_reg_x, 0x13 },  // st [563]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_b_reg_x, 0x13 },  // st [564]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::SXTW, 0, +PARAM::reg2},
    a64::OPC::str_b_reg_w, 0x13 },  // st [565]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::UXTW, 0, +PARAM::reg2},
    a64::OPC::str_b_reg_w, 0x13 },  // st [566]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_b_reg_x, 0x13 },  // st [567]
  { {+PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, 0, +PARAM::reg2},
    a64::OPC::str_b_reg_x, 0x13 },  // st [568]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::SXTW, 0, +PARAM::reg2},
    a64::OPC::str_b_reg_w, 0x13 },  // st [569]
  { {+PARAM::reg0, +PARAM::reg1, +FIXARG::UXTW, 0, +PARAM::reg2},
    a64::OPC::str_b_reg_w, 0x13 },  // st [570]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [571]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [572]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [573]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [574]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [575]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [576]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [577]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [578]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [579]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [580]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [581]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [582]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [583]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [584]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [585]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_x_imm, 0x6 },  // st.stk [586]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_w_imm, 0x6 },  // st.stk [587]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_w_imm, 0x6 },  // st.stk [588]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_w_imm, 0x6 },  // st.stk [589]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_w_imm, 0x6 },  // st.stk [590]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_w_imm, 0x6 },  // st.stk [591]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_w_imm, 0x6 },  // st.stk [592]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_w_imm, 0x6 },  // st.stk [593]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_w_imm, 0x6 },  // st.stk [594]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_h_imm, 0x6 },  // st.stk [595]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_h_imm, 0x6 },  // st.stk [596]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_h_imm, 0x6 },  // st.stk [597]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_h_imm, 0x6 },  // st.stk [598]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_h_imm, 0x6 },  // st.stk [599]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_h_imm, 0x6 },  // st.stk [600]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_h_imm, 0x6 },  // st.stk [601]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_h_imm, 0x6 },  // st.stk [602]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_b_imm, 0x6 },  // st.stk [603]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_b_imm, 0x6 },  // st.stk [604]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_b_imm, 0x6 },  // st.stk [605]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_b_imm, 0x6 },  // st.stk [606]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_b_imm, 0x6 },  // st.stk [607]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_b_imm, 0x6 },  // st.stk [608]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_b_imm, 0x6 },  // st.stk [609]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::str_b_imm, 0x6 },  // st.stk [610]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::fstr_s_imm, 0x6 },  // st.stk [611]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::fstr_s_imm, 0x6 },  // st.stk [612]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::fstr_s_imm, 0x6 },  // st.stk [613]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::fstr_s_imm, 0x6 },  // st.stk [614]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::fstr_d_imm, 0x6 },  // st.stk [615]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::fstr_d_imm, 0x6 },  // st.stk [616]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::fstr_d_imm, 0x6 },  // st.stk [617]
  { {+FIXARG::WZR, +PARAM::stk0_offset1, +PARAM::reg2},
    a64::OPC::fstr_d_imm, 0x6 },  // st.stk [618]
};

const uint16_t kPatternJumper[256] = {
 0 /* --- */,  0 /* .mem */,  0 /* .data */,  0 /* .addr.fun */, 
 0 /* .addr.mem */,  0 /* .fun */,  0 /* .bbl */,  0 /* .reg */, 
 0 /* .stk */,  0 /* .jtb */,  0 /* --- */,  0 /* --- */, 
 0 /* --- */,  0 /* --- */,  0 /* --- */,  0 /* --- */, 
 0 /* add */,  10 /* sub */,  24 /* mul */,  30 /* div */, 
 36 /* rem */,  36 /* min */,  36 /* max */,  36 /* --- */, 
 36 /* xor */,  44 /* and */,  52 /* or */,  60 /* shl */, 
 68 /* shr */,  76 /* --- */,  76 /* --- */,  76 /* --- */, 
 76 /* beq */,  90 /* bne */,  104 /* blt */,  124 /* ble */, 
 144 /* --- */,  144 /* --- */,  144 /* --- */,  144 /* --- */, 
 144 /* switch */,  145 /* bra */,  146 /* ret */,  146 /* bsr */, 
 147 /* jsr */,  148 /* syscall */,  149 /* trap */,  150 /* --- */, 
 150 /* pusharg */,  150 /* poparg */,  150 /* conv */,  217 /* bitcast */, 
 237 /* mov */,  269 /* cmpeq */,  291 /* cmplt */,  296 /* --- */, 
 296 /* lea */,  300 /* lea.mem */,  304 /* lea.stk */,  316 /* lea.fun */, 
 317 /* --- */,  317 /* --- */,  317 /* --- */,  317 /* --- */, 
 317 /* ld */,  365 /* ld.mem */,  365 /* ld.stk */,  413 /* --- */, 
 413 /* --- */,  413 /* --- */,  413 /* --- */,  413 /* --- */, 
 413 /* st */,  453 /* st.mem */,  453 /* st.stk */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* sqrt */,  501 /* abs */,  501 /* sign */,  501 /* ceil */, 
 501 /* floor */,  501 /* trunc */,  501 /* round */,  501 /* sin */, 
 501 /* cos */,  501 /* tan */,  501 /* asin */,  501 /* acos */, 
 501 /* atan */,  501 /* exp */,  501 /* log */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* cntpop */,  501 /* cntlz */,  501 /* cnttz */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* bcopy */,  501 /* --- */,  501 /* bzero */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* st.stks */,  501 /* ld.stks */,  501 /* lea.stks */,  501 /* lds */, 
 501 /* sts */,  501 /* adds */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* .struct */,  501 /* .field */,  501 /* .endstruct */,  501 /* .stk.s */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* nop */,  501 /* nop1 */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
 501 /* --- */,  501 /* --- */,  501 /* --- */,  501 /* --- */, 
};

const Pattern kPatterns[] = {
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[1], 1 },  // add [0]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[2], 1 },  // add [1]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[3], 1 },  // add [2]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[4], 1 },  // add [3]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[5], 1 },  // add [4]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[6], 1 },  // add [5]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[7], 1 },  // add [6]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[8], 1 },  // add [7]
  { {DK::F32, DK::F32, DK::F32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[9], 1 },  // add [8]
  { {DK::F64, DK::F64, DK::F64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[10], 1 },  // add [9]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[11], 1 },  // sub [10]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[12], 1 },  // sub [11]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::ZERO, IC::INVALID},
    &kInsTemplates[13], 1 },  // sub [12]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[14], 1 },  // sub [13]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[15], 1 },  // sub [14]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::ZERO, IC::INVALID},
    &kInsTemplates[16], 1 },  // sub [15]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[17], 1 },  // sub [16]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[18], 1 },  // sub [17]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::ZERO, IC::INVALID},
    &kInsTemplates[19], 1 },  // sub [18]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[20], 1 },  // sub [19]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[21], 1 },  // sub [20]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::ZERO, IC::INVALID},
    &kInsTemplates[22], 1 },  // sub [21]
  { {DK::F32, DK::F32, DK::F32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[23], 1 },  // sub [22]
  { {DK::F64, DK::F64, DK::F64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[24], 1 },  // sub [23]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[25], 1 },  // mul [24]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[26], 1 },  // mul [25]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[27], 1 },  // mul [26]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[28], 1 },  // mul [27]
  { {DK::F32, DK::F32, DK::F32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[29], 1 },  // mul [28]
  { {DK::F64, DK::F64, DK::F64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[30], 1 },  // mul [29]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[31], 1 },  // div [30]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[32], 1 },  // div [31]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[33], 1 },  // div [32]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[34], 1 },  // div [33]
  { {DK::F32, DK::F32, DK::F32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[35], 1 },  // div [34]
  { {DK::F64, DK::F64, DK::F64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[36], 1 },  // div [35]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[37], 1 },  // xor [36]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::IMM_10_15_16_22_W},
    &kInsTemplates[38], 1 },  // xor [37]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[39], 1 },  // xor [38]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::IMM_10_15_16_22_W},
    &kInsTemplates[40], 1 },  // xor [39]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[41], 1 },  // xor [40]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::IMM_10_15_16_22_W},
    &kInsTemplates[42], 1 },  // xor [41]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[43], 1 },  // xor [42]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::IMM_10_15_16_22_W},
    &kInsTemplates[44], 1 },  // xor [43]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[45], 1 },  // and [44]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::IMM_10_15_16_22_W},
    &kInsTemplates[46], 1 },  // and [45]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[47], 1 },  // and [46]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::IMM_10_15_16_22_W},
    &kInsTemplates[48], 1 },  // and [47]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[49], 1 },  // and [48]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::IMM_10_15_16_22_W},
    &kInsTemplates[50], 1 },  // and [49]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[51], 1 },  // and [50]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::IMM_10_15_16_22_W},
    &kInsTemplates[52], 1 },  // and [51]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[53], 1 },  // or [52]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::IMM_10_15_16_22_W},
    &kInsTemplates[54], 1 },  // or [53]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[55], 1 },  // or [54]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::IMM_10_15_16_22_W},
    &kInsTemplates[56], 1 },  // or [55]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[57], 1 },  // or [56]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::IMM_10_15_16_22_W},
    &kInsTemplates[58], 1 },  // or [57]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[59], 1 },  // or [58]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::IMM_10_15_16_22_W},
    &kInsTemplates[60], 1 },  // or [59]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[61], 1 },  // shl [60]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[62], 1 },  // shl [61]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[63], 1 },  // shl [62]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[64], 1 },  // shl [63]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::ANY},
    &kInsTemplates[65], 1 },  // shl [64]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::ANY},
    &kInsTemplates[66], 1 },  // shl [65]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::ANY},
    &kInsTemplates[67], 1 },  // shl [66]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::ANY},
    &kInsTemplates[68], 1 },  // shl [67]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[69], 1 },  // shr [68]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[70], 1 },  // shr [69]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[71], 1 },  // shr [70]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[72], 1 },  // shr [71]
  { {DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::ANY},
    &kInsTemplates[73], 1 },  // shr [72]
  { {DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::ANY},
    &kInsTemplates[74], 1 },  // shr [73]
  { {DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::ANY},
    &kInsTemplates[75], 1 },  // shr [74]
  { {DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::ANY},
    &kInsTemplates[76], 1 },  // shr [75]
  { {DK::U32, DK::U32, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[77], 2 },  // beq [76]
  { {DK::U32, DK::U32, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[79], 2 },  // beq [77]
  { {DK::S32, DK::S32, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[81], 2 },  // beq [78]
  { {DK::S32, DK::S32, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[83], 2 },  // beq [79]
  { {DK::U64, DK::U64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[85], 2 },  // beq [80]
  { {DK::U64, DK::U64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[87], 2 },  // beq [81]
  { {DK::S64, DK::S64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[89], 2 },  // beq [82]
  { {DK::S64, DK::S64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[91], 2 },  // beq [83]
  { {DK::A64, DK::A64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[93], 2 },  // beq [84]
  { {DK::A64, DK::A64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[95], 2 },  // beq [85]
  { {DK::C64, DK::C64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[97], 2 },  // beq [86]
  { {DK::C64, DK::C64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[99], 2 },  // beq [87]
  { {DK::F32, DK::F32, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[101], 2 },  // beq [88]
  { {DK::F64, DK::F64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[103], 2 },  // beq [89]
  { {DK::U32, DK::U32, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[105], 2 },  // bne [90]
  { {DK::U32, DK::U32, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[107], 2 },  // bne [91]
  { {DK::S32, DK::S32, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[109], 2 },  // bne [92]
  { {DK::S32, DK::S32, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[111], 2 },  // bne [93]
  { {DK::U64, DK::U64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[113], 2 },  // bne [94]
  { {DK::U64, DK::U64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[115], 2 },  // bne [95]
  { {DK::S64, DK::S64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[117], 2 },  // bne [96]
  { {DK::S64, DK::S64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[119], 2 },  // bne [97]
  { {DK::A64, DK::A64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[121], 2 },  // bne [98]
  { {DK::A64, DK::A64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[123], 2 },  // bne [99]
  { {DK::C64, DK::C64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[125], 2 },  // bne [100]
  { {DK::C64, DK::C64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[127], 2 },  // bne [101]
  { {DK::F32, DK::F32, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[129], 2 },  // bne [102]
  { {DK::F64, DK::F64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[131], 2 },  // bne [103]
  { {DK::U32, DK::U32, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[133], 2 },  // blt [104]
  { {DK::U32, DK::U32, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[135], 2 },  // blt [105]
  { {DK::U32, DK::U32, DK::INVALID},
    {IC::IMM_SHIFTED_10_21_22, IC::INVALID, IC::INVALID},
    &kInsTemplates[137], 2 },  // blt [106]
  { {DK::S32, DK::S32, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[139], 2 },  // blt [107]
  { {DK::S32, DK::S32, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[141], 2 },  // blt [108]
  { {DK::S32, DK::S32, DK::INVALID},
    {IC::IMM_SHIFTED_10_21_22, IC::INVALID, IC::INVALID},
    &kInsTemplates[143], 2 },  // blt [109]
  { {DK::U64, DK::U64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[145], 2 },  // blt [110]
  { {DK::U64, DK::U64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[147], 2 },  // blt [111]
  { {DK::U64, DK::U64, DK::INVALID},
    {IC::IMM_SHIFTED_10_21_22, IC::INVALID, IC::INVALID},
    &kInsTemplates[149], 2 },  // blt [112]
  { {DK::A64, DK::A64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[151], 2 },  // blt [113]
  { {DK::A64, DK::A64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[153], 2 },  // blt [114]
  { {DK::A64, DK::A64, DK::INVALID},
    {IC::IMM_SHIFTED_10_21_22, IC::INVALID, IC::INVALID},
    &kInsTemplates[155], 2 },  // blt [115]
  { {DK::C64, DK::C64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[157], 2 },  // blt [116]
  { {DK::C64, DK::C64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[159], 2 },  // blt [117]
  { {DK::C64, DK::C64, DK::INVALID},
    {IC::IMM_SHIFTED_10_21_22, IC::INVALID, IC::INVALID},
    &kInsTemplates[161], 2 },  // blt [118]
  { {DK::S64, DK::S64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[163], 2 },  // blt [119]
  { {DK::S64, DK::S64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[165], 2 },  // blt [120]
  { {DK::S64, DK::S64, DK::INVALID},
    {IC::IMM_SHIFTED_10_21_22, IC::INVALID, IC::INVALID},
    &kInsTemplates[167], 2 },  // blt [121]
  { {DK::F32, DK::F32, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[169], 2 },  // blt [122]
  { {DK::F64, DK::F64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[171], 2 },  // blt [123]
  { {DK::U32, DK::U32, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[173], 2 },  // ble [124]
  { {DK::U32, DK::U32, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[175], 2 },  // ble [125]
  { {DK::U32, DK::U32, DK::INVALID},
    {IC::IMM_SHIFTED_10_21_22, IC::INVALID, IC::INVALID},
    &kInsTemplates[177], 2 },  // ble [126]
  { {DK::S32, DK::S32, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[179], 2 },  // ble [127]
  { {DK::S32, DK::S32, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[181], 2 },  // ble [128]
  { {DK::S32, DK::S32, DK::INVALID},
    {IC::IMM_SHIFTED_10_21_22, IC::INVALID, IC::INVALID},
    &kInsTemplates[183], 2 },  // ble [129]
  { {DK::U64, DK::U64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[185], 2 },  // ble [130]
  { {DK::U64, DK::U64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[187], 2 },  // ble [131]
  { {DK::U64, DK::U64, DK::INVALID},
    {IC::IMM_SHIFTED_10_21_22, IC::INVALID, IC::INVALID},
    &kInsTemplates[189], 2 },  // ble [132]
  { {DK::A64, DK::A64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[191], 2 },  // ble [133]
  { {DK::A64, DK::A64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[193], 2 },  // ble [134]
  { {DK::A64, DK::A64, DK::INVALID},
    {IC::IMM_SHIFTED_10_21_22, IC::INVALID, IC::INVALID},
    &kInsTemplates[195], 2 },  // ble [135]
  { {DK::C64, DK::C64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[197], 2 },  // ble [136]
  { {DK::C64, DK::C64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[199], 2 },  // ble [137]
  { {DK::C64, DK::C64, DK::INVALID},
    {IC::IMM_SHIFTED_10_21_22, IC::INVALID, IC::INVALID},
    &kInsTemplates[201], 2 },  // ble [138]
  { {DK::S64, DK::S64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[203], 2 },  // ble [139]
  { {DK::S64, DK::S64, DK::INVALID},
    {IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[205], 2 },  // ble [140]
  { {DK::S64, DK::S64, DK::INVALID},
    {IC::IMM_SHIFTED_10_21_22, IC::INVALID, IC::INVALID},
    &kInsTemplates[207], 2 },  // ble [141]
  { {DK::F32, DK::F32, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[209], 2 },  // ble [142]
  { {DK::F64, DK::F64, DK::INVALID},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[211], 2 },  // ble [143]
  { {DK::U32, DK::INVALID},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[213], 4 },  // switch [144]
  { {DK::INVALID},
    {IC::INVALID},
    &kInsTemplates[217], 1 },  // bra [145]
  { {DK::INVALID},
    {IC::INVALID},
    &kInsTemplates[218], 1 },  // bsr [146]
  { {DK::C64, DK::INVALID},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[219], 1 },  // jsr [147]
  { {DK::INVALID, DK::U32},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22},
    &kInsTemplates[220], 2 },  // syscall [148]
  { {},
    {},
    &kInsTemplates[222], 1 },  // trap [149]
  { {DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[223], 1 },  // conv [150]
  { {DK::U64, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[224], 1 },  // conv [151]
  { {DK::S64, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[225], 1 },  // conv [152]
  { {DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[226], 1 },  // conv [153]
  { {DK::U32, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[227], 1 },  // conv [154]
  { {DK::U32, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[228], 1 },  // conv [155]
  { {DK::S32, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[229], 1 },  // conv [156]
  { {DK::S32, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[230], 1 },  // conv [157]
  { {DK::U16, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[231], 1 },  // conv [158]
  { {DK::U16, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[232], 1 },  // conv [159]
  { {DK::S16, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[233], 1 },  // conv [160]
  { {DK::S16, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[234], 1 },  // conv [161]
  { {DK::U8, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[235], 1 },  // conv [162]
  { {DK::U8, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[236], 1 },  // conv [163]
  { {DK::S8, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[237], 1 },  // conv [164]
  { {DK::S8, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[238], 1 },  // conv [165]
  { {DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[239], 1 },  // conv [166]
  { {DK::U32, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[240], 1 },  // conv [167]
  { {DK::S32, DK::U32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[241], 1 },  // conv [168]
  { {DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[242], 1 },  // conv [169]
  { {DK::U16, DK::U32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[243], 1 },  // conv [170]
  { {DK::U16, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[244], 1 },  // conv [171]
  { {DK::S16, DK::U32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[245], 1 },  // conv [172]
  { {DK::S16, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[246], 1 },  // conv [173]
  { {DK::U8, DK::U32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[247], 1 },  // conv [174]
  { {DK::U8, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[248], 1 },  // conv [175]
  { {DK::S8, DK::U32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[249], 1 },  // conv [176]
  { {DK::S8, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[250], 1 },  // conv [177]
  { {DK::U16, DK::U16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[251], 1 },  // conv [178]
  { {DK::U16, DK::S16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[252], 1 },  // conv [179]
  { {DK::S16, DK::U16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[253], 1 },  // conv [180]
  { {DK::S16, DK::S16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[254], 1 },  // conv [181]
  { {DK::U8, DK::U16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[255], 1 },  // conv [182]
  { {DK::U8, DK::S16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[256], 1 },  // conv [183]
  { {DK::S8, DK::U16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[257], 1 },  // conv [184]
  { {DK::S8, DK::S16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[258], 1 },  // conv [185]
  { {DK::U8, DK::U8},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[259], 1 },  // conv [186]
  { {DK::U8, DK::S8},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[260], 1 },  // conv [187]
  { {DK::S8, DK::U8},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[261], 1 },  // conv [188]
  { {DK::S8, DK::S8},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[262], 1 },  // conv [189]
  { {DK::U64, DK::U8},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[263], 1 },  // conv [190]
  { {DK::U64, DK::U16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[264], 1 },  // conv [191]
  { {DK::U32, DK::U8},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[265], 1 },  // conv [192]
  { {DK::U32, DK::U16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[266], 1 },  // conv [193]
  { {DK::U64, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[267], 1 },  // conv [194]
  { {DK::S64, DK::S8},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[268], 1 },  // conv [195]
  { {DK::S64, DK::S16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[269], 1 },  // conv [196]
  { {DK::S32, DK::S8},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[270], 1 },  // conv [197]
  { {DK::S32, DK::S16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[271], 1 },  // conv [198]
  { {DK::U64, DK::U32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[272], 1 },  // conv [199]
  { {DK::S64, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[273], 1 },  // conv [200]
  { {DK::F64, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[274], 1 },  // conv [201]
  { {DK::F64, DK::U32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[275], 1 },  // conv [202]
  { {DK::F32, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[276], 1 },  // conv [203]
  { {DK::F32, DK::U32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[277], 1 },  // conv [204]
  { {DK::F64, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[278], 1 },  // conv [205]
  { {DK::F64, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[279], 1 },  // conv [206]
  { {DK::F32, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[280], 1 },  // conv [207]
  { {DK::F32, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[281], 1 },  // conv [208]
  { {DK::S32, DK::F32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[282], 1 },  // conv [209]
  { {DK::S32, DK::F64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[283], 1 },  // conv [210]
  { {DK::U32, DK::F32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[284], 1 },  // conv [211]
  { {DK::U32, DK::F64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[285], 1 },  // conv [212]
  { {DK::S64, DK::F32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[286], 1 },  // conv [213]
  { {DK::S64, DK::F64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[287], 1 },  // conv [214]
  { {DK::U64, DK::F32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[288], 1 },  // conv [215]
  { {DK::U64, DK::F64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[289], 1 },  // conv [216]
  { {DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[290], 1 },  // bitcast [217]
  { {DK::U64, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[291], 1 },  // bitcast [218]
  { {DK::U64, DK::A64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[292], 1 },  // bitcast [219]
  { {DK::U64, DK::C64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[293], 1 },  // bitcast [220]
  { {DK::S64, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[294], 1 },  // bitcast [221]
  { {DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[295], 1 },  // bitcast [222]
  { {DK::S64, DK::A64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[296], 1 },  // bitcast [223]
  { {DK::S64, DK::C64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[297], 1 },  // bitcast [224]
  { {DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[298], 1 },  // bitcast [225]
  { {DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[299], 1 },  // bitcast [226]
  { {DK::A64, DK::A64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[300], 1 },  // bitcast [227]
  { {DK::A64, DK::C64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[301], 1 },  // bitcast [228]
  { {DK::C64, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[302], 1 },  // bitcast [229]
  { {DK::C64, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[303], 1 },  // bitcast [230]
  { {DK::C64, DK::A64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[304], 1 },  // bitcast [231]
  { {DK::C64, DK::C64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[305], 1 },  // bitcast [232]
  { {DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[306], 1 },  // bitcast [233]
  { {DK::U32, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[307], 1 },  // bitcast [234]
  { {DK::S32, DK::U32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[308], 1 },  // bitcast [235]
  { {DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[309], 1 },  // bitcast [236]
  { {DK::A64, DK::A64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[310], 1 },  // mov [237]
  { {DK::A64, DK::A64},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22},
    &kInsTemplates[311], 1 },  // mov [238]
  { {DK::A64, DK::A64},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22_NOT},
    &kInsTemplates[312], 1 },  // mov [239]
  { {DK::C64, DK::C64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[313], 1 },  // mov [240]
  { {DK::C64, DK::C64},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22},
    &kInsTemplates[314], 1 },  // mov [241]
  { {DK::C64, DK::C64},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22_NOT},
    &kInsTemplates[315], 1 },  // mov [242]
  { {DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[316], 1 },  // mov [243]
  { {DK::U64, DK::U64},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22},
    &kInsTemplates[317], 1 },  // mov [244]
  { {DK::U64, DK::U64},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22_NOT},
    &kInsTemplates[318], 1 },  // mov [245]
  { {DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[319], 1 },  // mov [246]
  { {DK::S64, DK::S64},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22},
    &kInsTemplates[320], 1 },  // mov [247]
  { {DK::S64, DK::S64},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22_NOT},
    &kInsTemplates[321], 1 },  // mov [248]
  { {DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[322], 1 },  // mov [249]
  { {DK::U32, DK::U32},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22},
    &kInsTemplates[323], 1 },  // mov [250]
  { {DK::U32, DK::U32},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22_NOT},
    &kInsTemplates[324], 1 },  // mov [251]
  { {DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[325], 1 },  // mov [252]
  { {DK::S32, DK::S32},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22},
    &kInsTemplates[326], 1 },  // mov [253]
  { {DK::S32, DK::S32},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22_NOT},
    &kInsTemplates[327], 1 },  // mov [254]
  { {DK::U16, DK::U16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[328], 1 },  // mov [255]
  { {DK::U16, DK::U16},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22},
    &kInsTemplates[329], 1 },  // mov [256]
  { {DK::U16, DK::U16},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22_NOT},
    &kInsTemplates[330], 1 },  // mov [257]
  { {DK::S16, DK::S16},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[331], 1 },  // mov [258]
  { {DK::S16, DK::S16},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22},
    &kInsTemplates[332], 1 },  // mov [259]
  { {DK::S16, DK::S16},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22_NOT},
    &kInsTemplates[333], 1 },  // mov [260]
  { {DK::U8, DK::U8},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[334], 1 },  // mov [261]
  { {DK::U8, DK::U8},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22},
    &kInsTemplates[335], 1 },  // mov [262]
  { {DK::U8, DK::U8},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22_NOT},
    &kInsTemplates[336], 1 },  // mov [263]
  { {DK::S8, DK::S8},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[337], 1 },  // mov [264]
  { {DK::S8, DK::S8},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22},
    &kInsTemplates[338], 1 },  // mov [265]
  { {DK::S8, DK::S8},
    {IC::INVALID, IC::IMM_SHIFTED_5_20_21_22_NOT},
    &kInsTemplates[339], 1 },  // mov [266]
  { {DK::F32, DK::F32},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[340], 1 },  // mov [267]
  { {DK::F64, DK::F64},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[341], 1 },  // mov [268]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[342], 2 },  // cmpeq [269]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[344], 2 },  // cmpeq [270]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[346], 2 },  // cmpeq [271]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[348], 2 },  // cmpeq [272]
  { {DK::U64, DK::U64, DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[350], 2 },  // cmpeq [273]
  { {DK::U64, DK::U64, DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[352], 2 },  // cmpeq [274]
  { {DK::S64, DK::S64, DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[354], 2 },  // cmpeq [275]
  { {DK::S64, DK::S64, DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[356], 2 },  // cmpeq [276]
  { {DK::A64, DK::A64, DK::A64, DK::A64, DK::A64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[358], 2 },  // cmpeq [277]
  { {DK::A64, DK::A64, DK::A64, DK::A64, DK::A64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[360], 2 },  // cmpeq [278]
  { {DK::C64, DK::C64, DK::C64, DK::C64, DK::C64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[362], 2 },  // cmpeq [279]
  { {DK::C64, DK::C64, DK::C64, DK::C64, DK::C64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[364], 2 },  // cmpeq [280]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[366], 2 },  // cmpeq [281]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[368], 2 },  // cmpeq [282]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[370], 2 },  // cmpeq [283]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[372], 2 },  // cmpeq [284]
  { {DK::U64, DK::U64, DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[374], 2 },  // cmpeq [285]
  { {DK::U64, DK::U64, DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[376], 2 },  // cmpeq [286]
  { {DK::A64, DK::A64, DK::A64, DK::A64, DK::A64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[378], 2 },  // cmpeq [287]
  { {DK::A64, DK::A64, DK::A64, DK::A64, DK::A64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[380], 2 },  // cmpeq [288]
  { {DK::S64, DK::S64, DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22},
    &kInsTemplates[382], 2 },  // cmpeq [289]
  { {DK::S64, DK::S64, DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::IMM_SHIFTED_10_21_22, IC::INVALID},
    &kInsTemplates[384], 2 },  // cmpeq [290]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[386], 2 },  // cmplt [291]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[388], 2 },  // cmplt [292]
  { {DK::U64, DK::U64, DK::U64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[390], 2 },  // cmplt [293]
  { {DK::A64, DK::A64, DK::A64, DK::A64, DK::A64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[392], 2 },  // cmplt [294]
  { {DK::S64, DK::S64, DK::S64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[394], 2 },  // cmplt [295]
  { {DK::A64, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[396], 1 },  // lea [296]
  { {DK::A64, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[397], 1 },  // lea [297]
  { {DK::A64, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[398], 1 },  // lea [298]
  { {DK::A64, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[399], 1 },  // lea [299]
  { {DK::A64, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::ANY},
    &kInsTemplates[400], 2 },  // lea.mem [300]
  { {DK::A64, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::ANY},
    &kInsTemplates[402], 2 },  // lea.mem [301]
  { {DK::A64, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::ANY},
    &kInsTemplates[404], 2 },  // lea.mem [302]
  { {DK::A64, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::ANY},
    &kInsTemplates[406], 2 },  // lea.mem [303]
  { {DK::A64, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_shifted_10_21_22},
    &kInsTemplates[408], 1 },  // lea.stk [304]
  { {DK::A64, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_16_bits},
    &kInsTemplates[409], 2 },  // lea.stk [305]
  { {DK::A64, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_32_bits},
    &kInsTemplates[411], 3 },  // lea.stk [306]
  { {DK::A64, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_shifted_10_21_22},
    &kInsTemplates[414], 1 },  // lea.stk [307]
  { {DK::A64, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_16_bits},
    &kInsTemplates[415], 2 },  // lea.stk [308]
  { {DK::A64, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_32_bits},
    &kInsTemplates[417], 3 },  // lea.stk [309]
  { {DK::A64, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_shifted_10_21_22},
    &kInsTemplates[420], 1 },  // lea.stk [310]
  { {DK::A64, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_16_bits},
    &kInsTemplates[421], 2 },  // lea.stk [311]
  { {DK::A64, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_32_bits},
    &kInsTemplates[423], 3 },  // lea.stk [312]
  { {DK::A64, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_shifted_10_21_22},
    &kInsTemplates[426], 1 },  // lea.stk [313]
  { {DK::A64, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_16_bits},
    &kInsTemplates[427], 2 },  // lea.stk [314]
  { {DK::A64, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_32_bits},
    &kInsTemplates[429], 3 },  // lea.stk [315]
  { {DK::C64, DK::INVALID},
    {IC::INVALID, IC::INVALID},
    &kInsTemplates[432], 2 },  // lea.fun [316]
  { {DK::U64, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[434], 1 },  // ld [317]
  { {DK::U64, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[435], 1 },  // ld [318]
  { {DK::U64, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[436], 1 },  // ld [319]
  { {DK::U64, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[437], 1 },  // ld [320]
  { {DK::S64, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[438], 1 },  // ld [321]
  { {DK::S64, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[439], 1 },  // ld [322]
  { {DK::S64, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[440], 1 },  // ld [323]
  { {DK::S64, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[441], 1 },  // ld [324]
  { {DK::A64, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[442], 1 },  // ld [325]
  { {DK::A64, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[443], 1 },  // ld [326]
  { {DK::A64, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[444], 1 },  // ld [327]
  { {DK::A64, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[445], 1 },  // ld [328]
  { {DK::C64, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[446], 1 },  // ld [329]
  { {DK::C64, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[447], 1 },  // ld [330]
  { {DK::C64, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[448], 1 },  // ld [331]
  { {DK::C64, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[449], 1 },  // ld [332]
  { {DK::U32, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[450], 1 },  // ld [333]
  { {DK::U32, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[451], 1 },  // ld [334]
  { {DK::U32, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[452], 1 },  // ld [335]
  { {DK::U32, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[453], 1 },  // ld [336]
  { {DK::S32, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[454], 1 },  // ld [337]
  { {DK::S32, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[455], 1 },  // ld [338]
  { {DK::S32, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[456], 1 },  // ld [339]
  { {DK::S32, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[457], 1 },  // ld [340]
  { {DK::U16, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[458], 1 },  // ld [341]
  { {DK::U16, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[459], 1 },  // ld [342]
  { {DK::U16, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[460], 1 },  // ld [343]
  { {DK::U16, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[461], 1 },  // ld [344]
  { {DK::S16, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[462], 1 },  // ld [345]
  { {DK::S16, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[463], 1 },  // ld [346]
  { {DK::S16, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[464], 1 },  // ld [347]
  { {DK::S16, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[465], 1 },  // ld [348]
  { {DK::U8, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[466], 1 },  // ld [349]
  { {DK::U8, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[467], 1 },  // ld [350]
  { {DK::U8, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[468], 1 },  // ld [351]
  { {DK::U8, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[469], 1 },  // ld [352]
  { {DK::S8, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[470], 1 },  // ld [353]
  { {DK::S8, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[471], 1 },  // ld [354]
  { {DK::S8, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[472], 1 },  // ld [355]
  { {DK::S8, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[473], 1 },  // ld [356]
  { {DK::F32, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[474], 1 },  // ld [357]
  { {DK::F32, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[475], 1 },  // ld [358]
  { {DK::F32, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[476], 1 },  // ld [359]
  { {DK::F32, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[477], 1 },  // ld [360]
  { {DK::F32, DK::A64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[478], 1 },  // ld [361]
  { {DK::F32, DK::A64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[479], 1 },  // ld [362]
  { {DK::F32, DK::A64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[480], 1 },  // ld [363]
  { {DK::F32, DK::A64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[481], 1 },  // ld [364]
  { {DK::U64, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[482], 1 },  // ld.stk [365]
  { {DK::U64, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[483], 1 },  // ld.stk [366]
  { {DK::U64, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[484], 1 },  // ld.stk [367]
  { {DK::U64, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[485], 1 },  // ld.stk [368]
  { {DK::S64, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[486], 1 },  // ld.stk [369]
  { {DK::S64, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[487], 1 },  // ld.stk [370]
  { {DK::S64, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[488], 1 },  // ld.stk [371]
  { {DK::S64, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[489], 1 },  // ld.stk [372]
  { {DK::A64, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[490], 1 },  // ld.stk [373]
  { {DK::A64, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[491], 1 },  // ld.stk [374]
  { {DK::A64, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[492], 1 },  // ld.stk [375]
  { {DK::A64, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[493], 1 },  // ld.stk [376]
  { {DK::C64, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[494], 1 },  // ld.stk [377]
  { {DK::C64, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[495], 1 },  // ld.stk [378]
  { {DK::C64, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[496], 1 },  // ld.stk [379]
  { {DK::C64, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[497], 1 },  // ld.stk [380]
  { {DK::U32, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_4},
    &kInsTemplates[498], 1 },  // ld.stk [381]
  { {DK::U32, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_4},
    &kInsTemplates[499], 1 },  // ld.stk [382]
  { {DK::U32, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_4},
    &kInsTemplates[500], 1 },  // ld.stk [383]
  { {DK::U32, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_4},
    &kInsTemplates[501], 1 },  // ld.stk [384]
  { {DK::S32, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_4},
    &kInsTemplates[502], 1 },  // ld.stk [385]
  { {DK::S32, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_4},
    &kInsTemplates[503], 1 },  // ld.stk [386]
  { {DK::S32, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_4},
    &kInsTemplates[504], 1 },  // ld.stk [387]
  { {DK::S32, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_4},
    &kInsTemplates[505], 1 },  // ld.stk [388]
  { {DK::U16, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_2},
    &kInsTemplates[506], 1 },  // ld.stk [389]
  { {DK::U16, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_2},
    &kInsTemplates[507], 1 },  // ld.stk [390]
  { {DK::U16, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_2},
    &kInsTemplates[508], 1 },  // ld.stk [391]
  { {DK::U16, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_2},
    &kInsTemplates[509], 1 },  // ld.stk [392]
  { {DK::S16, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_2},
    &kInsTemplates[510], 1 },  // ld.stk [393]
  { {DK::S16, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_2},
    &kInsTemplates[511], 1 },  // ld.stk [394]
  { {DK::S16, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_2},
    &kInsTemplates[512], 1 },  // ld.stk [395]
  { {DK::S16, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_2},
    &kInsTemplates[513], 1 },  // ld.stk [396]
  { {DK::U8, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21},
    &kInsTemplates[514], 1 },  // ld.stk [397]
  { {DK::U8, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21},
    &kInsTemplates[515], 1 },  // ld.stk [398]
  { {DK::U8, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21},
    &kInsTemplates[516], 1 },  // ld.stk [399]
  { {DK::U8, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21},
    &kInsTemplates[517], 1 },  // ld.stk [400]
  { {DK::S8, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21},
    &kInsTemplates[518], 1 },  // ld.stk [401]
  { {DK::S8, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21},
    &kInsTemplates[519], 1 },  // ld.stk [402]
  { {DK::S8, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21},
    &kInsTemplates[520], 1 },  // ld.stk [403]
  { {DK::S8, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21},
    &kInsTemplates[521], 1 },  // ld.stk [404]
  { {DK::F32, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_4},
    &kInsTemplates[522], 1 },  // ld.stk [405]
  { {DK::F32, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_4},
    &kInsTemplates[523], 1 },  // ld.stk [406]
  { {DK::F32, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_4},
    &kInsTemplates[524], 1 },  // ld.stk [407]
  { {DK::F32, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_4},
    &kInsTemplates[525], 1 },  // ld.stk [408]
  { {DK::F32, DK::INVALID, DK::S64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[526], 1 },  // ld.stk [409]
  { {DK::F32, DK::INVALID, DK::U64},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[527], 1 },  // ld.stk [410]
  { {DK::F32, DK::INVALID, DK::S32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[528], 1 },  // ld.stk [411]
  { {DK::F32, DK::INVALID, DK::U32},
    {IC::INVALID, IC::INVALID, IC::pos_stk_combo_10_21_times_8},
    &kInsTemplates[529], 1 },  // ld.stk [412]
  { {DK::A64, DK::S64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[530], 1 },  // st [413]
  { {DK::A64, DK::U64, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[531], 1 },  // st [414]
  { {DK::A64, DK::S32, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[532], 1 },  // st [415]
  { {DK::A64, DK::U32, DK::U64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[533], 1 },  // st [416]
  { {DK::A64, DK::S64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[534], 1 },  // st [417]
  { {DK::A64, DK::U64, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[535], 1 },  // st [418]
  { {DK::A64, DK::S32, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[536], 1 },  // st [419]
  { {DK::A64, DK::U32, DK::S64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[537], 1 },  // st [420]
  { {DK::A64, DK::S64, DK::A64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[538], 1 },  // st [421]
  { {DK::A64, DK::U64, DK::A64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[539], 1 },  // st [422]
  { {DK::A64, DK::S32, DK::A64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[540], 1 },  // st [423]
  { {DK::A64, DK::U32, DK::A64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[541], 1 },  // st [424]
  { {DK::A64, DK::S64, DK::C64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[542], 1 },  // st [425]
  { {DK::A64, DK::U64, DK::C64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[543], 1 },  // st [426]
  { {DK::A64, DK::S32, DK::C64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[544], 1 },  // st [427]
  { {DK::A64, DK::U32, DK::C64},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[545], 1 },  // st [428]
  { {DK::A64, DK::S64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[546], 1 },  // st [429]
  { {DK::A64, DK::U64, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[547], 1 },  // st [430]
  { {DK::A64, DK::S32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[548], 1 },  // st [431]
  { {DK::A64, DK::U32, DK::U32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[549], 1 },  // st [432]
  { {DK::A64, DK::S64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[550], 1 },  // st [433]
  { {DK::A64, DK::U64, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[551], 1 },  // st [434]
  { {DK::A64, DK::S32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[552], 1 },  // st [435]
  { {DK::A64, DK::U32, DK::S32},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[553], 1 },  // st [436]
  { {DK::A64, DK::S64, DK::U16},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[554], 1 },  // st [437]
  { {DK::A64, DK::U64, DK::U16},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[555], 1 },  // st [438]
  { {DK::A64, DK::S32, DK::U16},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[556], 1 },  // st [439]
  { {DK::A64, DK::U32, DK::U16},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[557], 1 },  // st [440]
  { {DK::A64, DK::S64, DK::S16},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[558], 1 },  // st [441]
  { {DK::A64, DK::U64, DK::S16},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[559], 1 },  // st [442]
  { {DK::A64, DK::S32, DK::S16},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[560], 1 },  // st [443]
  { {DK::A64, DK::U32, DK::S16},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[561], 1 },  // st [444]
  { {DK::A64, DK::S64, DK::U8},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[562], 1 },  // st [445]
  { {DK::A64, DK::U64, DK::U8},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[563], 1 },  // st [446]
  { {DK::A64, DK::S32, DK::U8},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[564], 1 },  // st [447]
  { {DK::A64, DK::U32, DK::U8},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[565], 1 },  // st [448]
  { {DK::A64, DK::S64, DK::S8},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[566], 1 },  // st [449]
  { {DK::A64, DK::U64, DK::S8},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[567], 1 },  // st [450]
  { {DK::A64, DK::S32, DK::S8},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[568], 1 },  // st [451]
  { {DK::A64, DK::U32, DK::S8},
    {IC::INVALID, IC::INVALID, IC::INVALID},
    &kInsTemplates[569], 1 },  // st [452]
  { {DK::INVALID, DK::S64, DK::U64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[570], 1 },  // st.stk [453]
  { {DK::INVALID, DK::U64, DK::U64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[571], 1 },  // st.stk [454]
  { {DK::INVALID, DK::S32, DK::U64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[572], 1 },  // st.stk [455]
  { {DK::INVALID, DK::U32, DK::U64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[573], 1 },  // st.stk [456]
  { {DK::INVALID, DK::S64, DK::S64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[574], 1 },  // st.stk [457]
  { {DK::INVALID, DK::U64, DK::S64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[575], 1 },  // st.stk [458]
  { {DK::INVALID, DK::S32, DK::S64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[576], 1 },  // st.stk [459]
  { {DK::INVALID, DK::U32, DK::S64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[577], 1 },  // st.stk [460]
  { {DK::INVALID, DK::S64, DK::A64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[578], 1 },  // st.stk [461]
  { {DK::INVALID, DK::U64, DK::A64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[579], 1 },  // st.stk [462]
  { {DK::INVALID, DK::S32, DK::A64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[580], 1 },  // st.stk [463]
  { {DK::INVALID, DK::U32, DK::A64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[581], 1 },  // st.stk [464]
  { {DK::INVALID, DK::S64, DK::C64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[582], 1 },  // st.stk [465]
  { {DK::INVALID, DK::U64, DK::C64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[583], 1 },  // st.stk [466]
  { {DK::INVALID, DK::S32, DK::C64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[584], 1 },  // st.stk [467]
  { {DK::INVALID, DK::U32, DK::C64},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[585], 1 },  // st.stk [468]
  { {DK::INVALID, DK::S64, DK::U32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_4, IC::INVALID},
    &kInsTemplates[586], 1 },  // st.stk [469]
  { {DK::INVALID, DK::U64, DK::U32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_4, IC::INVALID},
    &kInsTemplates[587], 1 },  // st.stk [470]
  { {DK::INVALID, DK::S32, DK::U32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_4, IC::INVALID},
    &kInsTemplates[588], 1 },  // st.stk [471]
  { {DK::INVALID, DK::U32, DK::U32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_4, IC::INVALID},
    &kInsTemplates[589], 1 },  // st.stk [472]
  { {DK::INVALID, DK::S64, DK::S32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_4, IC::INVALID},
    &kInsTemplates[590], 1 },  // st.stk [473]
  { {DK::INVALID, DK::U64, DK::S32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_4, IC::INVALID},
    &kInsTemplates[591], 1 },  // st.stk [474]
  { {DK::INVALID, DK::S32, DK::S32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_4, IC::INVALID},
    &kInsTemplates[592], 1 },  // st.stk [475]
  { {DK::INVALID, DK::U32, DK::S32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_4, IC::INVALID},
    &kInsTemplates[593], 1 },  // st.stk [476]
  { {DK::INVALID, DK::S64, DK::U16},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_2, IC::INVALID},
    &kInsTemplates[594], 1 },  // st.stk [477]
  { {DK::INVALID, DK::U64, DK::U16},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_2, IC::INVALID},
    &kInsTemplates[595], 1 },  // st.stk [478]
  { {DK::INVALID, DK::S32, DK::U16},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_2, IC::INVALID},
    &kInsTemplates[596], 1 },  // st.stk [479]
  { {DK::INVALID, DK::U32, DK::U16},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_2, IC::INVALID},
    &kInsTemplates[597], 1 },  // st.stk [480]
  { {DK::INVALID, DK::S64, DK::S16},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_2, IC::INVALID},
    &kInsTemplates[598], 1 },  // st.stk [481]
  { {DK::INVALID, DK::U64, DK::S16},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_2, IC::INVALID},
    &kInsTemplates[599], 1 },  // st.stk [482]
  { {DK::INVALID, DK::S32, DK::S16},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_2, IC::INVALID},
    &kInsTemplates[600], 1 },  // st.stk [483]
  { {DK::INVALID, DK::U32, DK::S16},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_2, IC::INVALID},
    &kInsTemplates[601], 1 },  // st.stk [484]
  { {DK::INVALID, DK::S64, DK::U8},
    {IC::INVALID, IC::pos_stk_combo_10_21, IC::INVALID},
    &kInsTemplates[602], 1 },  // st.stk [485]
  { {DK::INVALID, DK::U64, DK::U8},
    {IC::INVALID, IC::pos_stk_combo_10_21, IC::INVALID},
    &kInsTemplates[603], 1 },  // st.stk [486]
  { {DK::INVALID, DK::S32, DK::U8},
    {IC::INVALID, IC::pos_stk_combo_10_21, IC::INVALID},
    &kInsTemplates[604], 1 },  // st.stk [487]
  { {DK::INVALID, DK::U32, DK::U8},
    {IC::INVALID, IC::pos_stk_combo_10_21, IC::INVALID},
    &kInsTemplates[605], 1 },  // st.stk [488]
  { {DK::INVALID, DK::S64, DK::S8},
    {IC::INVALID, IC::pos_stk_combo_10_21, IC::INVALID},
    &kInsTemplates[606], 1 },  // st.stk [489]
  { {DK::INVALID, DK::U64, DK::S8},
    {IC::INVALID, IC::pos_stk_combo_10_21, IC::INVALID},
    &kInsTemplates[607], 1 },  // st.stk [490]
  { {DK::INVALID, DK::S32, DK::S8},
    {IC::INVALID, IC::pos_stk_combo_10_21, IC::INVALID},
    &kInsTemplates[608], 1 },  // st.stk [491]
  { {DK::INVALID, DK::U32, DK::S8},
    {IC::INVALID, IC::pos_stk_combo_10_21, IC::INVALID},
    &kInsTemplates[609], 1 },  // st.stk [492]
  { {DK::INVALID, DK::S64, DK::F32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_4, IC::INVALID},
    &kInsTemplates[610], 1 },  // st.stk [493]
  { {DK::INVALID, DK::U64, DK::F32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_4, IC::INVALID},
    &kInsTemplates[611], 1 },  // st.stk [494]
  { {DK::INVALID, DK::S32, DK::F32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_4, IC::INVALID},
    &kInsTemplates[612], 1 },  // st.stk [495]
  { {DK::INVALID, DK::U32, DK::F32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_4, IC::INVALID},
    &kInsTemplates[613], 1 },  // st.stk [496]
  { {DK::INVALID, DK::S64, DK::F32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[614], 1 },  // st.stk [497]
  { {DK::INVALID, DK::U64, DK::F32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[615], 1 },  // st.stk [498]
  { {DK::INVALID, DK::S32, DK::F32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[616], 1 },  // st.stk [499]
  { {DK::INVALID, DK::U32, DK::F32},
    {IC::INVALID, IC::pos_stk_combo_10_21_times_8, IC::INVALID},
    &kInsTemplates[617], 1 },  // st.stk [500]
};
}  // namespace

const char* const IMM_CURB_ToStringMap[] = {
    "INVALID", // 0
    "ZERO", // 1
    "ANY", // 2
    "IMM_SHIFTED_10_21_22", // 3
    "IMM_10_15_16_22_W", // 4
    "IMM_10_15_16_22_X", // 5
    "IMM_SHIFTED_5_20_21_22", // 6
    "IMM_SHIFTED_5_20_21_22_NOT", // 7
    "pos_stk_combo_shifted_10_21_22", // 8
    "pos_stk_combo_16_bits", // 9
    "pos_stk_combo_32_bits", // 10
    "pos_stk_combo_10_21", // 11
    "pos_stk_combo_10_21_times_2", // 12
    "pos_stk_combo_10_21_times_4", // 13
    "pos_stk_combo_10_21_times_8", // 14
};

template<>  // template specialization for IMM_CURB
const char* EnumToString<IMM_CURB>(IMM_CURB x) { return IMM_CURB_ToStringMap[unsigned(x)]; }

/* @AUTOGEN-END@ */

const Pattern* FindMatchingPattern(Ins ins) {
  const uint64_t reg_matcher = ExtractTypeMaskForPattern(ins);
  const OPC opc = InsOPC(ins);
  const uint16_t end = kPatternJumper[unsigned(opc) + 1];
  for (unsigned p = kPatternJumper[unsigned(opc)]; p < end; ++p) {
    const Pattern& pat = kPatterns[p];
    if (PatternMatchesTypeConstraints(pat, reg_matcher) &&
        0 == PatternMismatchesImmConstraints(pat, ins, false)) {
      return &pat;
    }
  }
  return nullptr;
}

uint8_t FindtImmediateMismatchesInBestMatchPattern(Ins ins,
                                                   bool assume_stk_op_matches) {
  uint8_t best = MATCH_IMPOSSIBLE;
  uint8_t best_num_bits = __builtin_popcount(best);
  const uint64_t type_matcher = ExtractTypeMaskForPattern(ins);
  // std::cout << "@type_matcher: " << std::hex << type_matcher << "\n";
  const OPC opc = InsOPC(ins);
  const uint16_t end = kPatternJumper[unsigned(opc) + 1];
  for (unsigned p = kPatternJumper[unsigned(opc)]; p < end; ++p) {
    const Pattern& pat = kPatterns[p];
    if (!PatternMatchesTypeConstraints(pat, type_matcher)) continue;
    const uint8_t mismatches =
        PatternMismatchesImmConstraints(pat, ins, assume_stk_op_matches);
    const uint8_t num_bits = __builtin_popcount(mismatches);
    if (num_bits < best_num_bits) {
      best = mismatches;
      best_num_bits = num_bits;
    }
  }
  return best;
}

namespace {
int32_t ExtractReg(Reg reg) {
  ASSERT(reg.kind() == RefKind::REG, "not a reg " << unsigned(reg.kind()));
  CpuReg cpu_reg = RegCpuReg(reg);
  ASSERT(!cpu_reg.isnull(), "no cpu reg");
  return CpuRegNo(cpu_reg);
}

int32_t ExtractNum(Const num) {
  ASSERT(num.kind() == RefKind::CONST, "not a const " << unsigned(num.kind()));
  switch (DKFlavor(ConstKind(num))) {
    case DK_FLAVOR_U:
      return ConstValueU(num);
    case DK_FLAVOR_A:
    case DK_FLAVOR_C:
    case DK_FLAVOR_S:
      return ConstValueACS(num);
    default:
      ASSERT(false, "unreachable");
      return 0;
  }
}

int32_t ExtractNumNeg(Const num) { return -ExtractNum(num); }

int32_t ExtractNumNot(Const num) { return ~ExtractNum(num); }

int32_t GetStackOffset(Handle stk, Handle num) {
  ASSERT(stk.kind() == RefKind::STK, "");
  ASSERT(num.kind() == RefKind::CONST, "");
  return StkSlot(Stk(stk)) + ConstValueInt32(Const(num));
}

int32_t ExtractParamOp(Ins ins, PARAM param, const EmitContext& ctx) {
  switch (param) {
    case PARAM::reg0:
      return ExtractReg(Reg(InsOperand(ins, 0)));
    case PARAM::reg1:
      return ExtractReg(Reg(InsOperand(ins, 1)));
    case PARAM::reg2:
      return ExtractReg(Reg(InsOperand(ins, 2)));
    case PARAM::reg3:
      return ExtractReg(Reg(InsOperand(ins, 3)));
    case PARAM::reg4:
      return ExtractReg(Reg(InsOperand(ins, 4)));
    case PARAM::num0:
      return ExtractNum(Const(InsOperand(ins, 0)));
    case PARAM::num1:
      return ExtractNum(Const(InsOperand(ins, 1)));
    case PARAM::num2:
      return ExtractNum(Const(InsOperand(ins, 2)));
    case PARAM::num3:
      return ExtractNum(Const(InsOperand(ins, 3)));
    case PARAM::num4:
      return ExtractNum(Const(InsOperand(ins, 4)));
    case PARAM::num0_not:
      return ExtractNumNot(Const(InsOperand(ins, 0)));
    case PARAM::num1_not:
      return ExtractNumNot(Const(InsOperand(ins, 1)));
    case PARAM::num2_not:
      return ExtractNumNot(Const(InsOperand(ins, 2)));
    case PARAM::num0_neg:
      return ExtractNumNeg(Const(InsOperand(ins, 0)));
    case PARAM::num1_neg:
      return ExtractNumNeg(Const(InsOperand(ins, 1)));
    case PARAM::num2_neg:
      return ExtractNumNeg(Const(InsOperand(ins, 2)));
    case PARAM::num3_neg:
      return ExtractNumNeg(Const(InsOperand(ins, 3)));
    case PARAM::num4_neg:
      return ExtractNumNeg(Const(InsOperand(ins, 4)));
    case PARAM::stk0_offset1:
      return GetStackOffset(InsOperand(ins, 0), InsOperand(ins, 1));
    case PARAM::stk0_offset1_lo:
      return GetStackOffset(InsOperand(ins, 0), InsOperand(ins, 1)) & 0xffff;

    case PARAM::stk0_offset1_hi:
      return (GetStackOffset(InsOperand(ins, 0), InsOperand(ins, 1)) >> 16) &
             0xffff;
    case PARAM::stk1_offset2:
      return GetStackOffset(InsOperand(ins, 1), InsOperand(ins, 2));

    case PARAM::stk1_offset2_lo:
      return GetStackOffset(InsOperand(ins, 1), InsOperand(ins, 2)) & 0xffff;

    case PARAM::stk1_offset2_hi:
      return (GetStackOffset(InsOperand(ins, 1), InsOperand(ins, 2)) >> 16) &
             0xffff;
    case PARAM::scratch_gpr:
      ASSERT(CpuRegKind(ctx.scratch_cpu_reg) == +CPU_REG_KIND::GPR64,
             "expected gpr reg");
      return CpuRegNo(ctx.scratch_cpu_reg);
    case PARAM::scratch_flt:
      ASSERT(CpuRegKind(ctx.scratch_cpu_reg) == +CPU_REG_KIND::FLT64,
             "expected not gpr reg");
      return CpuRegNo(ctx.scratch_cpu_reg);
    case PARAM::bbl0:
    case PARAM::bbl2:
    case PARAM::fun0:

      // relocs
      return 0;
    default:
      ASSERT(false, "unsupported parmm " << unsigned(param));
      return 0;
  }
}

void MaybeHandleReloc(a64::Ins* armins, unsigned pos, Ins ins, PARAM op) {
  Str symbol;
  auto handle_addend = [&](Const num) {
    armins->operands[pos] = ConstValueInt32(num);
  };
  switch (op) {
#if 0
    case PARAM::bbl0:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::JUMP24;
      armins->is_local_sym = true;
      symbol = Name(Bbl(InsOperand(ins, 0)));
      break;
    case PARAM::bbl2:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::JUMP24;
      armins->is_local_sym = true;
      symbol = Name(Bbl(InsOperand(ins, 2)));
      break;
    case PARAM::fun0:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::CALL;
      symbol = Name(Fun(InsOperand(ins, 0)));
      break;
    case PARAM::mem1_num2_lo16:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::MOVW_ABS_NC;
      symbol = Name(Mem(InsOperand(ins, 1)));
      handle_addend(Const(InsOperand(ins, 2)));
      break;
    case PARAM::mem1_num2_hi16:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::MOVT_ABS;
      symbol = Name(Mem(InsOperand(ins, 1)));
      handle_addend(Const(InsOperand(ins, 2)));
      break;
    case PARAM::fun1_lo16:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::MOVW_ABS_NC;
      symbol = Name(Fun(InsOperand(ins, 1)));
      break;
    case PARAM::fun1_hi16:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::MOVT_ABS;
      symbol = Name(Fun(InsOperand(ins, 1)));
      break;
    case PARAM::jtb1_lo16:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::MOVW_ABS_NC;
      armins->is_local_sym = true;
      symbol = Name(Jtb(InsOperand(ins, 1)));
      break;
    case PARAM::jtb1_hi16:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::MOVT_ABS;
      armins->is_local_sym = true;
      symbol = Name(Jtb(InsOperand(ins, 1)));
      break;
#endif
    default:
      return;
  }
  armins->reloc_pos = pos;
  armins->reloc_symbol = StrData(symbol);
}

}  // namespace

// number of args == MAX_OPERANDS
a64::Ins MakeIns(a64::OPC opc_enum,
                 uint32_t x0,
                 uint32_t x1,
                 uint32_t x2,
                 uint32_t x3,
                 uint32_t x4) {
  const a64::Opcode* opc = &a64::OpcodeTable[+opc_enum];
  if (opc->num_fields > 0) x0 = EncodeOperand(opc->fields[0], x0);
  if (opc->num_fields > 1) x1 = EncodeOperand(opc->fields[1], x1);
  if (opc->num_fields > 2) x2 = EncodeOperand(opc->fields[2], x2);
  if (opc->num_fields > 3) x3 = EncodeOperand(opc->fields[3], x3);
  if (opc->num_fields > 4) x4 = EncodeOperand(opc->fields[4], x4);
  return a64::Ins{opc, {x0, x1, x2, x3, x4}};
}
a64::Ins MakeInsFromTmpl(const InsTmpl& tmpl, Ins ins, const EmitContext& ctx) {
  a64::Ins out;
  out.opcode = &a64::OpcodeTable[unsigned(tmpl.opcode)];
  for (unsigned o = 0; o < a64::MAX_OPERANDS; ++o) {
    if ((tmpl.template_mask & (1U << o)) == 0) {
      // fixed operand - we uses these verbatim
      out.operands[o] = tmpl.operands[o];
    } else {
      // parameters require extra processing
      auto param = PARAM(tmpl.operands[o]);
      out.operands[o] = a64::EncodeOperand(out.opcode->fields[o], ExtractParamOp(ins, param, ctx)
                                           );
      // Note: this may overwrite    out.operands[o]
      MaybeHandleReloc(&out, o, ins, param);
    }
  }
  return out;
}

}  // namespace cwerg::code_gen_a64
