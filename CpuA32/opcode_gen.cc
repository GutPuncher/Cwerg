// NOTE: this file is PARTIALLY autogenerated via: ./opcode_tab.py gen_c
#include "CpuA32/opcode_gen.h"
#include "Util/assert.h"

namespace cwerg::a32 {

struct BitRange {
  BitRangeKind modifier;
  uint8_t width;
  uint8_t position;
};

struct Field {
  uint8_t num_bit_ranges;
  BitRange bit_ranges[MAX_BIT_RANGES];
};

/* @AUTOGEN-START@ */
// Indexed by OPC which in turn are organize to help with disassembly
const Opcode OpcodeTable[] = {
{"invalid", "invalid", 0, 0, 0, {}, 0, MEM_WIDTH::NA, SR_UPDATE::NONE},
/* ============================================================*/
/* BLOCK 00000000 */
/* ============================================================*/
{"mul", "mul", 0x0ff0f0f0, 0x00000090,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mla", "mla", 0x0ff000f0, 0x00200090,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"umull", "umull", 0x0ff000f0, 0x00800090,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 DST_0_1 | MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"umlal", "umlal", 0x0ff000f0, 0x00a00090,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_12_15, OK::REG_0_3, OK::REG_8_11},
 DST_0_1 | MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smull", "smull", 0x0ff000f0, 0x00c00090,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 RESULT_64BIT | SRC_DST_0_1 | MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smlal", "smlal", 0x0ff000f0, 0x00e00090,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 DST_0_1 | MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"muls", "muls", 0x0ff0f0f0, 0x00100090,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 MUL, MEM_WIDTH::NA, SR_UPDATE::NZ
},
{"mlas", "mlas", 0x0ff000f0, 0x00300090,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NZ
},
{"umulls", "umulls", 0x0ff000f0, 0x00900090,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 DST_0_1 | MUL, MEM_WIDTH::NA, SR_UPDATE::NZ
},
{"umlals", "umlals", 0x0ff000f0, 0x00b00090,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_12_15, OK::REG_0_3, OK::REG_8_11},
 DST_0_1 | MULACC, MEM_WIDTH::NA, SR_UPDATE::NZ
},
{"smulls", "smulls", 0x0ff000f0, 0x00d00090,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 RESULT_64BIT | SRC_DST_0_1 | MUL, MEM_WIDTH::NA, SR_UPDATE::NZ
},
{"smlals", "smlals", 0x0ff000f0, 0x00f00090,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 DST_0_1 | MULACC, MEM_WIDTH::NA, SR_UPDATE::NZ
},
{"mls", "mls", 0x0ff000f0, 0x00600090,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smlabb", "smlabb", 0x0ff000f0, 0x01000080,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smulbb", "smulbb", 0x0ff0f0f0, 0x01600080,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smlatb", "smlatb", 0x0ff000f0, 0x010000a0,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smultb", "smultb", 0x0ff0f0f0, 0x016000a0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smlabt", "smlabt", 0x0ff000f0, 0x010000c0,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smulbt", "smulbt", 0x0ff0f0f0, 0x016000c0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smlatt", "smlatt", 0x0ff000f0, 0x010000e0,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11, OK::REG_12_15},
 MULACC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"smultt", "smultt", 0x0ff0f0f0, 0x016000e0,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 MUL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"strex", "strex", 0x0ff00ff0, 0x01800f90,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::REG_BASE_16_19},
 STORE | ATOMIC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrex", "ldrex", 0x0ff00fff, 0x01900f9f,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19},
 LOAD | ATOMIC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrh", "ldrh_imm_sub_post", 0x0ff000f0, 0x005000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_imm_sub_post", 0x0ff000f0, 0x005000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_imm_sub_post", 0x0ff000f0, 0x005000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_imm_sub_post", 0x0ff000f0, 0x004000b0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_3_8_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrd", "ldrd_imm_sub_post", 0x0ff000f0, 0x004000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_imm_sub_post", 0x0ff000f0, 0x004000f0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_3_8_11, OK::REG_PAIR_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrh", "ldrh_reg_sub_post", 0x0ff00ff0, 0x001000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_reg_sub_post", 0x0ff00ff0, 0x001000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_reg_sub_post", 0x0ff00ff0, 0x001000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_reg_sub_post", 0x0ff00ff0, 0x000000b0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_0_3, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrd", "ldrd_reg_sub_post", 0x0ff00ff0, 0x000000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_reg_sub_post", 0x0ff00ff0, 0x000000f0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_0_3, OK::REG_PAIR_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrh", "ldrh_imm_add_post", 0x0ff000f0, 0x00d000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_imm_add_post", 0x0ff000f0, 0x00d000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_imm_add_post", 0x0ff000f0, 0x00d000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_imm_add_post", 0x0ff000f0, 0x00c000b0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_3_8_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrd", "ldrd_imm_add_post", 0x0ff000f0, 0x00c000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_imm_add_post", 0x0ff000f0, 0x00c000f0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_3_8_11, OK::REG_PAIR_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrh", "ldrh_reg_add_post", 0x0ff00ff0, 0x009000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_reg_add_post", 0x0ff00ff0, 0x009000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_reg_add_post", 0x0ff00ff0, 0x009000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_reg_add_post", 0x0ff00ff0, 0x008000b0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_0_3, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrd", "ldrd_reg_add_post", 0x0ff00ff0, 0x008000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_reg_add_post", 0x0ff00ff0, 0x008000f0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_0_3, OK::REG_PAIR_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrh", "ldrh_imm_sub", 0x0ff000f0, 0x015000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_imm_sub", 0x0ff000f0, 0x015000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_imm_sub", 0x0ff000f0, 0x015000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_imm_sub", 0x0ff000f0, 0x014000b0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_3_8_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrd", "ldrd_imm_sub", 0x0ff000f0, 0x014000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_imm_sub", 0x0ff000f0, 0x014000f0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_3_8_11, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrh", "ldrh_reg_sub", 0x0ff00ff0, 0x011000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_reg_sub", 0x0ff00ff0, 0x011000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_reg_sub", 0x0ff00ff0, 0x011000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_reg_sub", 0x0ff00ff0, 0x010000b0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_0_3, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrd", "ldrd_reg_sub", 0x0ff00ff0, 0x010000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_reg_sub", 0x0ff00ff0, 0x010000f0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_0_3, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrh", "ldrh_imm_add", 0x0ff000f0, 0x01d000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_imm_add", 0x0ff000f0, 0x01d000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_imm_add", 0x0ff000f0, 0x01d000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_imm_add", 0x0ff000f0, 0x01c000b0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_3_8_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrd", "ldrd_imm_add", 0x0ff000f0, 0x01c000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_imm_add", 0x0ff000f0, 0x01c000f0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_3_8_11, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrh", "ldrh_reg_add", 0x0ff00ff0, 0x019000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_reg_add", 0x0ff00ff0, 0x019000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_reg_add", 0x0ff00ff0, 0x019000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_reg_add", 0x0ff00ff0, 0x018000b0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_0_3, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrd", "ldrd_reg_add", 0x0ff00ff0, 0x018000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_reg_add", 0x0ff00ff0, 0x018000f0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_0_3, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrh", "ldrh_imm_sub_pre", 0x0ff000f0, 0x017000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_imm_sub_pre", 0x0ff000f0, 0x017000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_imm_sub_pre", 0x0ff000f0, 0x017000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_imm_sub_pre", 0x0ff000f0, 0x016000b0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_3_8_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrd", "ldrd_imm_sub_pre", 0x0ff000f0, 0x016000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_imm_sub_pre", 0x0ff000f0, 0x016000f0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_3_8_11, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrh", "ldrh_reg_sub_pre", 0x0ff00ff0, 0x013000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_reg_sub_pre", 0x0ff00ff0, 0x013000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_reg_sub_pre", 0x0ff00ff0, 0x013000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_reg_sub_pre", 0x0ff00ff0, 0x012000b0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_0_3, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrd", "ldrd_reg_sub_pre", 0x0ff00ff0, 0x012000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_reg_sub_pre", 0x0ff00ff0, 0x012000f0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_0_3, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrh", "ldrh_imm_add_pre", 0x0ff000f0, 0x01f000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_imm_add_pre", 0x0ff000f0, 0x01f000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_imm_add_pre", 0x0ff000f0, 0x01f000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_imm_add_pre", 0x0ff000f0, 0x01e000b0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_3_8_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrd", "ldrd_imm_add_pre", 0x0ff000f0, 0x01e000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_BASE_16_19, OK::IMM_0_3_8_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_imm_add_pre", 0x0ff000f0, 0x01e000f0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_3_8_11, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"ldrh", "ldrh_reg_add_pre", 0x0ff00ff0, 0x01b000b0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrsb", "ldrsb_reg_add_pre", 0x0ff00ff0, 0x01b000d0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldrsh", "ldrsh_reg_add_pre", 0x0ff00ff0, 0x01b000f0,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"strh", "strh_reg_add_pre", 0x0ff00ff0, 0x01a000b0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_0_3, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W2, SR_UPDATE::NONE
},
{"ldrd", "ldrd_reg_add_pre", 0x0ff00ff0, 0x01a000d0,
 4, {OK::PRED_28_31, OK::REG_PAIR_12_15, OK::REG_BASE_16_19, OK::REG_0_3},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"strd", "strd_reg_add_pre", 0x0ff00ff0, 0x01a000f0,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_0_3, OK::REG_PAIR_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W8, SR_UPDATE::NONE
},
{"and", "and_regreg", 0x0ff00090, 0x00000010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"and", "and_regimm", 0x0ff00010, 0x00000000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ands", "ands_regreg", 0x0ff00090, 0x00100010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"ands", "ands_regimm", 0x0ff00010, 0x00100000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"eor", "eor_regreg", 0x0ff00090, 0x00200010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"eor", "eor_regimm", 0x0ff00010, 0x00200000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"eors", "eors_regreg", 0x0ff00090, 0x00300010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"eors", "eors_regimm", 0x0ff00010, 0x00300000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"sub", "sub_regreg", 0x0ff00090, 0x00400010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sub", "sub_regimm", 0x0ff00010, 0x00400000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"subs", "subs_regreg", 0x0ff00090, 0x00500010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"subs", "subs_regimm", 0x0ff00010, 0x00500000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"rsb", "rsb_regreg", 0x0ff00090, 0x00600010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rsb", "rsb_regimm", 0x0ff00010, 0x00600000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rsbs", "rsbs_regreg", 0x0ff00090, 0x00700010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"rsbs", "rsbs_regimm", 0x0ff00010, 0x00700000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"add", "add_regreg", 0x0ff00090, 0x00800010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"add", "add_regimm", 0x0ff00010, 0x00800000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"adds", "adds_regreg", 0x0ff00090, 0x00900010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"adds", "adds_regimm", 0x0ff00010, 0x00900000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"adc", "adc_regreg", 0x0ff00090, 0x00a00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"adc", "adc_regimm", 0x0ff00010, 0x00a00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"adcs", "adcs_regreg", 0x0ff00090, 0x00b00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"adcs", "adcs_regimm", 0x0ff00010, 0x00b00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"sbc", "sbc_regreg", 0x0ff00090, 0x00c00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sbc", "sbc_regimm", 0x0ff00010, 0x00c00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sbcs", "sbcs_regreg", 0x0ff00090, 0x00d00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"sbcs", "sbcs_regimm", 0x0ff00010, 0x00d00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"rsc", "rsc_regreg", 0x0ff00090, 0x00e00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rsc", "rsc_regimm", 0x0ff00010, 0x00e00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rscs", "rscs_regreg", 0x0ff00090, 0x00f00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"rscs", "rscs_regimm", 0x0ff00010, 0x00f00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"orr", "orr_regreg", 0x0ff00090, 0x01800010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"orr", "orr_regimm", 0x0ff00010, 0x01800000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"orrs", "orrs_regreg", 0x0ff00090, 0x01900010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"orrs", "orrs_regimm", 0x0ff00010, 0x01900000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"bic", "bic_regreg", 0x0ff00090, 0x01c00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"bic", "bic_regimm", 0x0ff00010, 0x01c00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"bics", "bics_regreg", 0x0ff00090, 0x01d00010,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"bics", "bics_regimm", 0x0ff00010, 0x01d00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"swp", "swp", 0x0ff00ff0, 0x01000090,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::REG_BASE_16_19},
 ATOMIC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"swpb", "swpb", 0x0ff00ff0, 0x01400090,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3, OK::REG_BASE_16_19},
 ATOMIC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"bx", "bx", 0x0ffffff0, 0x012fff10,
 2, {OK::PRED_28_31, OK::REG_0_3},
 JUMP | THUMB, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"blx", "blx_reg", 0x0ffffff0, 0x012fff30,
 2, {OK::PRED_28_31, OK::REG_0_3},
 JUMP | LINK | THUMB, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"clz", "clz", 0x0fff0ff0, 0x016f0f10,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"tst", "tst_regreg", 0x0ff0f090, 0x01100010,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"tst", "tst_regimm", 0x0ff0f010, 0x01100000,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"teq", "teq_regreg", 0x0ff0f090, 0x01300010,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"teq", "teq_regimm", 0x0ff0f010, 0x01300000,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"cmp", "cmp_regreg", 0x0ff0f090, 0x01500010,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"cmp", "cmp_regimm", 0x0ff0f010, 0x01500000,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"cmn", "cmn_regreg", 0x0ff0f090, 0x01700010,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"cmn", "cmn_regimm", 0x0ff0f010, 0x01700000,
 5, {OK::PRED_28_31, OK::REG_16_19, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"mov", "mov_regreg", 0x0fff0090, 0x01a00010,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mov", "mov_regimm", 0x0fff0010, 0x01a00000,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"movs", "movs_regreg", 0x0fff0090, 0x01b00010,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"movs", "movs_regimm", 0x0fff0010, 0x01b00000,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"mvn", "mvn_regreg", 0x0fff0090, 0x01e00010,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mvn", "mvn_regimm", 0x0fff0010, 0x01e00000,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mvns", "mvns_regreg", 0x0fff0090, 0x01f00010,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::REG_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"mvns", "mvns_regimm", 0x0fff0010, 0x01f00000,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_5_6, OK::REG_0_3, OK::IMM_7_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
/* ============================================================*/
/* BLOCK 02000000 */
/* ============================================================*/
{"and", "and_imm", 0x0ff00000, 0x02000000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ands", "ands_imm", 0x0ff00000, 0x02100000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"eor", "eor_imm", 0x0ff00000, 0x02200000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"eors", "eors_imm", 0x0ff00000, 0x02300000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"sub", "sub_imm", 0x0ff00000, 0x02400000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"subs", "subs_imm", 0x0ff00000, 0x02500000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"rsb", "rsb_imm", 0x0ff00000, 0x02600000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rsbs", "rsbs_imm", 0x0ff00000, 0x02700000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"add", "add_imm", 0x0ff00000, 0x02800000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"adds", "adds_imm", 0x0ff00000, 0x02900000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"adc", "adc_imm", 0x0ff00000, 0x02a00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"adcs", "adcs_imm", 0x0ff00000, 0x02b00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"sbc", "sbc_imm", 0x0ff00000, 0x02c00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sbcs", "sbcs_imm", 0x0ff00000, 0x02d00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"rsc", "rsc_imm", 0x0ff00000, 0x02e00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rscs", "rscs_imm", 0x0ff00000, 0x02f00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"orr", "orr_imm", 0x0ff00000, 0x03800000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"orrs", "orrs_imm", 0x0ff00000, 0x03900000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"bic", "bic_imm", 0x0ff00000, 0x03c00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"bics", "bics_imm", 0x0ff00000, 0x03d00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::IMM_0_7_8_11},
 ALU, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"tst", "tst_imm", 0x0ff0f000, 0x03100000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_7_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"teq", "teq_imm", 0x0ff0f000, 0x03300000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_7_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"cmp", "cmp_imm", 0x0ff0f000, 0x03500000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_7_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"cmn", "cmn_imm", 0x0ff0f000, 0x03700000,
 3, {OK::PRED_28_31, OK::REG_16_19, OK::IMM_0_7_8_11},
 TEST, MEM_WIDTH::NA, SR_UPDATE::NCZ
},
{"mov", "mov_imm", 0x0fff0000, 0x03a00000,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::IMM_0_7_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"movs", "movs_imm", 0x0fff0000, 0x03b00000,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::IMM_0_7_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"mvn", "mvn_imm", 0x0fff0000, 0x03e00000,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::IMM_0_7_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"mvns", "mvns_imm", 0x0fff0000, 0x03f00000,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::IMM_0_7_8_11},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NCZ_PSR
},
{"movw", "movw", 0x0ff00000, 0x03000000,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::IMM_0_11_16_19},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"movt", "movt", 0x0ff00000, 0x03400000,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::IMM_0_11_16_19},
 ALU1, MEM_WIDTH::NA, SR_UPDATE::NONE
},
/* ============================================================*/
/* BLOCK 04000000 */
/* ============================================================*/
{"ldp", "ldp_imm_sub_post", 0xfff0f000, 0xf450f000,
 2, {OK::REG_BASE_16_19, OK::IMM_0_11},
 PREFETCH | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_imm_sub_post", 0x0ff00000, 0x04100000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_imm_sub_post", 0x0ff00000, 0x04000000,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_imm_sub_post", 0x0ff00000, 0x04500000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_imm_sub_post", 0x0ff00000, 0x04400000,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldp", "ldp_imm_add_post", 0xfff0f000, 0xf4d0f000,
 2, {OK::REG_BASE_16_19, OK::IMM_0_11},
 PREFETCH | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_imm_add_post", 0x0ff00000, 0x04900000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_imm_add_post", 0x0ff00000, 0x04800000,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_imm_add_post", 0x0ff00000, 0x04d00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_imm_add_post", 0x0ff00000, 0x04c00000,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldp", "ldp_imm_sub", 0xfff0f000, 0xf550f000,
 2, {OK::REG_BASE_16_19, OK::IMM_0_11},
 PREFETCH | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_imm_sub", 0x0ff00000, 0x05100000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_imm_sub", 0x0ff00000, 0x05000000,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_imm_sub", 0x0ff00000, 0x05500000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_imm_sub", 0x0ff00000, 0x05400000,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldp", "ldp_imm_add", 0xfff0f000, 0xf5d0f000,
 2, {OK::REG_BASE_16_19, OK::IMM_0_11},
 PREFETCH | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_imm_add", 0x0ff00000, 0x05900000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_imm_add", 0x0ff00000, 0x05800000,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_imm_add", 0x0ff00000, 0x05d00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_imm_add", 0x0ff00000, 0x05c00000,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldp", "ldp_imm_sub_pre", 0xfff0f000, 0xf570f000,
 2, {OK::REG_BASE_16_19, OK::IMM_0_11},
 PREFETCH | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_imm_sub_pre", 0x0ff00000, 0x05300000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_imm_sub_pre", 0x0ff00000, 0x05200000,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_imm_sub_pre", 0x0ff00000, 0x05700000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_imm_sub_pre", 0x0ff00000, 0x05600000,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldp", "ldp_imm_add_pre", 0xfff0f000, 0xf5f0f000,
 2, {OK::REG_BASE_16_19, OK::IMM_0_11},
 PREFETCH | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_imm_add_pre", 0x0ff00000, 0x05b00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_imm_add_pre", 0x0ff00000, 0x05a00000,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_imm_add_pre", 0x0ff00000, 0x05f00000,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::IMM_0_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_imm_add_pre", 0x0ff00000, 0x05e00000,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
/* ============================================================*/
/* BLOCK 06000000 */
/* ============================================================*/
{"sdiv", "sdiv", 0x0ff0f0f0, 0x0710f010,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 DIV, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"udiv", "udiv", 0x0ff0f0f0, 0x0730f010,
 4, {OK::PRED_28_31, OK::REG_16_19, OK::REG_0_3, OK::REG_8_11},
 DIV, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"uxtb", "uxtb", 0x0fff03f0, 0x06ef0070,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_ROT, OK::REG_0_3, OK::IMM_10_11},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sxtb", "sxtb", 0x0fff03f0, 0x06af0070,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_ROT, OK::REG_0_3, OK::IMM_10_11},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"uxtab", "uxtab", 0x0ff003f0, 0x06e00070,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_ROT, OK::REG_0_3, OK::IMM_10_11},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sxtab", "sxtab", 0x0ff003f0, 0x06a00070,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_ROT, OK::REG_0_3, OK::IMM_10_11},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"uxtb16", "uxtb16", 0x0fff03f0, 0x06cf0070,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_ROT, OK::REG_0_3, OK::IMM_10_11},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sxtb16", "sxtb16", 0x0fff03f0, 0x068f0070,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_ROT, OK::REG_0_3, OK::IMM_10_11},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"uxtab16", "uxtab16", 0x0ff003f0, 0x06c00070,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_ROT, OK::REG_0_3, OK::IMM_10_11},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sxtab16", "sxtab16", 0x0ff003f0, 0x06800070,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_ROT, OK::REG_0_3, OK::IMM_10_11},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"uxth", "uxth", 0x0fff03f0, 0x06ff0070,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_ROT, OK::REG_0_3, OK::IMM_10_11},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sxth", "sxth", 0x0fff03f0, 0x06bf0070,
 5, {OK::PRED_28_31, OK::REG_12_15, OK::SHIFT_MODE_ROT, OK::REG_0_3, OK::IMM_10_11},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"uxtah", "uxtah", 0x0ff003f0, 0x06f00070,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_ROT, OK::REG_0_3, OK::IMM_10_11},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"sxtah", "sxtah", 0x0ff003f0, 0x06b00070,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::SHIFT_MODE_ROT, OK::REG_0_3, OK::IMM_10_11},
 SIGNEXTEND, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rev", "rev", 0x0fff0ff0, 0x06bf0f30,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3},
 BYTEREORDER, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"rev16", "rev16", 0x0fff0ff0, 0x06bf0fb0,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::REG_0_3},
 BYTEREORDER, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldp", "ldp_reg_sub_post", 0xfff0f010, 0xf650f000,
 4, {OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 PREFETCH | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_reg_sub_post", 0x0ff00010, 0x06100000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_reg_sub_post", 0x0ff00010, 0x06000000,
 6, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_reg_sub_post", 0x0ff00010, 0x06500000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 LOAD | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_reg_sub_post", 0x0ff00010, 0x06400000,
 6, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldp", "ldp_reg_add_post", 0xfff0f010, 0xf6d0f000,
 4, {OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 PREFETCH | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_reg_add_post", 0x0ff00010, 0x06900000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_reg_add_post", 0x0ff00010, 0x06800000,
 6, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_reg_add_post", 0x0ff00010, 0x06d00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 LOAD | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_reg_add_post", 0x0ff00010, 0x06c00000,
 6, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldp", "ldp_reg_sub", 0xfff0f010, 0xf750f000,
 4, {OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 PREFETCH | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_reg_sub", 0x0ff00010, 0x07100000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_reg_sub", 0x0ff00010, 0x07000000,
 6, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_reg_sub", 0x0ff00010, 0x07500000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_reg_sub", 0x0ff00010, 0x07400000,
 6, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldp", "ldp_reg_add", 0xfff0f010, 0xf7d0f000,
 4, {OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 PREFETCH | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_reg_add", 0x0ff00010, 0x07900000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_reg_add", 0x0ff00010, 0x07800000,
 6, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_reg_add", 0x0ff00010, 0x07d00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_INC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_reg_add", 0x0ff00010, 0x07c00000,
 6, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldp", "ldp_reg_sub_pre", 0xfff0f010, 0xf770f000,
 4, {OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 PREFETCH | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_reg_sub_pre", 0x0ff00010, 0x07300000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_reg_sub_pre", 0x0ff00010, 0x07200000,
 6, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_reg_sub_pre", 0x0ff00010, 0x07700000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_reg_sub_pre", 0x0ff00010, 0x07600000,
 6, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ldp", "ldp_reg_add_pre", 0xfff0f010, 0xf7f0f000,
 4, {OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 PREFETCH | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldr", "ldr_reg_add_pre", 0x0ff00010, 0x07b00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"str", "str_reg_add_pre", 0x0ff00010, 0x07a00000,
 6, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W4, SR_UPDATE::NONE
},
{"ldrb", "ldrb_reg_add_pre", 0x0ff00010, 0x07f00000,
 6, {OK::PRED_28_31, OK::REG_12_15, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11},
 LOAD | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"strb", "strb_reg_add_pre", 0x0ff00010, 0x07e00000,
 6, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::SHIFT_MODE_5_6_ADDR, OK::REG_0_3, OK::IMM_7_11, OK::REG_12_15},
 STORE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::W1, SR_UPDATE::NONE
},
{"ud2", "ud2", 0x0fffffff, 0x07f000f0,
 1, {OK::PRED_28_31},
 MISC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
/* ============================================================*/
/* BLOCK 08000000 */
/* ============================================================*/
{"stmda", "stmda", 0x0ff00000, 0x08000000,
 3, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_POST | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmda", "ldmda", 0x0ff00000, 0x08100000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | ADDR_POST | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmia", "stmia", 0x0ff00000, 0x08800000,
 3, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_POST | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmia", "ldmia", 0x0ff00000, 0x08900000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | ADDR_POST | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmdb", "stmdb", 0x0ff00000, 0x09000000,
 3, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmdb", "ldmdb", 0x0ff00000, 0x09100000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmib", "stmib", 0x0ff00000, 0x09800000,
 3, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmib", "ldmib", 0x0ff00000, 0x09900000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmda", "stmda_update", 0x0ff00000, 0x08200000,
 3, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmda", "ldmda_update", 0x0ff00000, 0x08300000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmia", "stmia_update", 0x0ff00000, 0x08a00000,
 3, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmia", "ldmia_update", 0x0ff00000, 0x08b00000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmdb", "stmdb_update", 0x0ff00000, 0x09200000,
 3, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmdb", "ldmdb_update", 0x0ff00000, 0x09300000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"stmib", "stmib_update", 0x0ff00000, 0x09a00000,
 3, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REGLIST_0_15},
 STORE | MULTIPLE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"ldmib", "ldmib_update", 0x0ff00000, 0x09b00000,
 3, {OK::PRED_28_31, OK::REGLIST_0_15, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
/* ============================================================*/
/* BLOCK 0a000000 */
/* ============================================================*/
{"b", "b", 0x0f000000, 0x0a000000,
 2, {OK::PRED_28_31, OK::SIMM_0_23},
 JUMP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"bl", "bl", 0x0f000000, 0x0b000000,
 3, {OK::PRED_28_31, OK::REG_LINK, OK::SIMM_0_23},
 JUMP | LINK, MEM_WIDTH::NA, SR_UPDATE::NONE
},
/* ============================================================*/
/* BLOCK 0c000000 */
/* ============================================================*/
{"vldr", "vldr_f32_sub", 0x0fb00f00, 0x0d100a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::REG_BASE_16_19, OK::IMM_0_7_times4},
 LOAD | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldr", "vldr_f64_sub", 0x0fb00f00, 0x0d100b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::REG_BASE_16_19, OK::IMM_0_7_times4},
 LOAD | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstr", "vstr_f32_sub", 0x0fb00f00, 0x0d000a00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_7_times4, OK::SREG_12_15_22},
 STORE | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstr", "vstr_f64_sub", 0x0fb00f00, 0x0d000b00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_7_times4, OK::DREG_12_15_22},
 STORE | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldr", "vldr_f32_add", 0x0fb00f00, 0x0d900a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::REG_BASE_16_19, OK::IMM_0_7_times4},
 LOAD | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldr", "vldr_f64_add", 0x0fb00f00, 0x0d900b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::REG_BASE_16_19, OK::IMM_0_7_times4},
 LOAD | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstr", "vstr_f32_add", 0x0fb00f00, 0x0d800a00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_7_times4, OK::SREG_12_15_22},
 STORE | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstr", "vstr_f64_add", 0x0fb00f00, 0x0d800b00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::IMM_0_7_times4, OK::DREG_12_15_22},
 STORE | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmov", "vmov_atof", 0x0ff00fd0, 0x0c400b10,
 4, {OK::PRED_28_31, OK::DREG_0_3_5, OK::REG_12_15, OK::REG_16_19},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmov", "vmov_ftoa", 0x0ff00fd0, 0x0c500b10,
 4, {OK::PRED_28_31, OK::REG_12_15, OK::REG_16_19, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmda", "vldmda_s", 0x0fb00f00, 0x0c100a00,
 4, {OK::PRED_28_31, OK::REG_RANGE_0_7, OK::SREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmda", "vldmda_f", 0x0fb00f01, 0x0c100b00,
 4, {OK::PRED_28_31, OK::REG_RANGE_1_7, OK::DREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmda", "vstmda_s", 0x0fb00f00, 0x0c000a00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_0_7, OK::SREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmda", "vstmda_f", 0x0fb00f01, 0x0c000b00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_1_7, OK::DREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmia", "vldmia_s", 0x0fb00f00, 0x0c900a00,
 4, {OK::PRED_28_31, OK::REG_RANGE_0_7, OK::SREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmia", "vldmia_f", 0x0fb00f01, 0x0c900b00,
 4, {OK::PRED_28_31, OK::REG_RANGE_1_7, OK::DREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmia", "vstmia_s", 0x0fb00f00, 0x0c800a00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_0_7, OK::SREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmia", "vstmia_f", 0x0fb00f01, 0x0c800b00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_1_7, OK::DREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmdb", "vldmdb_s", 0x0fb00f00, 0x0d100a00,
 4, {OK::PRED_28_31, OK::REG_RANGE_0_7, OK::SREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmdb", "vldmdb_f", 0x0fb00f01, 0x0d100b00,
 4, {OK::PRED_28_31, OK::REG_RANGE_1_7, OK::DREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmdb", "vstmdb_s", 0x0fb00f00, 0x0d000a00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_0_7, OK::SREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmdb", "vstmdb_f", 0x0fb00f01, 0x0d000b00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_1_7, OK::DREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmib", "vldmib_s", 0x0fb00f00, 0x0d900a00,
 4, {OK::PRED_28_31, OK::REG_RANGE_0_7, OK::SREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmib", "vldmib_f", 0x0fb00f01, 0x0d900b00,
 4, {OK::PRED_28_31, OK::REG_RANGE_1_7, OK::DREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmib", "vstmib_s", 0x0fb00f00, 0x0d800a00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_0_7, OK::SREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmib", "vstmib_f", 0x0fb00f01, 0x0d800b00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_1_7, OK::DREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_INC, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmda", "vldmda_s_update", 0x0fb00f00, 0x0c300a00,
 4, {OK::PRED_28_31, OK::REG_RANGE_0_7, OK::SREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmda", "vldmda_f_update", 0x0fb00f01, 0x0c300b00,
 4, {OK::PRED_28_31, OK::REG_RANGE_1_7, OK::DREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmda", "vstmda_s_update", 0x0fb00f00, 0x0c200a00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_0_7, OK::SREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmda", "vstmda_f_update", 0x0fb00f01, 0x0c200b00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_1_7, OK::DREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmia", "vldmia_s_update", 0x0fb00f00, 0x0cb00a00,
 4, {OK::PRED_28_31, OK::REG_RANGE_0_7, OK::SREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmia", "vldmia_f_update", 0x0fb00f01, 0x0cb00b00,
 4, {OK::PRED_28_31, OK::REG_RANGE_1_7, OK::DREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmia", "vstmia_s_update", 0x0fb00f00, 0x0ca00a00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_0_7, OK::SREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmia", "vstmia_f_update", 0x0fb00f01, 0x0ca00b00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_1_7, OK::DREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_POST | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmdb", "vldmdb_s_update", 0x0fb00f00, 0x0d300a00,
 4, {OK::PRED_28_31, OK::REG_RANGE_0_7, OK::SREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmdb", "vldmdb_f_update", 0x0fb00f01, 0x0d300b00,
 4, {OK::PRED_28_31, OK::REG_RANGE_1_7, OK::DREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmdb", "vstmdb_s_update", 0x0fb00f00, 0x0d200a00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_0_7, OK::SREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmdb", "vstmdb_f_update", 0x0fb00f01, 0x0d200b00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_1_7, OK::DREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_DEC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmib", "vldmib_s_update", 0x0fb00f00, 0x0db00a00,
 4, {OK::PRED_28_31, OK::REG_RANGE_0_7, OK::SREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vldmib", "vldmib_f_update", 0x0fb00f01, 0x0db00b00,
 4, {OK::PRED_28_31, OK::REG_RANGE_1_7, OK::DREG_12_15_22, OK::REG_BASE_16_19},
 LOAD | MULTIPLE | VFP | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmib", "vstmib_s_update", 0x0fb00f00, 0x0da00a00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_0_7, OK::SREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vstmib", "vstmib_f_update", 0x0fb00f01, 0x0da00b00,
 4, {OK::PRED_28_31, OK::REG_BASE_16_19, OK::REG_RANGE_1_7, OK::DREG_12_15_22},
 STORE | MULTIPLE | VFP | ADDR_PRE | ADDR_INC | ADDR_UPDATE, MEM_WIDTH::NA, SR_UPDATE::NONE
},
/* ============================================================*/
/* BLOCK 0e000000 */
/* ============================================================*/
{"svc", "svc", 0x0f000000, 0x0f000000,
 2, {OK::PRED_28_31, OK::IMM_0_23},
 SYSCALL, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmov", "vmov_atos", 0x0ff00f7f, 0x0e000a10,
 3, {OK::PRED_28_31, OK::SREG_16_19_7, OK::REG_12_15},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmov", "vmov_stoa", 0x0ff00f7f, 0x0e100a10,
 3, {OK::PRED_28_31, OK::REG_12_15, OK::SREG_16_19_7},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.f32.f64", "vcvt_f32_f64", 0x0fbf0fd0, 0x0eb70bc0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.f64.f32", "vcvt_f64_f32", 0x0fbf0fd0, 0x0eb70ac0,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.s32.f64", "vcvt_s32_f64", 0x0fbf0fd0, 0x0ebd0bc0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.s32.f32", "vcvt_s32_f32", 0x0fbf0fd0, 0x0ebd0ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.u32.f64", "vcvt_u32_f64", 0x0fbf0fd0, 0x0ebc0bc0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.u32.f32", "vcvt_u32_f32", 0x0fbf0fd0, 0x0ebc0ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.f64.s32", "vcvt_f64_s32", 0x0fbf0fd0, 0x0eb80bc0,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.f32.s32", "vcvt_f32_s32", 0x0fbf0fd0, 0x0eb80ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.f64.u32", "vcvt_f64_u32", 0x0fbf0fd0, 0x0eb80b40,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcvt.f32.u32", "vcvt_f32_u32", 0x0fbf0fd0, 0x0eb80a40,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmp.f32", "vcmp_f32", 0x0fbf0fd0, 0x0eb40a40,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmp.f64", "vcmp_f64", 0x0fbf0fd0, 0x0eb40b40,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmp.f32", "vcmp_f32_zero", 0x0fbf0fff, 0x0eb50a40,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::IMM_ZERO},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmp.f64", "vcmp_f64_zero", 0x0fbf0fff, 0x0eb50b40,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::IMM_ZERO},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmpe.f32", "vcmpe_f32", 0x0fbf0fd0, 0x0eb40ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmpe.f64", "vcmpe_f64", 0x0fbf0fd0, 0x0eb40bc0,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmpe.f32", "vcmpe_f32_zero", 0x0fbf0fff, 0x0eb50ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::IMM_ZERO},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vcmpe.f64", "vcmpe_f64_zero", 0x0fbf0fff, 0x0eb50bc0,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::IMM_ZERO},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vabs.f32", "vabs_f32", 0x0fbf0fd0, 0x0eb00ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vabs.f64", "vabs_f64", 0x0fbf0fd0, 0x0eb00bc0,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmov.f32", "vmov_f32", 0x0fbf0fd0, 0x0eb00a40,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmov.f64", "vmov_f64", 0x0fbf0fd0, 0x0eb00b40,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vsqrt.f32", "vsqrt_f32", 0x0fbf0fd0, 0x0eb10ac0,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vsqrt.f64", "vsqrt_f64", 0x0fbf0fd0, 0x0eb10bc0,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vneg.f32", "vneg_f32", 0x0fbf0fd0, 0x0eb10a40,
 3, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vneg.f64", "vneg_f64", 0x0fbf0fd0, 0x0eb10b40,
 3, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vdiv.f32", "vdiv_f32", 0x0fb00f50, 0x0e800a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vdiv.f64", "vdiv_f64", 0x0fb00f50, 0x0e800b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmul.f32", "vmul_f32", 0x0fb00f50, 0x0e200a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmul.f64", "vmul_f64", 0x0fb00f50, 0x0e200b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vadd.f32", "vadd_f32", 0x0fb00f50, 0x0e300a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vadd.f64", "vadd_f64", 0x0fb00f50, 0x0e300b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vsub.f32", "vsub_f32", 0x0fb00f50, 0x0e300a40,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vsub.f64", "vsub_f64", 0x0fb00f50, 0x0e300b40,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vnmul.f32", "vnmul_f32", 0x0fb00f50, 0x0e200a40,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vnmul.f64", "vnmul_f64", 0x0fb00f50, 0x0e200b40,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vnmls.f32", "vnmls_f32", 0x0fb00f50, 0x0e100a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vnmls.f64", "vnmls_f64", 0x0fb00f50, 0x0e100b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vnmla.f32", "vnmla_f32", 0x0fb00f50, 0x0e100a40,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vnmla.f64", "vnmla_f64", 0x0fb00f50, 0x0e100b40,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmls.f32", "vmls_f32", 0x0fb00f50, 0x0e000a40,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmls.f64", "vmls_f64", 0x0fb00f50, 0x0e000b40,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmla.f32", "vmla_f32", 0x0fb00f50, 0x0e000a00,
 4, {OK::PRED_28_31, OK::SREG_12_15_22, OK::SREG_16_19_7, OK::SREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmla.f64", "vmla_f64", 0x0fb00f50, 0x0e000b00,
 4, {OK::PRED_28_31, OK::DREG_12_15_22, OK::DREG_16_19_7, OK::DREG_0_3_5},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NONE
},
{"vmrs", "vmrs_APSR_nzcv_fpscr", 0x0fffffff, 0x0ef1fa10,
 1, {OK::PRED_28_31},
 VFP, MEM_WIDTH::NA, SR_UPDATE::NCZV
},
};

const int16_t OpcodeTableJumper[] = {
1, 156,
157, 186,
187, 216,
217, 263,
264, 279,
280, 281,
282, 323,
324, 371
};

// Indexed by FieldKind
static const Field FieldTable[] = {
{   // Invalid = 0
    0, {
}}, 
{   // REG_0_3 = 1
    1, {
    {BitRangeKind::Verbatim, 4, 0},
}}, 
{   // REG_8_11 = 2
    1, {
    {BitRangeKind::Verbatim, 4, 8},
}}, 
{   // REG_12_15 = 3
    1, {
    {BitRangeKind::Verbatim, 4, 12},
}}, 
{   // REG_16_19 = 4
    1, {
    {BitRangeKind::Verbatim, 4, 16},
}}, 
{   // REG_LINK = 5
    1, {
    {BitRangeKind::Force14, 0, 0},
}}, 
{   // REG_PAIR_12_15 = 6
    1, {
    {BitRangeKind::Verbatim, 4, 12},
}}, 
{   // DREG_0_3_5 = 7
    2, {
    {BitRangeKind::Hi, 1, 5},
    {BitRangeKind::Lo, 4, 0},
}}, 
{   // DREG_12_15_22 = 8
    2, {
    {BitRangeKind::Hi, 1, 22},
    {BitRangeKind::Lo, 4, 12},
}}, 
{   // DREG_16_19_7 = 9
    2, {
    {BitRangeKind::Hi, 1, 7},
    {BitRangeKind::Lo, 4, 16},
}}, 
{   // SREG_0_3_5 = 10
    2, {
    {BitRangeKind::Hi, 4, 0},
    {BitRangeKind::Lo, 1, 5},
}}, 
{   // SREG_12_15_22 = 11
    2, {
    {BitRangeKind::Hi, 4, 12},
    {BitRangeKind::Lo, 1, 22},
}}, 
{   // SREG_16_19_7 = 12
    2, {
    {BitRangeKind::Hi, 4, 16},
    {BitRangeKind::Lo, 1, 7},
}}, 
{   // SHIFT_MODE_5_6 = 13
    1, {
    {BitRangeKind::Verbatim, 2, 5},
}}, 
{   // SHIFT_MODE_5_6_ADDR = 14
    1, {
    {BitRangeKind::Verbatim, 2, 5},
}}, 
{   // SHIFT_MODE_ROT = 15
    1, {
    {BitRangeKind::Force3, 0, 0},
}}, 
{   // REGLIST_0_15 = 16
    1, {
    {BitRangeKind::Verbatim, 16, 0},
}}, 
{   // REG_RANGE_0_7 = 17
    1, {
    {BitRangeKind::Verbatim, 8, 0},
}}, 
{   // REG_RANGE_1_7 = 18
    1, {
    {BitRangeKind::Verbatim, 7, 1},
}}, 
{   // REG_BASE_16_19 = 19
    1, {
    {BitRangeKind::Verbatim, 4, 16},
}}, 
{   // PRED_28_31 = 20
    1, {
    {BitRangeKind::Verbatim, 4, 28},
}}, 
{   // IMM_0_7_times4 = 21
    1, {
    {BitRangeKind::Times4, 8, 0},
}}, 
{   // IMM_0_11 = 22
    1, {
    {BitRangeKind::Verbatim, 12, 0},
}}, 
{   // IMM_0_3_8_11 = 23
    2, {
    {BitRangeKind::Hi, 4, 8},
    {BitRangeKind::Lo, 4, 0},
}}, 
{   // IMM_7_11 = 24
    1, {
    {BitRangeKind::Verbatim, 5, 7},
}}, 
{   // IMM_10_11 = 25
    1, {
    {BitRangeKind::Times8, 2, 10},
}}, 
{   // IMM_0_23 = 26
    1, {
    {BitRangeKind::Verbatim, 24, 0},
}}, 
{   // IMM_0_7_8_11 = 27
    1, {
    {BitRangeKind::Rotated, 12, 0},
}}, 
{   // IMM_ZERO = 28
    1, {
    {BitRangeKind::Force0, 0, 0},
}}, 
{   // IMM_0_11_16_19 = 29
    2, {
    {BitRangeKind::Hi, 4, 16},
    {BitRangeKind::Lo, 12, 0},
}}, 
{   // SIMM_0_23 = 30
    1, {
    {BitRangeKind::Signed, 24, 0},
}}, 
};

// Indexed by djb2 hash of mnemonic. Collisions are resolved via linear probing
static const OPC MnemonicHashTable[512] = {
   OPC::tst_regimm, OPC::invalid, OPC::subs_regimm, OPC::adcs_imm,
   OPC::subs_imm, OPC::vcmp_f32, OPC::vcmp_f32_zero, OPC::b,
   OPC::rsc_regreg, OPC::blx_reg, OPC::vldmia_f, OPC::invalid,
   OPC::ldmia, OPC::ldmib, OPC::ldmia_update, OPC::vstr_f64_sub,
   OPC::vcvt_f64_u32, OPC::vsub_f32, OPC::ldr_reg_sub_post, OPC::mul,
   OPC::vldmia_s, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::sbc_regreg, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::swpb, OPC::ldrsb_reg_sub, OPC::vldmda_f,
   OPC::invalid, OPC::smulls, OPC::bics_regimm, OPC::cmp_imm,
   OPC::ldrsh_reg_sub, OPC::invalid, OPC::invalid, OPC::ldrsb_imm_add_post,
   OPC::ldp_reg_sub, OPC::ands_imm, OPC::rsb_imm, OPC::uxtb16,
   OPC::sxtab16, OPC::sub_imm, OPC::ldrsh_imm_add_pre, OPC::ldr_reg_sub,
   OPC::ldr_reg_sub_pre, OPC::strb_imm_add_pre, OPC::ldrd_reg_add_pre, OPC::vsqrt_f32,
   OPC::vldmda_s, OPC::vldmib_s_update, OPC::ldrh_reg_add_pre, OPC::ldrd_imm_sub_post,
   OPC::ldrb_imm_sub_pre, OPC::vmov_f64, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::adds_regimm, OPC::rscs_imm, OPC::str_reg_add,
   OPC::vcvt_f64_f32, OPC::vstmib_f_update, OPC::invalid, OPC::invalid,
   OPC::vldmib_f, OPC::str_imm_sub, OPC::sub_regreg, OPC::vcmpe_f32,
   OPC::vstmda_s_update, OPC::orrs_imm, OPC::str_imm_add_post, OPC::str_imm_sub_pre,
   OPC::vldr_f32_sub, OPC::invalid, OPC::strd_imm_sub_post, OPC::sbcs_imm,
   OPC::invalid, OPC::bic_imm, OPC::vldmib_s, OPC::invalid,
   OPC::mvn_imm, OPC::rev16, OPC::ldrh_reg_sub_post, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::vmov_stoa,
   OPC::vldmdb_f, OPC::strb_reg_add, OPC::vstr_f32_add, OPC::strd_reg_add,
   OPC::invalid, OPC::invalid, OPC::vcmp_f64, OPC::strh_reg_add,
   OPC::strb_imm_sub, OPC::strd_imm_sub, OPC::ldrsb_imm_sub_pre, OPC::ldrsh_reg_add_pre,
   OPC::adc_imm, OPC::strh_reg_sub_post, OPC::strh_imm_sub, OPC::strd_imm_sub_pre,
   OPC::umull, OPC::ldrd_reg_add_post, OPC::clz, OPC::strh_imm_sub_pre,
   OPC::teq_imm, OPC::ldr_imm_sub_post, OPC::ldrb_reg_sub_pre, OPC::strex,
   OPC::adcs_regreg, OPC::sdiv, OPC::strb_reg_add_pre, OPC::rsbs_regimm,
   OPC::cmp_regreg, OPC::vldr_f64_add, OPC::vsub_f64, OPC::vnmls_f32,
   OPC::vmls_f32, OPC::vldmdb_s, OPC::eor_regreg, OPC::vldmdb_f_update,
   OPC::invalid, OPC::invalid, OPC::teq_regreg, OPC::str_reg_sub_pre,
   OPC::strd_reg_add_post, OPC::adc_regimm, OPC::vstmia_s_update, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::vmul_f32,
   OPC::ldrb_reg_sub_post, OPC::vsqrt_f64, OPC::smlabb, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::vnmul_f32, OPC::invalid, OPC::adds_imm,
   OPC::invalid, OPC::invalid, OPC::ldrsb_imm_add, OPC::stmib_update,
   OPC::smlabt, OPC::ldrsb_reg_sub_pre, OPC::add_regreg, OPC::bics_imm,
   OPC::ldrsh_imm_add, OPC::movt, OPC::strd_reg_sub_pre, OPC::rsc_imm,
   OPC::ldrd_reg_add, OPC::movw, OPC::strh_reg_sub_pre, OPC::and_regreg,
   OPC::ldrh_reg_add, OPC::bic_regimm, OPC::ldrd_imm_sub, OPC::strb_reg_sub_post,
   OPC::ldr_reg_add_post, OPC::ldrb_imm_sub, OPC::ldrh_imm_sub, OPC::rscs_regreg,
   OPC::ldrb_reg_add, OPC::ldp_imm_add, OPC::cmn_regreg, OPC::ldrh_imm_sub_post,
   OPC::umlal, OPC::sbc_imm, OPC::tst_imm, OPC::ldr_imm_add,
   OPC::ldr_imm_add_pre, OPC::stmda_update, OPC::ands_regreg, OPC::vcvt_u32_f32,
   OPC::vcvt_f32_s32, OPC::vcmpe_f64, OPC::smulbb, OPC::sbcs_regreg,
   OPC::movs_imm, OPC::rsc_regimm, OPC::vneg_f32, OPC::vadd_f32,
   OPC::ldp_reg_sub_post, OPC::vldmda_s_update, OPC::vldmib_f_update, OPC::orr_regreg,
   OPC::invalid, OPC::invalid, OPC::strh_imm_sub_post, OPC::vmls_f64,
   OPC::invalid, OPC::invalid, OPC::ldrd_imm_add_post, OPC::vstmda_f_update,
   OPC::smulbt, OPC::sbc_regimm, OPC::invalid, OPC::mla,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::ldrex, OPC::mvns_regreg, OPC::muls, OPC::orrs_regreg,
   OPC::smlatb, OPC::sxtb, OPC::uxtab, OPC::vnmls_f64,
   OPC::sxth, OPC::ldrsh_reg_sub_post, OPC::sxtb16, OPC::uxtah,
   OPC::add_imm, OPC::mls, OPC::strd_imm_add_post, OPC::ldr_reg_add_pre,
   OPC::ldmib_update, OPC::vcmpe_f64_zero, OPC::ldp_imm_sub_pre, OPC::invalid,
   OPC::vmul_f64, OPC::ldrh_reg_add_post, OPC::smlatt, OPC::eors_regreg,
   OPC::ldrb_imm_sub_post, OPC::ldrb_imm_add_pre, OPC::stmda, OPC::stmdb,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::str_reg_sub, OPC::movs_regreg, OPC::vnmul_f64, OPC::invalid,
   OPC::invalid, OPC::ldmda_update, OPC::invalid, OPC::mvns_imm,
   OPC::invalid, OPC::invalid, OPC::str_imm_add_pre, OPC::sub_regimm,
   OPC::strh_reg_add_post, OPC::mvn_regreg, OPC::mov_regreg, OPC::strb_imm_sub_post,
   OPC::vcvt_u32_f64, OPC::invalid, OPC::ldr_imm_add_post, OPC::vldmia_s_update,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::vabs_f32,
   OPC::smultb, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::vstmia_f_update, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::vneg_f64, OPC::cmn_imm, OPC::strb_reg_sub, OPC::ldrsb_reg_sub_post,
   OPC::strd_reg_sub, OPC::rsb_regreg, OPC::vstr_f32_sub, OPC::vcvt_s32_f32,
   OPC::strh_reg_sub, OPC::ldrsb_imm_add_pre, OPC::smultt, OPC::vcvt_f32_u32,
   OPC::invalid, OPC::ldp_reg_sub_pre, OPC::mlas, OPC::umlals,
   OPC::strd_imm_add_pre, OPC::ldp_imm_sub_post, OPC::strh_imm_add_pre, OPC::ldrb_reg_add_post,
   OPC::ldrb_reg_add_pre, OPC::vldr_f64_sub, OPC::and_imm, OPC::tst_regreg,
   OPC::ldrd_imm_sub_pre, OPC::subs_regreg, OPC::udiv, OPC::vadd_f64,
   OPC::ldrh_imm_sub_pre, OPC::eors_imm, OPC::adcs_regimm, OPC::invalid,
   OPC::invalid, OPC::cmp_regimm, OPC::invalid, OPC::invalid,
   OPC::vdiv_f32, OPC::str_reg_sub_post, OPC::strb_reg_add_post, OPC::eor_regimm,
   OPC::str_reg_add_pre, OPC::vstr_f64_add, OPC::invalid, OPC::teq_regimm,
   OPC::invalid, OPC::invalid, OPC::ldrsh_imm_sub_post, OPC::rev,
   OPC::bl, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::orr_imm, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::ldrh_imm_add_post, OPC::bx,
   OPC::vmla_f32, OPC::ldrsb_reg_add, OPC::bics_regreg, OPC::vstmia_f,
   OPC::vldmda_f_update, OPC::invalid, OPC::invalid, OPC::umulls,
   OPC::ldrsb_imm_sub, OPC::ldrsh_reg_add, OPC::ldrsb_reg_add_pre, OPC::ldp_reg_add,
   OPC::ldr_reg_add, OPC::ldrsh_imm_sub, OPC::strd_reg_add_pre, OPC::add_regimm,
   OPC::ldp_reg_add_post, OPC::ldrd_reg_sub, OPC::smull, OPC::ldrsh_imm_sub_pre,
   OPC::strh_reg_add_pre, OPC::strh_imm_add_post, OPC::ldrh_reg_sub, OPC::ldrd_reg_sub_pre,
   OPC::and_regimm, OPC::ldrb_reg_sub, OPC::ldp_imm_sub, OPC::ldrh_reg_sub_pre,
   OPC::adds_regreg, OPC::ldr_imm_sub, OPC::strb_imm_sub_pre, OPC::ldmda,
   OPC::rscs_regimm, OPC::ldmdb, OPC::vmov_ftoa, OPC::cmn_regimm,
   OPC::vcmpe_f32_zero, OPC::vabs_f64, OPC::vnmla_f32, OPC::vstmda_s,
   OPC::str_imm_add, OPC::vcmp_f64_zero, OPC::vstmda_f, OPC::ands_regimm,
   OPC::ldrsb_imm_sub_post, OPC::ldrsh_reg_add_post, OPC::vcvt_s32_f64, OPC::vldr_f32_add,
   OPC::sbcs_regimm, OPC::vcvt_f64_s32, OPC::vstmia_s, OPC::vstmdb_s_update,
   OPC::vmrs_APSR_nzcv_fpscr, OPC::invalid, OPC::vmov_atof, OPC::invalid,
   OPC::orr_regimm, OPC::ldrb_imm_add_post, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::vstmib_f,
   OPC::invalid, OPC::rsbs_imm, OPC::stmdb_update, OPC::stmia,
   OPC::stmib, OPC::vmov_atos, OPC::invalid, OPC::invalid,
   OPC::uxtb, OPC::mvns_regimm, OPC::strb_imm_add, OPC::orrs_regimm,
   OPC::strd_imm_add, OPC::strb_reg_sub_pre, OPC::ldrsh_reg_sub_pre, OPC::uxth,
   OPC::strh_imm_add, OPC::uxtab16, OPC::str_imm_sub_post, OPC::strb_imm_add_post,
   OPC::ud2, OPC::ldp_imm_add_pre, OPC::svc, OPC::vdiv_f64,
   OPC::vstmib_s, OPC::vldmia_f_update, OPC::rsbs_regreg, OPC::vstmdb_f,
   OPC::vstmib_s_update, OPC::invalid, OPC::smlal, OPC::eors_regimm,
   OPC::invalid, OPC::vcvt_f32_f64, OPC::invalid, OPC::invalid,
   OPC::vmla_f64, OPC::stmia_update, OPC::ldrsb_reg_add_post, OPC::vstmdb_s,
   OPC::adc_regreg, OPC::invalid, OPC::movs_regimm, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::vnmla_f64, OPC::invalid,
   OPC::ldp_imm_add_post, OPC::invalid, OPC::ldrd_reg_sub_post, OPC::mov_regimm,
   OPC::mvn_regimm, OPC::vmov_f32, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::swp,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::invalid,
   OPC::invalid, OPC::invalid, OPC::invalid, OPC::sxtab,
   OPC::str_reg_add_post, OPC::invalid, OPC::ldmdb_update, OPC::invalid,
   OPC::rsb_regimm, OPC::strd_reg_sub_post, OPC::eor_imm, OPC::bic_regreg,
   OPC::sxtah, OPC::smlals, OPC::ldrsh_imm_add_post, OPC::ldrb_imm_add,
   OPC::ldp_reg_add_pre, OPC::ldrd_imm_add, OPC::vldmdb_s_update, OPC::invalid,
   OPC::ldr_imm_sub_pre, OPC::ldrh_imm_add, OPC::mov_imm, OPC::ldrd_imm_add_pre,
   OPC::vstmdb_f_update, OPC::invalid, OPC::invalid, OPC::ldrh_imm_add_pre,
};


const char* const PRED_ToStringMap[] = {
    "eq", // 0
    "ne", // 1
    "cs", // 2
    "cc", // 3
    "mi", // 4
    "pl", // 5
    "vs", // 6
    "vc", // 7
    "hi", // 8
    "ls", // 9
    "ge", // 10
    "lt", // 11
    "gt", // 12
    "le", // 13
    "al", // 14
    "invalid_pred", // 15
};

template<>  // template specialization for PRED
const char* EnumToString<PRED>(PRED x) { return PRED_ToStringMap[unsigned(x)]; }


const char* const SHIFT_ToStringMap[] = {
    "lsl", // 0
    "lsr", // 1
    "asr", // 2
    "ror_rrx", // 3
};

template<>  // template specialization for SHIFT
const char* EnumToString<SHIFT>(SHIFT x) { return SHIFT_ToStringMap[unsigned(x)]; }

/* @AUTOGEN-END@ */

const Opcode* FindArmOpcode(uint32_t bit_value) {
  uint32_t discriminant = (bit_value & 0x0e000000) >> 25;
  const int start = OpcodeTableJumper[2 * discriminant];
  const int end = OpcodeTableJumper[2 * discriminant + 1];
  if (start >= 0) {
    for (int i = start; i <= end; ++i) {
      const struct Opcode* opc = &OpcodeTable[i];
      if ((opc->bit_mask & bit_value) == opc->bit_value) {
        return opc;
      }
    }
  }
  return nullptr;
}

uint32_t DecodeRotatedImm(uint32_t data) {
  uint32_t x = data & 0xff;
  uint32_t rot = (data & 0xf00) >> 7;
  uint32_t mask = (1 << rot) - 1;
  return (x >> rot) | ((x & mask) << (32 - rot));
}

// Inverse of DecodeRotatedImm()
// returns -1 in case of failure
int32_t EncodeRotatedImm(int32_t immediate) {
  uint32_t x = immediate;
  for (int r = 0; r < 16; ++r) {
    if ((x & 0xff) == x) {
      return (r << 8) | x;
    }
    // rotate left by 2
    x = (x << 2) | (x >> 30);
  }
  return -1;
}

int32_t DecodeOperand(uint32_t data, OK field_kind) {
  const BitRange* bit_ranges = FieldTable[uint8_t(field_kind)].bit_ranges;

  int32_t hi = 0;
  for (unsigned i = 0; i < FieldTable[uint8_t(field_kind)].num_bit_ranges;
       ++i) {
    const BitRange* range = bit_ranges + i;
    uint32_t mask = (1 << range->width) - 1;
    uint32_t x = (data >> range->position) & mask;
    switch (range->modifier) {
      case BitRangeKind::Verbatim:
        return x;
      case BitRangeKind::Times8:
        return x << 3;
      case BitRangeKind::Times4:
        return x << 2;
      case BitRangeKind::Times2:
        return x << 1;
      case BitRangeKind::Force0:
        return 0;
      case BitRangeKind::Force1:
        return 1;
      case BitRangeKind::Force3:
        return 3;
      case BitRangeKind::Force6:
        return 6;
      case BitRangeKind::Force14:
        return 14;
      case BitRangeKind::Hi:  // hi must directly precede lo
        hi = x;
        continue;  // SKIP
      case BitRangeKind::Lo:
        return x | hi << range->width;
      case BitRangeKind::Rotated:
        return DecodeRotatedImm(x);
      case BitRangeKind::Signed: {
        uint32_t mask2 = mask >> 1;
        if ((x & mask2) != x) {  // hi bit set
          x -= 1 << range->width;
        }
        return x;
      }
    }
  }
  ASSERT(false, "unreachable");
  return 0;
}

void EncodeOperand(int32_t x,
                   const struct Field* field,
                   uint32_t* bits_value,
                   uint32_t* bits_mask) {
  const BitRange* bit_ranges = field->bit_ranges;
  int32_t hi = 0;
  // backwards is important
  for (int i = field->num_bit_ranges - 1; i >= 0; --i) {
    const BitRange* range = bit_ranges + i;
    const uint32_t mask = (1 << range->width) - 1;
    switch (range->modifier) {
      case BitRangeKind::Verbatim:
        // assert (0);
        break;
      case BitRangeKind::Times8:
        ASSERT((x & 7) == 0, "");
        x >>= 3;
        break;
      case BitRangeKind::Times4:
        ASSERT((x & 3) == 0, "");
        x >>= 2;
        break;
      case BitRangeKind::Times2:
        ASSERT((x & 1) == 0, "");
        x >>= 1;
        break;
      case BitRangeKind::Force0:
        ASSERT(x == 0, "");
        continue;
      case BitRangeKind::Force1:
        ASSERT(x == 1, "");
        continue;
      case BitRangeKind::Force3:
        ASSERT(x == 3, "");
        continue;
      case BitRangeKind::Force6:
        ASSERT(x == 6, "");
        continue;
      case BitRangeKind::Force14:
        ASSERT(x == 14, "");
        continue;
      case BitRangeKind::Hi:  // hi will process directly after low (reverse for loop)
        x = hi;
        break;
      case BitRangeKind::Lo:
        hi = x >> range->width;
        x &= mask;
        break;
      case BitRangeKind::Rotated:
        x = EncodeRotatedImm(x);
        ASSERT((x & 0xfff) == x, "");
        break;
      case BitRangeKind::Signed: {
        if (x >= 0) {
          ASSERT((x & int32_t(mask >> 1)) == x, "bad val " << x);
        } else {
          ASSERT((x | int32_t(mask >> 1)) == ~0, "");
        }
        x &= mask;
        break;
      }
    }
    ASSERT((int32_t(mask) & x) == x, "bad value - did you forget the pred");
    ASSERT(((mask << range->position) & *bits_mask) == 0, "");
    *bits_mask |= mask << range->position;
    *bits_value |= x << range->position;
  }
}

bool DecodeIns(Ins* ins, uint32_t data) {
  const struct Opcode* opcode = FindArmOpcode(data);
  if (opcode == nullptr) return false;

  ins->opcode = opcode;
  for (unsigned i = 0; i < opcode->num_fields; ++i) {
    ins->operands[i] = DecodeOperand(data, opcode->fields[i]);
  }
  return true;
}

uint32_t EncodeIns(const Ins& ins) {
  const Opcode* opcode = ins.opcode;
  uint32_t value = opcode->bit_value;
  uint32_t mask = opcode->bit_mask;
  for (unsigned i = 0; i < opcode->num_fields; ++i) {
    const OK kind = ins.opcode->fields[i];
    ASSERT(kind != OK::Invalid, "");
    EncodeOperand(ins.operands[i], &FieldTable[uint8_t(kind)], &value,
                  &mask);
  }
  ASSERT(mask == 0xffffffff, "problems encoding " << opcode->name);
  return value;
}

const Opcode* FindArmOpcodeForMnemonic(std::string_view s) {
  uint32_t h = 5381;
  for (uint8_t c : s) {
    h = (h << 5) + h + c;
  }
  h &= 0xffff;

  for (uint32_t d = 0; d < 512; ++d) {
    OPC opc = MnemonicHashTable[(h + d) % 512];
    if (opc == OPC::invalid) return nullptr;
    auto* opcode = &OpcodeTable[uint32_t(opc)];
    if (opcode->enum_name == s) return opcode;
  }
  return nullptr;
}

}  // namespace cwerg::a32
