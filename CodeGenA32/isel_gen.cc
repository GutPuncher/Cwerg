// NOTE: this file is PARTIALLY autogenerated via: ./isel_tab.py gen_c
// (c) Robert Muth - see LICENSE for more info

#include "CodeGenA32/isel_gen.h"
#include "Base/opcode_gen.h"

#include <cstdint>

namespace cwerg::code_gen_a32 {
namespace {
using namespace cwerg;
using namespace cwerg::base;

// +-prefix converts an enum the underlying integer type
template <typename T>
constexpr auto operator+(T e) noexcept
    -> std::enable_if_t<std::is_enum<T>::value, std::underlying_type_t<T>> {
  return static_cast<std::underlying_type_t<T>>(e);
}

using IK = IMM_KIND;
using a32::ADDR_MODE;
using a32::PRED;
using a32::REG;
using a32::SHIFT;

bool ImmFitsConstraint(IMM_KIND constr, int64_t x, int32_t last_stack_offset) {
  switch (constr) {
    default:
    case IK::invalid:
      ASSERT(false, "unexpected IMM_KIND " << (unsigned)constr);
      return false;
    case IK::pos_stk_combo_8_bits_shifted:
      x += last_stack_offset;
      // fallthrough
    case IK::pos_8_bits_shifted:
      return a32::EncodeRotatedImm(x) != -1;
    case IK::neg_8_bits_shifted:
      return a32::EncodeRotatedImm(-x) != -1;
    case IK::not_8_bits_shifted:
      return a32::EncodeRotatedImm(~x) != -1;
    case IK::pos_5_bits:
      return 0 <= x && x < (1 << 5);
    case IK::pos_stk_combo_12_bits:
      x += last_stack_offset;
      // fallthrough
    case IK::pos_12_bits:
      return 0 <= x && x < (1 << 12);
    case IK::neg_12_bits:
      return 0 <= -x && -x < (1 << 12);
    case IK::pos_stk_combo_8_bits:
      x += last_stack_offset;
      // fallthrough
    case IK::pos_8_bits:
      return 0 <= x && x < (1 << 8);
    case IK::pos_stk_combo_8_bits_times_4:
      x += last_stack_offset;
      // fallthrough
    case IK::pos_8_bits_times_4:
      return (x & 3) == 0 && 0 <= (x / 2) && (x / 2) < (1 << 8);
    case IK::neg_8_bits_times_4:
      return (x & 3) == 0 && -(1 << 8) < (x / 2) && (x / 2) <= 0;
    case IK::neg_8_bits:
      return 0 <= -x && -x < (1 << 8);
    case IK::pos_stk_combo_16_bits:
      x += last_stack_offset;
      // fallthrough
    case IK::pos_16_bits:
      return 0 <= x && x < (1 << 16);
    case IK::any_32_bits:
      return true;
  }
}

uint64_t ExtractTypeMaskForPattern(Ins ins) {
  uint64_t reg_matcher = 0;
  unsigned num_ops = InsOpcode(ins).num_operands;
  for (unsigned i = 0; i < num_ops; ++i) {
    const Handle h = InsOperand(ins, i);
    if (h.kind() == RefKind::REG) {
      reg_matcher |= uint64_t (RegKind(Reg(h))) << 8 * i;
    } else if (h.kind() == RefKind::CONST) {
      reg_matcher |= uint64_t (ConstKind(Const(h))) << 8 * i;
    }
  }
  return reg_matcher;
}

bool IsConstMatch(Const num,
                  IMM_KIND imm_constraint,
                  int32_t last_stack_offset) {
  if (imm_constraint == IMM_KIND::invalid) return false;

  int64_t x;
  switch (DKFlavor(ConstKind(num))) {
    default:
      return MATCH_IMPOSSIBLE;
    case DK_FLAVOR_U:
      // it is ok to convert to signed since we can handle at most 32 bit
      // immediates
      x = ConstValueU(num);
      break;
    case DK_FLAVOR_A:
    case DK_FLAVOR_C:
    case DK_FLAVOR_S:
      x = ConstValueACS(num);
      break;
  }
  return ImmFitsConstraint(imm_constraint, x, last_stack_offset);
}

bool PatternMatchesTypeConstraints(const Pattern& pat, uint64_t type_mask) {
  return type_mask == *(uint64_t*)pat.reg_constraints;
}

uint8_t PatternMismatchesImmConstraints(const Pattern& pat, Ins ins) {
  unsigned num_ops = InsOpcode(ins).num_operands;
  uint8_t out = 0;
  int32_t last_stack_offset = 0;
  for (unsigned i = 0; i < num_ops; ++i) {
    const Const op(InsOperand(ins, i));
    const IK imm_constraint = pat.imm_constraints[i];
    if (op.kind() == RefKind::STK) {
      last_stack_offset = StkSlot(Stk(op));
    } else if (op.kind() == RefKind::REG) {
      if (imm_constraint != IMM_KIND::invalid)
        return MATCH_IMPOSSIBLE;  // we have a reg but need an imm
    } else if (op.kind() == RefKind::CONST) {
      if (imm_constraint == IK::invalid ||
          !IsConstMatch(op, imm_constraint, last_stack_offset)) {
        // we have an imm that does not fit or need a reg
        out |= 1 << i;
      }
    }
  }
  return out;
}

/* @AUTOGEN-START@ */

const InsTmpl kInsTemplates[] = {
  { /*used first entry*/ },
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::add_regimm, 0x16 },  // add [2]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a32::OPC::add_imm, 0xe },  // add [3]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::add_regimm, 0x16 },  // add [4]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a32::OPC::add_imm, 0xe },  // add [5]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::vadd_f32, 0xe },  // add [6]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::vadd_f64, 0xe },  // add [7]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::sub_regimm, 0x16 },  // sub [8]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a32::OPC::sub_imm, 0xe },  // sub [9]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg2, +PARAM::num1},
    a32::OPC::rsb_imm, 0xe },  // sub [10]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::sub_regimm, 0x16 },  // sub [11]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a32::OPC::sub_imm, 0xe },  // sub [12]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg2, +PARAM::num1},
    a32::OPC::rsb_imm, 0xe },  // sub [13]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::vsub_f32, 0xe },  // sub [14]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::vsub_f64, 0xe },  // sub [15]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::mul, 0xe },  // mul [16]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::mul, 0xe },  // mul [17]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::vmul_f32, 0xe },  // mul [18]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::vmul_f64, 0xe },  // mul [19]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::udiv, 0xe },  // div [20]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::sdiv, 0xe },  // div [21]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::vdiv_f32, 0xe },  // div [22]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::vdiv_f64, 0xe },  // div [23]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::eor_regimm, 0x16 },  // xor [24]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a32::OPC::eor_imm, 0xe },  // xor [25]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::eor_regimm, 0x16 },  // xor [26]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a32::OPC::eor_imm, 0xe },  // xor [27]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::and_regimm, 0x16 },  // and [28]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a32::OPC::and_imm, 0xe },  // and [29]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2_not},
    a32::OPC::bic_imm, 0xe },  // and [30]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::and_regimm, 0x16 },  // and [31]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a32::OPC::and_imm, 0xe },  // and [32]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2_not},
    a32::OPC::bic_imm, 0xe },  // and [33]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::orr_regimm, 0x16 },  // or [34]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a32::OPC::orr_imm, 0xe },  // or [35]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::orr_regimm, 0x16 },  // or [36]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a32::OPC::orr_imm, 0xe },  // or [37]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::mov_regreg, 0x1a },  // shl [38]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, +PARAM::num2},
    a32::OPC::mov_regimm, 0x1a },  // shl [39]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::mov_regreg, 0x1a },  // shl [40]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, +PARAM::num2},
    a32::OPC::mov_regimm, 0x1a },  // shl [41]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsr, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::mov_regreg, 0x1a },  // shr [42]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsr, +PARAM::reg1, +PARAM::num2},
    a32::OPC::mov_regimm, 0x1a },  // shr [43]
  { {+PRED::al, +PARAM::reg0, +SHIFT::asr, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::mov_regreg, 0x1a },  // shr [44]
  { {+PRED::al, +PARAM::reg0, +SHIFT::asr, +PARAM::reg1, +PARAM::num2},
    a32::OPC::mov_regimm, 0x1a },  // shr [45]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // beq [46]
  { {+PRED::eq, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // beq [47]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // beq [48]
  { {+PRED::eq, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // beq [49]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // beq [50]
  { {+PRED::eq, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // beq [51]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // beq [52]
  { {+PRED::eq, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // beq [53]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // beq [54]
  { {+PRED::eq, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // beq [55]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // beq [56]
  { {+PRED::eq, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // beq [57]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // beq [58]
  { {+PRED::eq, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // beq [59]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // beq [60]
  { {+PRED::eq, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // beq [61]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vcmp_f32, 0x6 },  // beq [62]
  { {+PRED::al},
    a32::OPC::vmrs_APSR_nzcv_fpscr, 0x0 },  // beq [63]
  { {+PRED::eq, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // beq [64]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vcmp_f64, 0x6 },  // beq [65]
  { {+PRED::al},
    a32::OPC::vmrs_APSR_nzcv_fpscr, 0x0 },  // beq [66]
  { {+PRED::eq, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // beq [67]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // bne [68]
  { {+PRED::ne, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // bne [69]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // bne [70]
  { {+PRED::ne, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // bne [71]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // bne [72]
  { {+PRED::ne, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // bne [73]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // bne [74]
  { {+PRED::ne, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // bne [75]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // bne [76]
  { {+PRED::ne, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // bne [77]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // bne [78]
  { {+PRED::ne, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // bne [79]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // bne [80]
  { {+PRED::ne, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // bne [81]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // bne [82]
  { {+PRED::ne, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // bne [83]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vcmp_f32, 0x6 },  // bne [84]
  { {+PRED::al},
    a32::OPC::vmrs_APSR_nzcv_fpscr, 0x0 },  // bne [85]
  { {+PRED::ne, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // bne [86]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vcmp_f64, 0x6 },  // bne [87]
  { {+PRED::al},
    a32::OPC::vmrs_APSR_nzcv_fpscr, 0x0 },  // bne [88]
  { {+PRED::ne, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // bne [89]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // blt [90]
  { {+PRED::cc, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [91]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // blt [92]
  { {+PRED::cc, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [93]
  { {+PRED::al, +PARAM::reg1, +PARAM::num0},
    a32::OPC::cmp_imm, 0x6 },  // blt [94]
  { {+PRED::hi, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [95]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // blt [96]
  { {+PRED::cc, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [97]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // blt [98]
  { {+PRED::cc, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [99]
  { {+PRED::al, +PARAM::reg1, +PARAM::num0},
    a32::OPC::cmp_imm, 0x6 },  // blt [100]
  { {+PRED::hi, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [101]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // blt [102]
  { {+PRED::cc, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [103]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // blt [104]
  { {+PRED::cc, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [105]
  { {+PRED::al, +PARAM::reg1, +PARAM::num0},
    a32::OPC::cmp_imm, 0x6 },  // blt [106]
  { {+PRED::hi, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [107]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // blt [108]
  { {+PRED::lt, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [109]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // blt [110]
  { {+PRED::lt, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [111]
  { {+PRED::al, +PARAM::reg1, +PARAM::num0},
    a32::OPC::cmp_imm, 0x6 },  // blt [112]
  { {+PRED::gt, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [113]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vcmp_f32, 0x6 },  // blt [114]
  { {+PRED::al},
    a32::OPC::vmrs_APSR_nzcv_fpscr, 0x0 },  // blt [115]
  { {+PRED::mi, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [116]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vcmp_f64, 0x6 },  // blt [117]
  { {+PRED::al},
    a32::OPC::vmrs_APSR_nzcv_fpscr, 0x0 },  // blt [118]
  { {+PRED::mi, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // blt [119]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // ble [120]
  { {+PRED::ls, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [121]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // ble [122]
  { {+PRED::ls, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [123]
  { {+PRED::al, +PARAM::reg1, +PARAM::num0},
    a32::OPC::cmp_imm, 0x6 },  // ble [124]
  { {+PRED::cs, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [125]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // ble [126]
  { {+PRED::ls, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [127]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // ble [128]
  { {+PRED::ls, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [129]
  { {+PRED::al, +PARAM::reg1, +PARAM::num0},
    a32::OPC::cmp_imm, 0x6 },  // ble [130]
  { {+PRED::cs, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [131]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // ble [132]
  { {+PRED::ls, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [133]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // ble [134]
  { {+PRED::ls, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [135]
  { {+PRED::al, +PARAM::reg1, +PARAM::num0},
    a32::OPC::cmp_imm, 0x6 },  // ble [136]
  { {+PRED::cs, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [137]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::cmp_regimm, 0xa },  // ble [138]
  { {+PRED::le, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [139]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::cmp_imm, 0x6 },  // ble [140]
  { {+PRED::le, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [141]
  { {+PRED::al, +PARAM::reg1, +PARAM::num0},
    a32::OPC::cmp_imm, 0x6 },  // ble [142]
  { {+PRED::ge, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [143]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vcmp_f32, 0x6 },  // ble [144]
  { {+PRED::al},
    a32::OPC::vmrs_APSR_nzcv_fpscr, 0x0 },  // ble [145]
  { {+PRED::ls, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [146]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vcmp_f64, 0x6 },  // ble [147]
  { {+PRED::al},
    a32::OPC::vmrs_APSR_nzcv_fpscr, 0x0 },  // ble [148]
  { {+PRED::ls, +PARAM::bbl2},
    a32::OPC::b, 0x2 },  // ble [149]
  { {+PRED::al, +PARAM::scratch_gpr, +PARAM::jtb1_lo16},
    a32::OPC::movw, 0x6 },  // switch [150]
  { {+PRED::al, +PARAM::scratch_gpr, +PARAM::jtb1_hi16},
    a32::OPC::movt, 0x6 },  // switch [151]
  { {+PRED::al, +REG::pc, +ADDR_MODE::PUw, +PARAM::scratch_gpr, +SHIFT::lsl, +PARAM::reg0, 2},
    a32::OPC::ldr_reg, 0x28 },  // switch [152]
  { {+PRED::al, +PARAM::bbl0},
    a32::OPC::b, 0x2 },  // bra [153]
  { {+PRED::al, +REG::lr, +PARAM::fun0},
    a32::OPC::bl, 0x4 },  // bsr [154]
  { {+PRED::al, +PARAM::reg0},
    a32::OPC::blx_reg, 0x2 },  // jsr [155]
  { {+PRED::al, +ADDR_MODE::PuW, +REG::sp, 4, +REG::r7},
    a32::OPC::str_imm, 0x0 },  // syscall [156]
  { {+PRED::al, +REG::r7, +PARAM::num1},
    a32::OPC::movw, 0x4 },  // syscall [157]
  { {+PRED::al, 0},
    a32::OPC::svc, 0x0 },  // syscall [158]
  { {+PRED::al, +REG::r7, +ADDR_MODE::pUw, +REG::sp, 4},
    a32::OPC::ldr_imm, 0x0 },  // syscall [159]
  { {+PRED::al},
    a32::OPC::ud2, 0x0 },  // trap [160]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [161]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [162]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [163]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [164]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [165]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [166]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [167]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [168]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [169]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [170]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [171]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [172]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [173]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [174]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [175]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [176]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [177]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [178]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [179]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [180]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [181]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [182]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [183]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // conv [184]
  { {+PRED::al, +PARAM::reg0, +SHIFT::ror_rrx, +PARAM::reg1, 0},
    a32::OPC::uxtb, 0xa },  // conv [185]
  { {+PRED::al, +PARAM::reg0, +SHIFT::ror_rrx, +PARAM::reg1, 0},
    a32::OPC::sxtb, 0xa },  // conv [186]
  { {+PRED::al, +PARAM::reg0, +SHIFT::ror_rrx, +PARAM::reg1, 0},
    a32::OPC::uxth, 0xa },  // conv [187]
  { {+PRED::al, +PARAM::reg0, +SHIFT::ror_rrx, +PARAM::reg1, 0},
    a32::OPC::sxth, 0xa },  // conv [188]
  { {+PRED::al, +PARAM::scratch_flt, +PARAM::reg1},
    a32::OPC::vcvt_s32_f32, 0x6 },  // conv [189]
  { {+PRED::al, +PARAM::reg0, +PARAM::scratch_flt},
    a32::OPC::vmov_stoa, 0x6 },  // conv [190]
  { {+PRED::al, +PARAM::scratch_flt, +PARAM::reg1},
    a32::OPC::vcvt_u32_f32, 0x6 },  // conv [191]
  { {+PRED::al, +PARAM::reg0, +PARAM::scratch_flt},
    a32::OPC::vmov_stoa, 0x6 },  // conv [192]
  { {+PRED::al, +PARAM::scratch_flt, +PARAM::reg1},
    a32::OPC::vcvt_s32_f64, 0x6 },  // conv [193]
  { {+PRED::al, +PARAM::reg0, +PARAM::scratch_flt},
    a32::OPC::vmov_stoa, 0x6 },  // conv [194]
  { {+PRED::al, +PARAM::scratch_flt, +PARAM::reg1},
    a32::OPC::vcvt_u32_f64, 0x6 },  // conv [195]
  { {+PRED::al, +PARAM::reg0, +PARAM::scratch_flt},
    a32::OPC::vmov_stoa, 0x6 },  // conv [196]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vmov_atos, 0x6 },  // conv [197]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg0},
    a32::OPC::vcvt_f32_s32, 0x6 },  // conv [198]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vmov_atos, 0x6 },  // conv [199]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg0},
    a32::OPC::vcvt_f32_u32, 0x6 },  // conv [200]
  { {+PRED::al, +PARAM::scratch_flt, +PARAM::reg1},
    a32::OPC::vmov_atos, 0x6 },  // conv [201]
  { {+PRED::al, +PARAM::reg0, +PARAM::scratch_flt},
    a32::OPC::vcvt_f64_s32, 0x6 },  // conv [202]
  { {+PRED::al, +PARAM::scratch_flt, +PARAM::reg1},
    a32::OPC::vmov_atos, 0x6 },  // conv [203]
  { {+PRED::al, +PARAM::reg0, +PARAM::scratch_flt},
    a32::OPC::vcvt_f64_u32, 0x6 },  // conv [204]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [205]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [206]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [207]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [208]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [209]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [210]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [211]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [212]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [213]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [214]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [215]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [216]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [217]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [218]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [219]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // bitcast [220]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::mov_imm, 0x6 },  // mov [221]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_not},
    a32::OPC::mvn_imm, 0x6 },  // mov [222]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // mov [223]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // mov [224]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_lo16},
    a32::OPC::movw, 0x6 },  // mov [225]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_hi16},
    a32::OPC::movt, 0x6 },  // mov [226]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::mov_imm, 0x6 },  // mov [227]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_not},
    a32::OPC::mvn_imm, 0x6 },  // mov [228]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // mov [229]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // mov [230]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_lo16},
    a32::OPC::movw, 0x6 },  // mov [231]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_hi16},
    a32::OPC::movt, 0x6 },  // mov [232]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::mov_imm, 0x6 },  // mov [233]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_not},
    a32::OPC::mvn_imm, 0x6 },  // mov [234]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // mov [235]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // mov [236]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_lo16},
    a32::OPC::movw, 0x6 },  // mov [237]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_hi16},
    a32::OPC::movt, 0x6 },  // mov [238]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::mov_imm, 0x6 },  // mov [239]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_not},
    a32::OPC::mvn_imm, 0x6 },  // mov [240]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // mov [241]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // mov [242]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_lo16},
    a32::OPC::movw, 0x6 },  // mov [243]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_hi16},
    a32::OPC::movt, 0x6 },  // mov [244]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::mov_imm, 0x6 },  // mov [245]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_not},
    a32::OPC::mvn_imm, 0x6 },  // mov [246]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // mov [247]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // mov [248]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_lo16},
    a32::OPC::movw, 0x6 },  // mov [249]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_hi16},
    a32::OPC::movt, 0x6 },  // mov [250]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::mov_imm, 0x6 },  // mov [251]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_not},
    a32::OPC::mvn_imm, 0x6 },  // mov [252]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // mov [253]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // mov [254]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_lo16},
    a32::OPC::movw, 0x6 },  // mov [255]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_hi16},
    a32::OPC::movt, 0x6 },  // mov [256]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::mov_imm, 0x6 },  // mov [257]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_not},
    a32::OPC::mvn_imm, 0x6 },  // mov [258]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // mov [259]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // mov [260]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_lo16},
    a32::OPC::movw, 0x6 },  // mov [261]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_hi16},
    a32::OPC::movt, 0x6 },  // mov [262]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::mov_imm, 0x6 },  // mov [263]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_not},
    a32::OPC::mvn_imm, 0x6 },  // mov [264]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // mov [265]
  { {+PRED::al, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // mov [266]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_lo16},
    a32::OPC::movw, 0x6 },  // mov [267]
  { {+PRED::al, +PARAM::reg0, +PARAM::num1_hi16},
    a32::OPC::movt, 0x6 },  // mov [268]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vmov_f32, 0x6 },  // mov [269]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vmov_f64, 0x6 },  // mov [270]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [271]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [272]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [273]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [274]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [275]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [276]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [277]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [278]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [279]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [280]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [281]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [282]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [283]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [284]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [285]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [286]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [287]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [288]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [289]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [290]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [291]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [292]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [293]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [294]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [295]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [296]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [297]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [298]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [299]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [300]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [301]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [302]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [303]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [304]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [305]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [306]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [307]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [308]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [309]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [310]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [311]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [312]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [313]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [314]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [315]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [316]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [317]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [318]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [319]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [320]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [321]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [322]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [323]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [324]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [325]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [326]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [327]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [328]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [329]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [330]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [331]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [332]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [333]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [334]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [335]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [336]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [337]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [338]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [339]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [340]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [341]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [342]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [343]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [344]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [345]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [346]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [347]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [348]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [349]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [350]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [351]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [352]
  { {+PRED::eq, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [353]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [354]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [355]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [356]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [357]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [358]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [359]
  { {+PRED::ne, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmpeq [360]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmpeq [361]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [362]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [363]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmpeq [364]
  { {+PRED::eq, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmpeq [365]
  { {+PRED::ne, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmpeq [366]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmplt [367]
  { {+PRED::cc, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [368]
  { {+PRED::cs, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [369]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [370]
  { {+PRED::cc, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [371]
  { {+PRED::cs, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [372]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmplt [373]
  { {+PRED::cc, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [374]
  { {+PRED::cs, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [375]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [376]
  { {+PRED::cc, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [377]
  { {+PRED::cs, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [378]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmplt [379]
  { {+PRED::cc, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [380]
  { {+PRED::cs, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [381]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [382]
  { {+PRED::cc, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [383]
  { {+PRED::cs, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [384]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmplt [385]
  { {+PRED::cc, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [386]
  { {+PRED::cs, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [387]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [388]
  { {+PRED::cc, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [389]
  { {+PRED::cs, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [390]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmplt [391]
  { {+PRED::cc, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [392]
  { {+PRED::cs, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [393]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [394]
  { {+PRED::cc, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [395]
  { {+PRED::cs, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [396]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmplt [397]
  { {+PRED::cc, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [398]
  { {+PRED::cs, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [399]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [400]
  { {+PRED::cc, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [401]
  { {+PRED::cs, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [402]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmplt [403]
  { {+PRED::cc, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [404]
  { {+PRED::cs, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [405]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [406]
  { {+PRED::cc, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [407]
  { {+PRED::cs, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [408]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmplt [409]
  { {+PRED::cc, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [410]
  { {+PRED::cs, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [411]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [412]
  { {+PRED::cc, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [413]
  { {+PRED::cs, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [414]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmplt [415]
  { {+PRED::lt, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [416]
  { {+PRED::ge, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [417]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [418]
  { {+PRED::lt, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [419]
  { {+PRED::ge, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [420]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmplt [421]
  { {+PRED::lt, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [422]
  { {+PRED::ge, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [423]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [424]
  { {+PRED::lt, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [425]
  { {+PRED::ge, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [426]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmplt [427]
  { {+PRED::lt, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [428]
  { {+PRED::ge, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [429]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [430]
  { {+PRED::lt, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [431]
  { {+PRED::ge, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [432]
  { {+PRED::al, +PARAM::reg3, +SHIFT::lsl, +PARAM::reg4, 0},
    a32::OPC::cmp_regimm, 0xa },  // cmplt [433]
  { {+PRED::lt, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [434]
  { {+PRED::ge, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [435]
  { {+PRED::al, +PARAM::reg3, +PARAM::num4},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [436]
  { {+PRED::lt, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [437]
  { {+PRED::ge, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [438]
  { {+PRED::al, +PARAM::reg4, +PARAM::num3},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [439]
  { {+PRED::hi, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [440]
  { {+PRED::ls, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [441]
  { {+PRED::al, +PARAM::reg4, +PARAM::num3},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [442]
  { {+PRED::hi, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [443]
  { {+PRED::ls, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [444]
  { {+PRED::al, +PARAM::reg4, +PARAM::num3},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [445]
  { {+PRED::hi, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [446]
  { {+PRED::ls, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [447]
  { {+PRED::al, +PARAM::reg4, +PARAM::num3},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [448]
  { {+PRED::hi, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [449]
  { {+PRED::ls, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [450]
  { {+PRED::al, +PARAM::reg4, +PARAM::num3},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [451]
  { {+PRED::hi, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [452]
  { {+PRED::ls, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [453]
  { {+PRED::al, +PARAM::reg4, +PARAM::num3},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [454]
  { {+PRED::hi, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [455]
  { {+PRED::ls, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [456]
  { {+PRED::al, +PARAM::reg4, +PARAM::num3},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [457]
  { {+PRED::hi, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [458]
  { {+PRED::ls, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [459]
  { {+PRED::al, +PARAM::reg4, +PARAM::num3},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [460]
  { {+PRED::hi, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [461]
  { {+PRED::ls, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [462]
  { {+PRED::al, +PARAM::reg4, +PARAM::num3},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [463]
  { {+PRED::gt, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [464]
  { {+PRED::le, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [465]
  { {+PRED::al, +PARAM::reg4, +PARAM::num3},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [466]
  { {+PRED::gt, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [467]
  { {+PRED::le, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [468]
  { {+PRED::al, +PARAM::reg4, +PARAM::num3},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [469]
  { {+PRED::gt, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [470]
  { {+PRED::le, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::mov_regimm, 0xa },  // cmplt [471]
  { {+PRED::al, +PARAM::reg4, +PARAM::num3},
    a32::OPC::cmp_imm, 0x6 },  // cmplt [472]
  { {+PRED::gt, +PARAM::reg0, +PARAM::num1},
    a32::OPC::movw, 0x6 },  // cmplt [473]
  { {+PRED::le, +PARAM::reg0, +PARAM::num2},
    a32::OPC::movw, 0x6 },  // cmplt [474]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::add_regimm, 0x16 },  // lea [475]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a32::OPC::add_imm, 0xe },  // lea [476]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::sub_imm, 0xe },  // lea [477]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::add_regimm, 0x16 },  // lea [478]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2},
    a32::OPC::add_imm, 0xe },  // lea [479]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::sub_imm, 0xe },  // lea [480]
  { {+PRED::al, +PARAM::reg0, +PARAM::mem1_num2_lo16},
    a32::OPC::movw, 0x6 },  // lea.mem [481]
  { {+PRED::al, +PARAM::reg0, +PARAM::mem1_num2_hi16},
    a32::OPC::movt, 0x6 },  // lea.mem [482]
  { {+PRED::al, +PARAM::reg0, +PARAM::mem1_num2_lo16},
    a32::OPC::movw, 0x6 },  // lea.mem [483]
  { {+PRED::al, +PARAM::reg0, +PARAM::mem1_num2_hi16},
    a32::OPC::movt, 0x6 },  // lea.mem [484]
  { {+PRED::al, +PARAM::reg0, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::add_imm, 0xa },  // lea.stk [485]
  { {+PRED::al, +PARAM::reg0, +PARAM::stk1_offset2},
    a32::OPC::movw, 0x6 },  // lea.stk [486]
  { {+PRED::al, +PARAM::reg0, +REG::sp, +SHIFT::lsl, +PARAM::reg0, 0},
    a32::OPC::add_regimm, 0x12 },  // lea.stk [487]
  { {+PRED::al, +PARAM::reg0, +PARAM::stk1_offset2_lo},
    a32::OPC::movw, 0x6 },  // lea.stk [488]
  { {+PRED::al, +PARAM::reg0, +PARAM::stk1_offset2_hi},
    a32::OPC::movt, 0x6 },  // lea.stk [489]
  { {+PRED::al, +PARAM::reg0, +REG::sp, +SHIFT::lsl, +PARAM::reg0, 0},
    a32::OPC::add_regimm, 0x12 },  // lea.stk [490]
  { {+PRED::al, +PARAM::reg0, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::add_imm, 0xa },  // lea.stk [491]
  { {+PRED::al, +PARAM::reg0, +PARAM::stk1_offset2},
    a32::OPC::movw, 0x6 },  // lea.stk [492]
  { {+PRED::al, +PARAM::reg0, +REG::sp, +SHIFT::lsl, +PARAM::reg0, 0},
    a32::OPC::add_regimm, 0x12 },  // lea.stk [493]
  { {+PRED::al, +PARAM::reg0, +PARAM::stk1_offset2_lo},
    a32::OPC::movw, 0x6 },  // lea.stk [494]
  { {+PRED::al, +PARAM::reg0, +PARAM::stk1_offset2_hi},
    a32::OPC::movt, 0x6 },  // lea.stk [495]
  { {+PRED::al, +PARAM::reg0, +REG::sp, +SHIFT::lsl, +PARAM::reg0, 0},
    a32::OPC::add_regimm, 0x12 },  // lea.stk [496]
  { {+PRED::al, +PARAM::reg0, +PARAM::fun1_lo16},
    a32::OPC::movw, 0x6 },  // lea.fun [497]
  { {+PRED::al, +PARAM::reg0, +PARAM::fun1_hi16},
    a32::OPC::movt, 0x6 },  // lea.fun [498]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::ldr_reg, 0x2a },  // ld [499]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldr_imm, 0x1a },  // ld [500]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldr_imm, 0x1a },  // ld [501]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::ldr_reg, 0x2a },  // ld [502]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldr_imm, 0x1a },  // ld [503]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldr_imm, 0x1a },  // ld [504]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::ldr_reg, 0x2a },  // ld [505]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldr_imm, 0x1a },  // ld [506]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldr_imm, 0x1a },  // ld [507]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::ldr_reg, 0x2a },  // ld [508]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldr_imm, 0x1a },  // ld [509]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldr_imm, 0x1a },  // ld [510]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::ldr_reg, 0x2a },  // ld [511]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldr_imm, 0x1a },  // ld [512]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldr_imm, 0x1a },  // ld [513]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::ldr_reg, 0x2a },  // ld [514]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldr_imm, 0x1a },  // ld [515]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldr_imm, 0x1a },  // ld [516]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::ldr_reg, 0x2a },  // ld [517]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldr_imm, 0x1a },  // ld [518]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldr_imm, 0x1a },  // ld [519]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::ldr_reg, 0x2a },  // ld [520]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldr_imm, 0x1a },  // ld [521]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldr_imm, 0x1a },  // ld [522]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::ldrb_reg, 0x2a },  // ld [523]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldrb_imm, 0x1a },  // ld [524]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldrb_imm, 0x1a },  // ld [525]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +SHIFT::lsl, +PARAM::reg2, 0},
    a32::OPC::ldrb_reg, 0x2a },  // ld [526]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldrb_imm, 0x1a },  // ld [527]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldrb_imm, 0x1a },  // ld [528]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::vldr_f32, 0x1a },  // ld [529]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::vldr_f32, 0x1a },  // ld [530]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::vldr_f32, 0x1a },  // ld [531]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::vldr_f32, 0x1a },  // ld [532]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::vldr_f64, 0x1a },  // ld [533]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::vldr_f64, 0x1a },  // ld [534]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::vldr_f64, 0x1a },  // ld [535]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::vldr_f64, 0x1a },  // ld [536]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::ldrsb_reg, 0x1a },  // ld [537]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldrsb_imm, 0x1a },  // ld [538]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldrsb_imm, 0x1a },  // ld [539]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::ldrsb_reg, 0x1a },  // ld [540]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldrsb_imm, 0x1a },  // ld [541]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldrsb_imm, 0x1a },  // ld [542]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::ldrh_reg, 0x1a },  // ld [543]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldrh_imm, 0x1a },  // ld [544]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldrh_imm, 0x1a },  // ld [545]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::ldrh_reg, 0x1a },  // ld [546]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldrh_imm, 0x1a },  // ld [547]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldrh_imm, 0x1a },  // ld [548]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::ldrsh_reg, 0x1a },  // ld [549]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldrsh_imm, 0x1a },  // ld [550]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldrsh_imm, 0x1a },  // ld [551]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::ldrsh_reg, 0x1a },  // ld [552]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +PARAM::reg1, +PARAM::num2_neg},
    a32::OPC::ldrsh_imm, 0x1a },  // ld [553]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::Puw, +PARAM::reg1, +PARAM::num2},
    a32::OPC::ldrsh_imm, 0x1a },  // ld [554]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldr_imm, 0x12 },  // ld.stk [555]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldr_imm, 0x12 },  // ld.stk [556]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldr_imm, 0x12 },  // ld.stk [557]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldr_imm, 0x12 },  // ld.stk [558]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldr_imm, 0x12 },  // ld.stk [559]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldr_imm, 0x12 },  // ld.stk [560]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldr_imm, 0x12 },  // ld.stk [561]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldr_imm, 0x12 },  // ld.stk [562]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldrb_imm, 0x12 },  // ld.stk [563]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldrb_imm, 0x12 },  // ld.stk [564]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::vldr_f32, 0x12 },  // ld.stk [565]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::vldr_f32, 0x12 },  // ld.stk [566]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::vldr_f64, 0x12 },  // ld.stk [567]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::vldr_f64, 0x12 },  // ld.stk [568]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldrsb_imm, 0x12 },  // ld.stk [569]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldrsb_imm, 0x12 },  // ld.stk [570]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldrh_imm, 0x12 },  // ld.stk [571]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldrh_imm, 0x12 },  // ld.stk [572]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldrsh_imm, 0x12 },  // ld.stk [573]
  { {+PRED::al, +PARAM::reg0, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk1_offset2},
    a32::OPC::ldrsh_imm, 0x12 },  // ld.stk [574]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0, +PARAM::reg2},
    a32::OPC::str_reg, 0x54 },  // st [575]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [576]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [577]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0, +PARAM::reg2},
    a32::OPC::str_reg, 0x54 },  // st [578]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [579]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [580]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0, +PARAM::reg2},
    a32::OPC::str_reg, 0x54 },  // st [581]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [582]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [583]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0, +PARAM::reg2},
    a32::OPC::str_reg, 0x54 },  // st [584]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [585]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [586]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0, +PARAM::reg2},
    a32::OPC::str_reg, 0x54 },  // st [587]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [588]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [589]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0, +PARAM::reg2},
    a32::OPC::str_reg, 0x54 },  // st [590]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [591]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [592]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0, +PARAM::reg2},
    a32::OPC::str_reg, 0x54 },  // st [593]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [594]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [595]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0, +PARAM::reg2},
    a32::OPC::str_reg, 0x54 },  // st [596]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [597]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::str_imm, 0x1c },  // st [598]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0, +PARAM::reg2},
    a32::OPC::strb_reg, 0x54 },  // st [599]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::strb_imm, 0x1c },  // st [600]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::strb_imm, 0x1c },  // st [601]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0, +PARAM::reg2},
    a32::OPC::strb_reg, 0x54 },  // st [602]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::strb_imm, 0x1c },  // st [603]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::strb_imm, 0x1c },  // st [604]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0, +PARAM::reg2},
    a32::OPC::strb_reg, 0x54 },  // st [605]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::strb_imm, 0x1c },  // st [606]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::strb_imm, 0x1c },  // st [607]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +SHIFT::lsl, +PARAM::reg1, 0, +PARAM::reg2},
    a32::OPC::strb_reg, 0x54 },  // st [608]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::strb_imm, 0x1c },  // st [609]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::strb_imm, 0x1c },  // st [610]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::vstr_f32, 0x1c },  // st [611]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::vstr_f32, 0x1c },  // st [612]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::vstr_f32, 0x1c },  // st [613]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::vstr_f32, 0x1c },  // st [614]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::vstr_f64, 0x1c },  // st [615]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::vstr_f64, 0x1c },  // st [616]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::vstr_f64, 0x1c },  // st [617]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::vstr_f64, 0x1c },  // st [618]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::strh_reg, 0x1c },  // st [619]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::strh_imm, 0x1c },  // st [620]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::strh_imm, 0x1c },  // st [621]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::strh_reg, 0x1c },  // st [622]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::strh_imm, 0x1c },  // st [623]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::strh_imm, 0x1c },  // st [624]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::strh_reg, 0x1c },  // st [625]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::strh_imm, 0x1c },  // st [626]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::strh_imm, 0x1c },  // st [627]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::reg1, +PARAM::reg2},
    a32::OPC::strh_reg, 0x1c },  // st [628]
  { {+PRED::al, +ADDR_MODE::PUw, +PARAM::reg0, +PARAM::num1, +PARAM::reg2},
    a32::OPC::strh_imm, 0x1c },  // st [629]
  { {+PRED::al, +ADDR_MODE::Puw, +PARAM::reg0, +PARAM::num1_neg, +PARAM::reg2},
    a32::OPC::strh_imm, 0x1c },  // st [630]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::str_imm, 0x18 },  // st.stk [631]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::str_imm, 0x18 },  // st.stk [632]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::str_imm, 0x18 },  // st.stk [633]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::str_imm, 0x18 },  // st.stk [634]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::str_imm, 0x18 },  // st.stk [635]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::str_imm, 0x18 },  // st.stk [636]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::str_imm, 0x18 },  // st.stk [637]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::str_imm, 0x18 },  // st.stk [638]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::strb_imm, 0x18 },  // st.stk [639]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::strb_imm, 0x18 },  // st.stk [640]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::strb_imm, 0x18 },  // st.stk [641]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::strb_imm, 0x18 },  // st.stk [642]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::vstr_f32, 0x18 },  // st.stk [643]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::vstr_f32, 0x18 },  // st.stk [644]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::vstr_f64, 0x18 },  // st.stk [645]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::vstr_f64, 0x18 },  // st.stk [646]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::strh_imm, 0x18 },  // st.stk [647]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::strh_imm, 0x18 },  // st.stk [648]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::strh_imm, 0x18 },  // st.stk [649]
  { {+PRED::al, +ADDR_MODE::PUw, +REG::sp, +PARAM::stk0_offset1, +PARAM::reg2},
    a32::OPC::strh_imm, 0x18 },  // st.stk [650]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vmov_f32, 0x6 },  // trunc [651]
  { {+PRED::al, +PARAM::reg0, +PARAM::reg1},
    a32::OPC::vmov_f64, 0x6 },  // trunc [652]
};

const uint16_t kPatternJumper[256] = {
 0 /* --- */,  0 /* .mem */,  0 /* .data */,  0 /* .addr.fun */, 
 0 /* .addr.mem */,  0 /* .fun */,  0 /* .bbl */,  0 /* .reg */, 
 0 /* .stk */,  0 /* .jtb */,  0 /* --- */,  0 /* --- */, 
 0 /* --- */,  0 /* --- */,  0 /* --- */,  0 /* --- */, 
 0 /* add */,  6 /* sub */,  14 /* mul */,  18 /* div */, 
 22 /* rem */,  22 /* min */,  22 /* max */,  22 /* --- */, 
 22 /* xor */,  26 /* and */,  32 /* or */,  36 /* shl */, 
 40 /* shr */,  44 /* rotl */,  44 /* --- */,  44 /* --- */, 
 44 /* beq */,  54 /* bne */,  64 /* blt */,  78 /* ble */, 
 92 /* --- */,  92 /* --- */,  92 /* --- */,  92 /* --- */, 
 92 /* switch */,  93 /* bra */,  94 /* ret */,  94 /* bsr */, 
 95 /* jsr */,  96 /* syscall */,  97 /* trap */,  98 /* --- */, 
 98 /* pusharg */,  98 /* poparg */,  98 /* conv */,  134 /* bitcast */, 
 150 /* mov */,  192 /* cmpeq */,  224 /* cmplt */,  260 /* --- */, 
 260 /* lea */,  266 /* lea.mem */,  268 /* lea.stk */,  274 /* lea.fun */, 
 275 /* --- */,  275 /* --- */,  275 /* --- */,  275 /* --- */, 
 275 /* ld */,  331 /* ld.mem */,  331 /* ld.stk */,  351 /* --- */, 
 351 /* --- */,  351 /* --- */,  351 /* --- */,  351 /* --- */, 
 351 /* st */,  407 /* st.mem */,  407 /* st.stk */,  427 /* --- */, 
 427 /* --- */,  427 /* --- */,  427 /* --- */,  427 /* --- */, 
 427 /* --- */,  427 /* --- */,  427 /* --- */,  427 /* --- */, 
 427 /* --- */,  427 /* --- */,  427 /* --- */,  427 /* --- */, 
 427 /* --- */,  427 /* --- */,  427 /* --- */,  427 /* --- */, 
 427 /* --- */,  427 /* --- */,  427 /* --- */,  427 /* --- */, 
 427 /* sqrt */,  427 /* abs */,  427 /* sign */,  427 /* ceil */, 
 427 /* floor */,  427 /* trunc */,  429 /* round */,  429 /* sin */, 
 429 /* cos */,  429 /* tan */,  429 /* asin */,  429 /* acos */, 
 429 /* atan */,  429 /* exp */,  429 /* log */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* cntpop */,  429 /* cntlz */,  429 /* cnttz */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* bcopy */,  429 /* --- */,  429 /* bzero */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* st.stks */,  429 /* ld.stks */,  429 /* lea.stks */,  429 /* lds */, 
 429 /* sts */,  429 /* adds */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* .struct */,  429 /* .field */,  429 /* .endstruct */,  429 /* .stk.s */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* nop */,  429 /* nop1 */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
 429 /* --- */,  429 /* --- */,  429 /* --- */,  429 /* --- */, 
};

const Pattern kPatterns[] = {
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[1], 1 },  // add [0]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[2], 1 },  // add [1]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[3], 1 },  // add [2]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[4], 1 },  // add [3]
  { {DK::F32, DK::F32, DK::F32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[5], 1 },  // add [4]
  { {DK::F64, DK::F64, DK::F64},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[6], 1 },  // add [5]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[7], 1 },  // sub [6]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[8], 1 },  // sub [7]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[9], 1 },  // sub [8]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[10], 1 },  // sub [9]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[11], 1 },  // sub [10]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[12], 1 },  // sub [11]
  { {DK::F32, DK::F32, DK::F32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[13], 1 },  // sub [12]
  { {DK::F64, DK::F64, DK::F64},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[14], 1 },  // sub [13]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[15], 1 },  // mul [14]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[16], 1 },  // mul [15]
  { {DK::F32, DK::F32, DK::F32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[17], 1 },  // mul [16]
  { {DK::F64, DK::F64, DK::F64},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[18], 1 },  // mul [17]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[19], 1 },  // div [18]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[20], 1 },  // div [19]
  { {DK::F32, DK::F32, DK::F32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[21], 1 },  // div [20]
  { {DK::F64, DK::F64, DK::F64},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[22], 1 },  // div [21]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[23], 1 },  // xor [22]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[24], 1 },  // xor [23]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[25], 1 },  // xor [24]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[26], 1 },  // xor [25]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[27], 1 },  // and [26]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[28], 1 },  // and [27]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::not_8_bits_shifted},
    &kInsTemplates[29], 1 },  // and [28]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[30], 1 },  // and [29]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[31], 1 },  // and [30]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::not_8_bits_shifted},
    &kInsTemplates[32], 1 },  // and [31]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[33], 1 },  // or [32]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[34], 1 },  // or [33]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[35], 1 },  // or [34]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[36], 1 },  // or [35]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[37], 1 },  // shl [36]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_5_bits},
    &kInsTemplates[38], 1 },  // shl [37]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[39], 1 },  // shl [38]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_5_bits},
    &kInsTemplates[40], 1 },  // shl [39]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[41], 1 },  // shr [40]
  { {DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_5_bits},
    &kInsTemplates[42], 1 },  // shr [41]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[43], 1 },  // shr [42]
  { {DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_5_bits},
    &kInsTemplates[44], 1 },  // shr [43]
  { {DK::U32, DK::U32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[45], 2 },  // beq [44]
  { {DK::U32, DK::U32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[47], 2 },  // beq [45]
  { {DK::S32, DK::S32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[49], 2 },  // beq [46]
  { {DK::S32, DK::S32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[51], 2 },  // beq [47]
  { {DK::A32, DK::A32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[53], 2 },  // beq [48]
  { {DK::A32, DK::A32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[55], 2 },  // beq [49]
  { {DK::C32, DK::C32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[57], 2 },  // beq [50]
  { {DK::C32, DK::C32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[59], 2 },  // beq [51]
  { {DK::F32, DK::F32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[61], 3 },  // beq [52]
  { {DK::F64, DK::F64, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[64], 3 },  // beq [53]
  { {DK::U32, DK::U32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[67], 2 },  // bne [54]
  { {DK::U32, DK::U32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[69], 2 },  // bne [55]
  { {DK::S32, DK::S32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[71], 2 },  // bne [56]
  { {DK::S32, DK::S32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[73], 2 },  // bne [57]
  { {DK::A32, DK::A32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[75], 2 },  // bne [58]
  { {DK::A32, DK::A32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[77], 2 },  // bne [59]
  { {DK::C32, DK::C32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[79], 2 },  // bne [60]
  { {DK::C32, DK::C32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[81], 2 },  // bne [61]
  { {DK::F32, DK::F32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[83], 3 },  // bne [62]
  { {DK::F64, DK::F64, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[86], 3 },  // bne [63]
  { {DK::U32, DK::U32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[89], 2 },  // blt [64]
  { {DK::U32, DK::U32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[91], 2 },  // blt [65]
  { {DK::U32, DK::U32, DK::INVALID},
    {IK::pos_8_bits_shifted, IK::invalid, IK::invalid},
    &kInsTemplates[93], 2 },  // blt [66]
  { {DK::A32, DK::A32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[95], 2 },  // blt [67]
  { {DK::A32, DK::A32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[97], 2 },  // blt [68]
  { {DK::A32, DK::A32, DK::INVALID},
    {IK::pos_8_bits_shifted, IK::invalid, IK::invalid},
    &kInsTemplates[99], 2 },  // blt [69]
  { {DK::C32, DK::C32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[101], 2 },  // blt [70]
  { {DK::C32, DK::C32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[103], 2 },  // blt [71]
  { {DK::C32, DK::C32, DK::INVALID},
    {IK::pos_8_bits_shifted, IK::invalid, IK::invalid},
    &kInsTemplates[105], 2 },  // blt [72]
  { {DK::S32, DK::S32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[107], 2 },  // blt [73]
  { {DK::S32, DK::S32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[109], 2 },  // blt [74]
  { {DK::S32, DK::S32, DK::INVALID},
    {IK::pos_8_bits_shifted, IK::invalid, IK::invalid},
    &kInsTemplates[111], 2 },  // blt [75]
  { {DK::F32, DK::F32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[113], 3 },  // blt [76]
  { {DK::F64, DK::F64, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[116], 3 },  // blt [77]
  { {DK::U32, DK::U32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[119], 2 },  // ble [78]
  { {DK::U32, DK::U32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[121], 2 },  // ble [79]
  { {DK::U32, DK::U32, DK::INVALID},
    {IK::pos_8_bits_shifted, IK::invalid, IK::invalid},
    &kInsTemplates[123], 2 },  // ble [80]
  { {DK::A32, DK::A32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[125], 2 },  // ble [81]
  { {DK::A32, DK::A32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[127], 2 },  // ble [82]
  { {DK::A32, DK::A32, DK::INVALID},
    {IK::pos_8_bits_shifted, IK::invalid, IK::invalid},
    &kInsTemplates[129], 2 },  // ble [83]
  { {DK::C32, DK::C32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[131], 2 },  // ble [84]
  { {DK::C32, DK::C32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[133], 2 },  // ble [85]
  { {DK::C32, DK::C32, DK::INVALID},
    {IK::pos_8_bits_shifted, IK::invalid, IK::invalid},
    &kInsTemplates[135], 2 },  // ble [86]
  { {DK::S32, DK::S32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[137], 2 },  // ble [87]
  { {DK::S32, DK::S32, DK::INVALID},
    {IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[139], 2 },  // ble [88]
  { {DK::S32, DK::S32, DK::INVALID},
    {IK::pos_8_bits_shifted, IK::invalid, IK::invalid},
    &kInsTemplates[141], 2 },  // ble [89]
  { {DK::F32, DK::F32, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[143], 3 },  // ble [90]
  { {DK::F64, DK::F64, DK::INVALID},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[146], 3 },  // ble [91]
  { {DK::U32, DK::INVALID},
    {IK::invalid, IK::invalid},
    &kInsTemplates[149], 3 },  // switch [92]
  { {DK::INVALID},
    {IK::invalid},
    &kInsTemplates[152], 1 },  // bra [93]
  { {DK::INVALID},
    {IK::invalid},
    &kInsTemplates[153], 1 },  // bsr [94]
  { {DK::C32, DK::INVALID},
    {IK::invalid, IK::invalid},
    &kInsTemplates[154], 1 },  // jsr [95]
  { {DK::INVALID, DK::U32},
    {IK::invalid, IK::pos_16_bits},
    &kInsTemplates[155], 4 },  // syscall [96]
  { {},
    {},
    &kInsTemplates[159], 1 },  // trap [97]
  { {DK::U32, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[160], 1 },  // conv [98]
  { {DK::U32, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[161], 1 },  // conv [99]
  { {DK::S32, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[162], 1 },  // conv [100]
  { {DK::S32, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[163], 1 },  // conv [101]
  { {DK::U16, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[164], 1 },  // conv [102]
  { {DK::U16, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[165], 1 },  // conv [103]
  { {DK::S16, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[166], 1 },  // conv [104]
  { {DK::S16, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[167], 1 },  // conv [105]
  { {DK::U8, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[168], 1 },  // conv [106]
  { {DK::U8, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[169], 1 },  // conv [107]
  { {DK::S8, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[170], 1 },  // conv [108]
  { {DK::S8, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[171], 1 },  // conv [109]
  { {DK::U16, DK::U16},
    {IK::invalid, IK::invalid},
    &kInsTemplates[172], 1 },  // conv [110]
  { {DK::U16, DK::S16},
    {IK::invalid, IK::invalid},
    &kInsTemplates[173], 1 },  // conv [111]
  { {DK::S16, DK::U16},
    {IK::invalid, IK::invalid},
    &kInsTemplates[174], 1 },  // conv [112]
  { {DK::S16, DK::S16},
    {IK::invalid, IK::invalid},
    &kInsTemplates[175], 1 },  // conv [113]
  { {DK::U8, DK::U16},
    {IK::invalid, IK::invalid},
    &kInsTemplates[176], 1 },  // conv [114]
  { {DK::U8, DK::S16},
    {IK::invalid, IK::invalid},
    &kInsTemplates[177], 1 },  // conv [115]
  { {DK::S8, DK::U16},
    {IK::invalid, IK::invalid},
    &kInsTemplates[178], 1 },  // conv [116]
  { {DK::S8, DK::S16},
    {IK::invalid, IK::invalid},
    &kInsTemplates[179], 1 },  // conv [117]
  { {DK::U8, DK::U8},
    {IK::invalid, IK::invalid},
    &kInsTemplates[180], 1 },  // conv [118]
  { {DK::U8, DK::S8},
    {IK::invalid, IK::invalid},
    &kInsTemplates[181], 1 },  // conv [119]
  { {DK::S8, DK::U8},
    {IK::invalid, IK::invalid},
    &kInsTemplates[182], 1 },  // conv [120]
  { {DK::S8, DK::S8},
    {IK::invalid, IK::invalid},
    &kInsTemplates[183], 1 },  // conv [121]
  { {DK::U32, DK::U8},
    {IK::invalid, IK::invalid},
    &kInsTemplates[184], 1 },  // conv [122]
  { {DK::S32, DK::S8},
    {IK::invalid, IK::invalid},
    &kInsTemplates[185], 1 },  // conv [123]
  { {DK::U32, DK::U16},
    {IK::invalid, IK::invalid},
    &kInsTemplates[186], 1 },  // conv [124]
  { {DK::S32, DK::S16},
    {IK::invalid, IK::invalid},
    &kInsTemplates[187], 1 },  // conv [125]
  { {DK::S32, DK::F32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[188], 2 },  // conv [126]
  { {DK::U32, DK::F32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[190], 2 },  // conv [127]
  { {DK::S32, DK::F64},
    {IK::invalid, IK::invalid},
    &kInsTemplates[192], 2 },  // conv [128]
  { {DK::U32, DK::F64},
    {IK::invalid, IK::invalid},
    &kInsTemplates[194], 2 },  // conv [129]
  { {DK::F32, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[196], 2 },  // conv [130]
  { {DK::F32, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[198], 2 },  // conv [131]
  { {DK::F64, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[200], 2 },  // conv [132]
  { {DK::F64, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[202], 2 },  // conv [133]
  { {DK::U32, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[204], 1 },  // bitcast [134]
  { {DK::U32, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[205], 1 },  // bitcast [135]
  { {DK::U32, DK::A32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[206], 1 },  // bitcast [136]
  { {DK::U32, DK::C32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[207], 1 },  // bitcast [137]
  { {DK::S32, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[208], 1 },  // bitcast [138]
  { {DK::S32, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[209], 1 },  // bitcast [139]
  { {DK::S32, DK::A32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[210], 1 },  // bitcast [140]
  { {DK::S32, DK::C32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[211], 1 },  // bitcast [141]
  { {DK::A32, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[212], 1 },  // bitcast [142]
  { {DK::A32, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[213], 1 },  // bitcast [143]
  { {DK::A32, DK::A32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[214], 1 },  // bitcast [144]
  { {DK::A32, DK::C32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[215], 1 },  // bitcast [145]
  { {DK::C32, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[216], 1 },  // bitcast [146]
  { {DK::C32, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[217], 1 },  // bitcast [147]
  { {DK::C32, DK::A32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[218], 1 },  // bitcast [148]
  { {DK::C32, DK::C32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[219], 1 },  // bitcast [149]
  { {DK::U32, DK::U32},
    {IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[220], 1 },  // mov [150]
  { {DK::U32, DK::U32},
    {IK::invalid, IK::not_8_bits_shifted},
    &kInsTemplates[221], 1 },  // mov [151]
  { {DK::U32, DK::U32},
    {IK::invalid, IK::pos_16_bits},
    &kInsTemplates[222], 1 },  // mov [152]
  { {DK::U32, DK::U32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[223], 1 },  // mov [153]
  { {DK::U32, DK::U32},
    {IK::invalid, IK::any_32_bits},
    &kInsTemplates[224], 2 },  // mov [154]
  { {DK::S32, DK::S32},
    {IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[226], 1 },  // mov [155]
  { {DK::S32, DK::S32},
    {IK::invalid, IK::not_8_bits_shifted},
    &kInsTemplates[227], 1 },  // mov [156]
  { {DK::S32, DK::S32},
    {IK::invalid, IK::pos_16_bits},
    &kInsTemplates[228], 1 },  // mov [157]
  { {DK::S32, DK::S32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[229], 1 },  // mov [158]
  { {DK::S32, DK::S32},
    {IK::invalid, IK::any_32_bits},
    &kInsTemplates[230], 2 },  // mov [159]
  { {DK::A32, DK::A32},
    {IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[232], 1 },  // mov [160]
  { {DK::A32, DK::A32},
    {IK::invalid, IK::not_8_bits_shifted},
    &kInsTemplates[233], 1 },  // mov [161]
  { {DK::A32, DK::A32},
    {IK::invalid, IK::pos_16_bits},
    &kInsTemplates[234], 1 },  // mov [162]
  { {DK::A32, DK::A32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[235], 1 },  // mov [163]
  { {DK::A32, DK::A32},
    {IK::invalid, IK::any_32_bits},
    &kInsTemplates[236], 2 },  // mov [164]
  { {DK::C32, DK::C32},
    {IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[238], 1 },  // mov [165]
  { {DK::C32, DK::C32},
    {IK::invalid, IK::not_8_bits_shifted},
    &kInsTemplates[239], 1 },  // mov [166]
  { {DK::C32, DK::C32},
    {IK::invalid, IK::pos_16_bits},
    &kInsTemplates[240], 1 },  // mov [167]
  { {DK::C32, DK::C32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[241], 1 },  // mov [168]
  { {DK::C32, DK::C32},
    {IK::invalid, IK::any_32_bits},
    &kInsTemplates[242], 2 },  // mov [169]
  { {DK::U16, DK::U16},
    {IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[244], 1 },  // mov [170]
  { {DK::U16, DK::U16},
    {IK::invalid, IK::not_8_bits_shifted},
    &kInsTemplates[245], 1 },  // mov [171]
  { {DK::U16, DK::U16},
    {IK::invalid, IK::pos_16_bits},
    &kInsTemplates[246], 1 },  // mov [172]
  { {DK::U16, DK::U16},
    {IK::invalid, IK::invalid},
    &kInsTemplates[247], 1 },  // mov [173]
  { {DK::U16, DK::U16},
    {IK::invalid, IK::any_32_bits},
    &kInsTemplates[248], 2 },  // mov [174]
  { {DK::S16, DK::S16},
    {IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[250], 1 },  // mov [175]
  { {DK::S16, DK::S16},
    {IK::invalid, IK::not_8_bits_shifted},
    &kInsTemplates[251], 1 },  // mov [176]
  { {DK::S16, DK::S16},
    {IK::invalid, IK::pos_16_bits},
    &kInsTemplates[252], 1 },  // mov [177]
  { {DK::S16, DK::S16},
    {IK::invalid, IK::invalid},
    &kInsTemplates[253], 1 },  // mov [178]
  { {DK::S16, DK::S16},
    {IK::invalid, IK::any_32_bits},
    &kInsTemplates[254], 2 },  // mov [179]
  { {DK::U8, DK::U8},
    {IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[256], 1 },  // mov [180]
  { {DK::U8, DK::U8},
    {IK::invalid, IK::not_8_bits_shifted},
    &kInsTemplates[257], 1 },  // mov [181]
  { {DK::U8, DK::U8},
    {IK::invalid, IK::pos_16_bits},
    &kInsTemplates[258], 1 },  // mov [182]
  { {DK::U8, DK::U8},
    {IK::invalid, IK::invalid},
    &kInsTemplates[259], 1 },  // mov [183]
  { {DK::U8, DK::U8},
    {IK::invalid, IK::any_32_bits},
    &kInsTemplates[260], 2 },  // mov [184]
  { {DK::S8, DK::S8},
    {IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[262], 1 },  // mov [185]
  { {DK::S8, DK::S8},
    {IK::invalid, IK::not_8_bits_shifted},
    &kInsTemplates[263], 1 },  // mov [186]
  { {DK::S8, DK::S8},
    {IK::invalid, IK::pos_16_bits},
    &kInsTemplates[264], 1 },  // mov [187]
  { {DK::S8, DK::S8},
    {IK::invalid, IK::invalid},
    &kInsTemplates[265], 1 },  // mov [188]
  { {DK::S8, DK::S8},
    {IK::invalid, IK::any_32_bits},
    &kInsTemplates[266], 2 },  // mov [189]
  { {DK::F32, DK::F32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[268], 1 },  // mov [190]
  { {DK::F64, DK::F64},
    {IK::invalid, IK::invalid},
    &kInsTemplates[269], 1 },  // mov [191]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[270], 3 },  // cmpeq [192]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[273], 3 },  // cmpeq [193]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[276], 3 },  // cmpeq [194]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[279], 3 },  // cmpeq [195]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[282], 3 },  // cmpeq [196]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[285], 3 },  // cmpeq [197]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[288], 3 },  // cmpeq [198]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[291], 3 },  // cmpeq [199]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[294], 3 },  // cmpeq [200]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[297], 3 },  // cmpeq [201]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[300], 3 },  // cmpeq [202]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[303], 3 },  // cmpeq [203]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[306], 3 },  // cmpeq [204]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[309], 3 },  // cmpeq [205]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[312], 3 },  // cmpeq [206]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[315], 3 },  // cmpeq [207]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[318], 3 },  // cmpeq [208]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[321], 3 },  // cmpeq [209]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[324], 3 },  // cmpeq [210]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[327], 3 },  // cmpeq [211]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[330], 3 },  // cmpeq [212]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[333], 3 },  // cmpeq [213]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[336], 3 },  // cmpeq [214]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[339], 3 },  // cmpeq [215]
  { {DK::C32, DK::C32, DK::C32, DK::C32, DK::C32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[342], 3 },  // cmpeq [216]
  { {DK::C32, DK::C32, DK::C32, DK::C32, DK::C32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[345], 3 },  // cmpeq [217]
  { {DK::C32, DK::C32, DK::C32, DK::C32, DK::C32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[348], 3 },  // cmpeq [218]
  { {DK::C32, DK::C32, DK::C32, DK::C32, DK::C32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[351], 3 },  // cmpeq [219]
  { {DK::C32, DK::C32, DK::C32, DK::C32, DK::C32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[354], 3 },  // cmpeq [220]
  { {DK::C32, DK::C32, DK::C32, DK::C32, DK::C32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[357], 3 },  // cmpeq [221]
  { {DK::C32, DK::C32, DK::C32, DK::C32, DK::C32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[360], 3 },  // cmpeq [222]
  { {DK::C32, DK::C32, DK::C32, DK::C32, DK::C32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[363], 3 },  // cmpeq [223]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[366], 3 },  // cmplt [224]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[369], 3 },  // cmplt [225]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[372], 3 },  // cmplt [226]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[375], 3 },  // cmplt [227]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[378], 3 },  // cmplt [228]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[381], 3 },  // cmplt [229]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[384], 3 },  // cmplt [230]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[387], 3 },  // cmplt [231]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[390], 3 },  // cmplt [232]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[393], 3 },  // cmplt [233]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[396], 3 },  // cmplt [234]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[399], 3 },  // cmplt [235]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[402], 3 },  // cmplt [236]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[405], 3 },  // cmplt [237]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[408], 3 },  // cmplt [238]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[411], 3 },  // cmplt [239]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[414], 3 },  // cmplt [240]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[417], 3 },  // cmplt [241]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[420], 3 },  // cmplt [242]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[423], 3 },  // cmplt [243]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[426], 3 },  // cmplt [244]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[429], 3 },  // cmplt [245]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::invalid},
    &kInsTemplates[432], 3 },  // cmplt [246]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[435], 3 },  // cmplt [247]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[438], 3 },  // cmplt [248]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[441], 3 },  // cmplt [249]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[444], 3 },  // cmplt [250]
  { {DK::U32, DK::U32, DK::U32, DK::U32, DK::U32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[447], 3 },  // cmplt [251]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::invalid, IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[450], 3 },  // cmplt [252]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[453], 3 },  // cmplt [253]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[456], 3 },  // cmplt [254]
  { {DK::A32, DK::A32, DK::A32, DK::A32, DK::A32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[459], 3 },  // cmplt [255]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[462], 3 },  // cmplt [256]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_16_bits, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[465], 3 },  // cmplt [257]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::pos_16_bits, IK::invalid, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[468], 3 },  // cmplt [258]
  { {DK::S32, DK::S32, DK::S32, DK::S32, DK::S32},
    {IK::invalid, IK::pos_16_bits, IK::pos_16_bits, IK::pos_8_bits_shifted, IK::invalid},
    &kInsTemplates[471], 3 },  // cmplt [259]
  { {DK::A32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[474], 1 },  // lea [260]
  { {DK::A32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[475], 1 },  // lea [261]
  { {DK::A32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::neg_8_bits_shifted},
    &kInsTemplates[476], 1 },  // lea [262]
  { {DK::A32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[477], 1 },  // lea [263]
  { {DK::A32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_shifted},
    &kInsTemplates[478], 1 },  // lea [264]
  { {DK::A32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::neg_8_bits_shifted},
    &kInsTemplates[479], 1 },  // lea [265]
  { {DK::A32, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::any_32_bits},
    &kInsTemplates[480], 2 },  // lea.mem [266]
  { {DK::A32, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::any_32_bits},
    &kInsTemplates[482], 2 },  // lea.mem [267]
  { {DK::A32, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_8_bits_shifted},
    &kInsTemplates[484], 1 },  // lea.stk [268]
  { {DK::A32, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_16_bits},
    &kInsTemplates[485], 2 },  // lea.stk [269]
  { {DK::A32, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::any_32_bits},
    &kInsTemplates[487], 3 },  // lea.stk [270]
  { {DK::A32, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_8_bits_shifted},
    &kInsTemplates[490], 1 },  // lea.stk [271]
  { {DK::A32, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_16_bits},
    &kInsTemplates[491], 2 },  // lea.stk [272]
  { {DK::A32, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::any_32_bits},
    &kInsTemplates[493], 3 },  // lea.stk [273]
  { {DK::C32, DK::INVALID},
    {IK::invalid, IK::invalid},
    &kInsTemplates[496], 2 },  // lea.fun [274]
  { {DK::U32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[498], 1 },  // ld [275]
  { {DK::U32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_12_bits},
    &kInsTemplates[499], 1 },  // ld [276]
  { {DK::U32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::neg_12_bits},
    &kInsTemplates[500], 1 },  // ld [277]
  { {DK::U32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[501], 1 },  // ld [278]
  { {DK::U32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_12_bits},
    &kInsTemplates[502], 1 },  // ld [279]
  { {DK::U32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::neg_12_bits},
    &kInsTemplates[503], 1 },  // ld [280]
  { {DK::S32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[504], 1 },  // ld [281]
  { {DK::S32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_12_bits},
    &kInsTemplates[505], 1 },  // ld [282]
  { {DK::S32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::neg_12_bits},
    &kInsTemplates[506], 1 },  // ld [283]
  { {DK::S32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[507], 1 },  // ld [284]
  { {DK::S32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_12_bits},
    &kInsTemplates[508], 1 },  // ld [285]
  { {DK::S32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::neg_12_bits},
    &kInsTemplates[509], 1 },  // ld [286]
  { {DK::A32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[510], 1 },  // ld [287]
  { {DK::A32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_12_bits},
    &kInsTemplates[511], 1 },  // ld [288]
  { {DK::A32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::neg_12_bits},
    &kInsTemplates[512], 1 },  // ld [289]
  { {DK::A32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[513], 1 },  // ld [290]
  { {DK::A32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_12_bits},
    &kInsTemplates[514], 1 },  // ld [291]
  { {DK::A32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::neg_12_bits},
    &kInsTemplates[515], 1 },  // ld [292]
  { {DK::C32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[516], 1 },  // ld [293]
  { {DK::C32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_12_bits},
    &kInsTemplates[517], 1 },  // ld [294]
  { {DK::C32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::neg_12_bits},
    &kInsTemplates[518], 1 },  // ld [295]
  { {DK::C32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[519], 1 },  // ld [296]
  { {DK::C32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_12_bits},
    &kInsTemplates[520], 1 },  // ld [297]
  { {DK::C32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::neg_12_bits},
    &kInsTemplates[521], 1 },  // ld [298]
  { {DK::U8, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[522], 1 },  // ld [299]
  { {DK::U8, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_12_bits},
    &kInsTemplates[523], 1 },  // ld [300]
  { {DK::U8, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::neg_12_bits},
    &kInsTemplates[524], 1 },  // ld [301]
  { {DK::U8, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[525], 1 },  // ld [302]
  { {DK::U8, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_12_bits},
    &kInsTemplates[526], 1 },  // ld [303]
  { {DK::U8, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::neg_12_bits},
    &kInsTemplates[527], 1 },  // ld [304]
  { {DK::F32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_times_4},
    &kInsTemplates[528], 1 },  // ld [305]
  { {DK::F32, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::neg_8_bits_times_4},
    &kInsTemplates[529], 1 },  // ld [306]
  { {DK::F32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_times_4},
    &kInsTemplates[530], 1 },  // ld [307]
  { {DK::F32, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::neg_8_bits_times_4},
    &kInsTemplates[531], 1 },  // ld [308]
  { {DK::F64, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_times_4},
    &kInsTemplates[532], 1 },  // ld [309]
  { {DK::F64, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::neg_8_bits_times_4},
    &kInsTemplates[533], 1 },  // ld [310]
  { {DK::F64, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_8_bits_times_4},
    &kInsTemplates[534], 1 },  // ld [311]
  { {DK::F64, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::neg_8_bits_times_4},
    &kInsTemplates[535], 1 },  // ld [312]
  { {DK::S8, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[536], 1 },  // ld [313]
  { {DK::S8, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::neg_8_bits},
    &kInsTemplates[537], 1 },  // ld [314]
  { {DK::S8, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_8_bits},
    &kInsTemplates[538], 1 },  // ld [315]
  { {DK::S8, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[539], 1 },  // ld [316]
  { {DK::S8, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::neg_8_bits},
    &kInsTemplates[540], 1 },  // ld [317]
  { {DK::S8, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_8_bits},
    &kInsTemplates[541], 1 },  // ld [318]
  { {DK::U16, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[542], 1 },  // ld [319]
  { {DK::U16, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::neg_8_bits},
    &kInsTemplates[543], 1 },  // ld [320]
  { {DK::U16, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_8_bits},
    &kInsTemplates[544], 1 },  // ld [321]
  { {DK::U16, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[545], 1 },  // ld [322]
  { {DK::U16, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::neg_8_bits},
    &kInsTemplates[546], 1 },  // ld [323]
  { {DK::U16, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_8_bits},
    &kInsTemplates[547], 1 },  // ld [324]
  { {DK::S16, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[548], 1 },  // ld [325]
  { {DK::S16, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::neg_8_bits},
    &kInsTemplates[549], 1 },  // ld [326]
  { {DK::S16, DK::A32, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_8_bits},
    &kInsTemplates[550], 1 },  // ld [327]
  { {DK::S16, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[551], 1 },  // ld [328]
  { {DK::S16, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::neg_8_bits},
    &kInsTemplates[552], 1 },  // ld [329]
  { {DK::S16, DK::A32, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_8_bits},
    &kInsTemplates[553], 1 },  // ld [330]
  { {DK::U32, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_12_bits},
    &kInsTemplates[554], 1 },  // ld.stk [331]
  { {DK::U32, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_12_bits},
    &kInsTemplates[555], 1 },  // ld.stk [332]
  { {DK::S32, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_12_bits},
    &kInsTemplates[556], 1 },  // ld.stk [333]
  { {DK::S32, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_12_bits},
    &kInsTemplates[557], 1 },  // ld.stk [334]
  { {DK::A32, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_12_bits},
    &kInsTemplates[558], 1 },  // ld.stk [335]
  { {DK::A32, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_12_bits},
    &kInsTemplates[559], 1 },  // ld.stk [336]
  { {DK::C32, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_12_bits},
    &kInsTemplates[560], 1 },  // ld.stk [337]
  { {DK::C32, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_12_bits},
    &kInsTemplates[561], 1 },  // ld.stk [338]
  { {DK::U8, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_12_bits},
    &kInsTemplates[562], 1 },  // ld.stk [339]
  { {DK::U8, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_12_bits},
    &kInsTemplates[563], 1 },  // ld.stk [340]
  { {DK::F32, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_8_bits_times_4},
    &kInsTemplates[564], 1 },  // ld.stk [341]
  { {DK::F32, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_8_bits_times_4},
    &kInsTemplates[565], 1 },  // ld.stk [342]
  { {DK::F64, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_8_bits_times_4},
    &kInsTemplates[566], 1 },  // ld.stk [343]
  { {DK::F64, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_8_bits_times_4},
    &kInsTemplates[567], 1 },  // ld.stk [344]
  { {DK::S8, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_8_bits},
    &kInsTemplates[568], 1 },  // ld.stk [345]
  { {DK::S8, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_8_bits},
    &kInsTemplates[569], 1 },  // ld.stk [346]
  { {DK::U16, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_8_bits},
    &kInsTemplates[570], 1 },  // ld.stk [347]
  { {DK::U16, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_8_bits},
    &kInsTemplates[571], 1 },  // ld.stk [348]
  { {DK::S16, DK::INVALID, DK::U32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_8_bits},
    &kInsTemplates[572], 1 },  // ld.stk [349]
  { {DK::S16, DK::INVALID, DK::S32},
    {IK::invalid, IK::invalid, IK::pos_stk_combo_8_bits},
    &kInsTemplates[573], 1 },  // ld.stk [350]
  { {DK::A32, DK::U32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[574], 1 },  // st [351]
  { {DK::A32, DK::U32, DK::U32},
    {IK::invalid, IK::pos_12_bits, IK::invalid},
    &kInsTemplates[575], 1 },  // st [352]
  { {DK::A32, DK::U32, DK::U32},
    {IK::invalid, IK::neg_12_bits, IK::invalid},
    &kInsTemplates[576], 1 },  // st [353]
  { {DK::A32, DK::S32, DK::U32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[577], 1 },  // st [354]
  { {DK::A32, DK::S32, DK::U32},
    {IK::invalid, IK::pos_12_bits, IK::invalid},
    &kInsTemplates[578], 1 },  // st [355]
  { {DK::A32, DK::S32, DK::U32},
    {IK::invalid, IK::neg_12_bits, IK::invalid},
    &kInsTemplates[579], 1 },  // st [356]
  { {DK::A32, DK::U32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[580], 1 },  // st [357]
  { {DK::A32, DK::U32, DK::S32},
    {IK::invalid, IK::pos_12_bits, IK::invalid},
    &kInsTemplates[581], 1 },  // st [358]
  { {DK::A32, DK::U32, DK::S32},
    {IK::invalid, IK::neg_12_bits, IK::invalid},
    &kInsTemplates[582], 1 },  // st [359]
  { {DK::A32, DK::S32, DK::S32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[583], 1 },  // st [360]
  { {DK::A32, DK::S32, DK::S32},
    {IK::invalid, IK::pos_12_bits, IK::invalid},
    &kInsTemplates[584], 1 },  // st [361]
  { {DK::A32, DK::S32, DK::S32},
    {IK::invalid, IK::neg_12_bits, IK::invalid},
    &kInsTemplates[585], 1 },  // st [362]
  { {DK::A32, DK::U32, DK::A32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[586], 1 },  // st [363]
  { {DK::A32, DK::U32, DK::A32},
    {IK::invalid, IK::pos_12_bits, IK::invalid},
    &kInsTemplates[587], 1 },  // st [364]
  { {DK::A32, DK::U32, DK::A32},
    {IK::invalid, IK::neg_12_bits, IK::invalid},
    &kInsTemplates[588], 1 },  // st [365]
  { {DK::A32, DK::S32, DK::A32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[589], 1 },  // st [366]
  { {DK::A32, DK::S32, DK::A32},
    {IK::invalid, IK::pos_12_bits, IK::invalid},
    &kInsTemplates[590], 1 },  // st [367]
  { {DK::A32, DK::S32, DK::A32},
    {IK::invalid, IK::neg_12_bits, IK::invalid},
    &kInsTemplates[591], 1 },  // st [368]
  { {DK::A32, DK::U32, DK::C32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[592], 1 },  // st [369]
  { {DK::A32, DK::U32, DK::C32},
    {IK::invalid, IK::pos_12_bits, IK::invalid},
    &kInsTemplates[593], 1 },  // st [370]
  { {DK::A32, DK::U32, DK::C32},
    {IK::invalid, IK::neg_12_bits, IK::invalid},
    &kInsTemplates[594], 1 },  // st [371]
  { {DK::A32, DK::S32, DK::C32},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[595], 1 },  // st [372]
  { {DK::A32, DK::S32, DK::C32},
    {IK::invalid, IK::pos_12_bits, IK::invalid},
    &kInsTemplates[596], 1 },  // st [373]
  { {DK::A32, DK::S32, DK::C32},
    {IK::invalid, IK::neg_12_bits, IK::invalid},
    &kInsTemplates[597], 1 },  // st [374]
  { {DK::A32, DK::U32, DK::U8},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[598], 1 },  // st [375]
  { {DK::A32, DK::U32, DK::U8},
    {IK::invalid, IK::pos_12_bits, IK::invalid},
    &kInsTemplates[599], 1 },  // st [376]
  { {DK::A32, DK::U32, DK::U8},
    {IK::invalid, IK::neg_12_bits, IK::invalid},
    &kInsTemplates[600], 1 },  // st [377]
  { {DK::A32, DK::S32, DK::U8},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[601], 1 },  // st [378]
  { {DK::A32, DK::S32, DK::U8},
    {IK::invalid, IK::pos_12_bits, IK::invalid},
    &kInsTemplates[602], 1 },  // st [379]
  { {DK::A32, DK::S32, DK::U8},
    {IK::invalid, IK::neg_12_bits, IK::invalid},
    &kInsTemplates[603], 1 },  // st [380]
  { {DK::A32, DK::U32, DK::S8},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[604], 1 },  // st [381]
  { {DK::A32, DK::U32, DK::S8},
    {IK::invalid, IK::pos_12_bits, IK::invalid},
    &kInsTemplates[605], 1 },  // st [382]
  { {DK::A32, DK::U32, DK::S8},
    {IK::invalid, IK::neg_12_bits, IK::invalid},
    &kInsTemplates[606], 1 },  // st [383]
  { {DK::A32, DK::S32, DK::S8},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[607], 1 },  // st [384]
  { {DK::A32, DK::S32, DK::S8},
    {IK::invalid, IK::pos_12_bits, IK::invalid},
    &kInsTemplates[608], 1 },  // st [385]
  { {DK::A32, DK::S32, DK::S8},
    {IK::invalid, IK::neg_12_bits, IK::invalid},
    &kInsTemplates[609], 1 },  // st [386]
  { {DK::A32, DK::U32, DK::F32},
    {IK::invalid, IK::pos_8_bits_times_4, IK::invalid},
    &kInsTemplates[610], 1 },  // st [387]
  { {DK::A32, DK::U32, DK::F32},
    {IK::invalid, IK::neg_8_bits_times_4, IK::invalid},
    &kInsTemplates[611], 1 },  // st [388]
  { {DK::A32, DK::S32, DK::F32},
    {IK::invalid, IK::pos_8_bits_times_4, IK::invalid},
    &kInsTemplates[612], 1 },  // st [389]
  { {DK::A32, DK::S32, DK::F32},
    {IK::invalid, IK::neg_8_bits_times_4, IK::invalid},
    &kInsTemplates[613], 1 },  // st [390]
  { {DK::A32, DK::U32, DK::F64},
    {IK::invalid, IK::pos_8_bits_times_4, IK::invalid},
    &kInsTemplates[614], 1 },  // st [391]
  { {DK::A32, DK::U32, DK::F64},
    {IK::invalid, IK::neg_8_bits_times_4, IK::invalid},
    &kInsTemplates[615], 1 },  // st [392]
  { {DK::A32, DK::S32, DK::F64},
    {IK::invalid, IK::pos_8_bits_times_4, IK::invalid},
    &kInsTemplates[616], 1 },  // st [393]
  { {DK::A32, DK::S32, DK::F64},
    {IK::invalid, IK::neg_8_bits_times_4, IK::invalid},
    &kInsTemplates[617], 1 },  // st [394]
  { {DK::A32, DK::U32, DK::U16},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[618], 1 },  // st [395]
  { {DK::A32, DK::U32, DK::U16},
    {IK::invalid, IK::pos_8_bits, IK::invalid},
    &kInsTemplates[619], 1 },  // st [396]
  { {DK::A32, DK::U32, DK::U16},
    {IK::invalid, IK::neg_8_bits, IK::invalid},
    &kInsTemplates[620], 1 },  // st [397]
  { {DK::A32, DK::S32, DK::U16},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[621], 1 },  // st [398]
  { {DK::A32, DK::S32, DK::U16},
    {IK::invalid, IK::pos_8_bits, IK::invalid},
    &kInsTemplates[622], 1 },  // st [399]
  { {DK::A32, DK::S32, DK::U16},
    {IK::invalid, IK::neg_8_bits, IK::invalid},
    &kInsTemplates[623], 1 },  // st [400]
  { {DK::A32, DK::U32, DK::S16},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[624], 1 },  // st [401]
  { {DK::A32, DK::U32, DK::S16},
    {IK::invalid, IK::pos_8_bits, IK::invalid},
    &kInsTemplates[625], 1 },  // st [402]
  { {DK::A32, DK::U32, DK::S16},
    {IK::invalid, IK::neg_8_bits, IK::invalid},
    &kInsTemplates[626], 1 },  // st [403]
  { {DK::A32, DK::S32, DK::S16},
    {IK::invalid, IK::invalid, IK::invalid},
    &kInsTemplates[627], 1 },  // st [404]
  { {DK::A32, DK::S32, DK::S16},
    {IK::invalid, IK::pos_8_bits, IK::invalid},
    &kInsTemplates[628], 1 },  // st [405]
  { {DK::A32, DK::S32, DK::S16},
    {IK::invalid, IK::neg_8_bits, IK::invalid},
    &kInsTemplates[629], 1 },  // st [406]
  { {DK::INVALID, DK::U32, DK::U32},
    {IK::invalid, IK::pos_stk_combo_12_bits, IK::invalid},
    &kInsTemplates[630], 1 },  // st.stk [407]
  { {DK::INVALID, DK::S32, DK::U32},
    {IK::invalid, IK::pos_stk_combo_12_bits, IK::invalid},
    &kInsTemplates[631], 1 },  // st.stk [408]
  { {DK::INVALID, DK::U32, DK::S32},
    {IK::invalid, IK::pos_stk_combo_12_bits, IK::invalid},
    &kInsTemplates[632], 1 },  // st.stk [409]
  { {DK::INVALID, DK::S32, DK::S32},
    {IK::invalid, IK::pos_stk_combo_12_bits, IK::invalid},
    &kInsTemplates[633], 1 },  // st.stk [410]
  { {DK::INVALID, DK::U32, DK::A32},
    {IK::invalid, IK::pos_stk_combo_12_bits, IK::invalid},
    &kInsTemplates[634], 1 },  // st.stk [411]
  { {DK::INVALID, DK::S32, DK::A32},
    {IK::invalid, IK::pos_stk_combo_12_bits, IK::invalid},
    &kInsTemplates[635], 1 },  // st.stk [412]
  { {DK::INVALID, DK::U32, DK::C32},
    {IK::invalid, IK::pos_stk_combo_12_bits, IK::invalid},
    &kInsTemplates[636], 1 },  // st.stk [413]
  { {DK::INVALID, DK::S32, DK::C32},
    {IK::invalid, IK::pos_stk_combo_12_bits, IK::invalid},
    &kInsTemplates[637], 1 },  // st.stk [414]
  { {DK::INVALID, DK::U32, DK::U8},
    {IK::invalid, IK::pos_stk_combo_12_bits, IK::invalid},
    &kInsTemplates[638], 1 },  // st.stk [415]
  { {DK::INVALID, DK::S32, DK::U8},
    {IK::invalid, IK::pos_stk_combo_12_bits, IK::invalid},
    &kInsTemplates[639], 1 },  // st.stk [416]
  { {DK::INVALID, DK::U32, DK::S8},
    {IK::invalid, IK::pos_stk_combo_12_bits, IK::invalid},
    &kInsTemplates[640], 1 },  // st.stk [417]
  { {DK::INVALID, DK::S32, DK::S8},
    {IK::invalid, IK::pos_stk_combo_12_bits, IK::invalid},
    &kInsTemplates[641], 1 },  // st.stk [418]
  { {DK::INVALID, DK::U32, DK::F32},
    {IK::invalid, IK::pos_stk_combo_8_bits_times_4, IK::invalid},
    &kInsTemplates[642], 1 },  // st.stk [419]
  { {DK::INVALID, DK::S32, DK::F32},
    {IK::invalid, IK::pos_stk_combo_8_bits_times_4, IK::invalid},
    &kInsTemplates[643], 1 },  // st.stk [420]
  { {DK::INVALID, DK::U32, DK::F64},
    {IK::invalid, IK::pos_stk_combo_8_bits_times_4, IK::invalid},
    &kInsTemplates[644], 1 },  // st.stk [421]
  { {DK::INVALID, DK::S32, DK::F64},
    {IK::invalid, IK::pos_stk_combo_8_bits_times_4, IK::invalid},
    &kInsTemplates[645], 1 },  // st.stk [422]
  { {DK::INVALID, DK::U32, DK::U16},
    {IK::invalid, IK::pos_stk_combo_8_bits, IK::invalid},
    &kInsTemplates[646], 1 },  // st.stk [423]
  { {DK::INVALID, DK::S32, DK::U16},
    {IK::invalid, IK::pos_stk_combo_8_bits, IK::invalid},
    &kInsTemplates[647], 1 },  // st.stk [424]
  { {DK::INVALID, DK::U32, DK::S16},
    {IK::invalid, IK::pos_stk_combo_8_bits, IK::invalid},
    &kInsTemplates[648], 1 },  // st.stk [425]
  { {DK::INVALID, DK::S32, DK::S16},
    {IK::invalid, IK::pos_stk_combo_8_bits, IK::invalid},
    &kInsTemplates[649], 1 },  // st.stk [426]
  { {DK::F32, DK::F32},
    {IK::invalid, IK::invalid},
    &kInsTemplates[650], 1 },  // trunc [427]
  { {DK::F64, DK::F64},
    {IK::invalid, IK::invalid},
    &kInsTemplates[651], 1 },  // trunc [428]
};
}  // namspace

const char* const IMM_KIND_ToStringMap[] = {
    "invalid", // 0
    "pos_8_bits_shifted", // 1
    "neg_8_bits_shifted", // 2
    "not_8_bits_shifted", // 3
    "pos_5_bits", // 4
    "pos_12_bits", // 5
    "neg_12_bits", // 6
    "pos_8_bits", // 7
    "neg_8_bits", // 8
    "pos_8_bits_times_4", // 9
    "neg_8_bits_times_4", // 10
    "pos_16_bits", // 11
    "any_32_bits", // 12
    "pos_stk_combo_8_bits_shifted", // 13
    "pos_stk_combo_8_bits", // 14
    "pos_stk_combo_8_bits_times_4", // 15
    "pos_stk_combo_12_bits", // 16
    "pos_stk_combo_16_bits", // 17
};

template<>  // template specialization for IMM_KIND
const char* EnumToString<IMM_KIND>(IMM_KIND x) { return IMM_KIND_ToStringMap[unsigned(x)]; }

/* @AUTOGEN-END@ */

const Pattern* FindMatchingPattern(Ins ins) {
  const uint64_t reg_matcher = ExtractTypeMaskForPattern(ins);
  const OPC opc = InsOPC(ins);
  const uint16_t end = kPatternJumper[unsigned(opc) + 1];
  for (unsigned p = kPatternJumper[unsigned(opc)]; p < end; ++p) {
    const Pattern& pat = kPatterns[p];
    if (PatternMatchesTypeConstraints(pat, reg_matcher) &&
        0 == PatternMismatchesImmConstraints(pat, ins)) {
      return &pat;
    }
  }
  return nullptr;
}

uint8_t FindtImmediateMismatchesInBestMatchPattern(Ins ins) {
  uint8_t best = MATCH_IMPOSSIBLE;
  uint8_t best_num_bits = __builtin_popcount(best);
  const uint64_t type_matcher = ExtractTypeMaskForPattern(ins);
  // std::cout << "@type_matcher: " << std::hex << type_matcher << "\n";
  const OPC opc = InsOPC(ins);
  const uint16_t end = kPatternJumper[unsigned(opc) + 1];
  for (unsigned p = kPatternJumper[unsigned(opc)]; p < end; ++p) {
    const Pattern& pat = kPatterns[p];
    if (!PatternMatchesTypeConstraints(pat, type_matcher)) continue;
    const uint8_t mismatches = PatternMismatchesImmConstraints(pat, ins);
    const uint8_t num_bits = __builtin_popcount(mismatches);
    if (num_bits < best_num_bits) {
      best = mismatches;
      best_num_bits = num_bits;
    }
  }
  return best;
}

namespace {
int32_t ExtractReg(Reg reg) {
  ASSERT(reg.kind() == RefKind::REG, "not a reg " << unsigned(reg.kind()));
  CpuReg cpu_reg = RegCpuReg(reg);
  ASSERT(!cpu_reg.isnull(), "no cpu reg");
  return CpuRegNo(cpu_reg);
}

int32_t ExtractNum(Const num) {
  ASSERT(num.kind() == RefKind::CONST, "not a const " << unsigned(num.kind()));
  switch (DKFlavor(ConstKind(num))) {
    case DK_FLAVOR_U:
      return ConstValueU(num);
    case DK_FLAVOR_A:
    case DK_FLAVOR_C:
    case DK_FLAVOR_S:
      return ConstValueACS(num);
    default:
      ASSERT(false, "unreachable");
      return 0;
  }
}

int32_t ExtractNumNeg(Const num) {
  return -ExtractNum(num);
}

int32_t ExtractNumNot(Const num) {
  return ~ExtractNum(num);
}

int32_t GetStackOffset(Handle stk, Handle num) {
  ASSERT(stk.kind() == RefKind::STK, "");
  ASSERT(num.kind() == RefKind::CONST, "");
  return StkSlot(Stk(stk)) + ConstValueInt32(Const(num));
}

int32_t ExtractParamOp(Ins ins, PARAM param, const EmitContext& ctx) {
  switch (param) {
    case PARAM::reg0:
      return ExtractReg(Reg(InsOperand(ins, 0)));
    case PARAM::reg1:
      return ExtractReg(Reg(InsOperand(ins, 1)));
    case PARAM::reg2:
      return ExtractReg(Reg(InsOperand(ins, 2)));
    case PARAM::reg3:
      return ExtractReg(Reg(InsOperand(ins, 3)));
    case PARAM::reg4:
      return ExtractReg(Reg(InsOperand(ins, 4)));
    case PARAM::num0:
      return ExtractNum(Const(InsOperand(ins, 0)));
    case PARAM::num1:
      return ExtractNum(Const(InsOperand(ins, 1)));
    case PARAM::num2:
      return ExtractNum(Const(InsOperand(ins, 2)));
    case PARAM::num3:
      return ExtractNum(Const(InsOperand(ins, 3)));
    case PARAM::num4:
      return ExtractNum(Const(InsOperand(ins, 4)));
    case PARAM::num0_not:
      return ExtractNumNot(Const(InsOperand(ins, 0)));
    case PARAM::num1_not:
      return ExtractNumNot(Const(InsOperand(ins, 1)));
    case PARAM::num2_not:
      return ExtractNumNot(Const(InsOperand(ins, 2)));
    case PARAM::num0_neg:
      return ExtractNumNeg(Const(InsOperand(ins, 0)));
    case PARAM::num1_neg:
      return ExtractNumNeg(Const(InsOperand(ins, 1)));
    case PARAM::num2_neg:
      return ExtractNumNeg(Const(InsOperand(ins, 2)));
    case PARAM::num3_neg:
      return ExtractNumNeg(Const(InsOperand(ins, 3)));
    case PARAM::num4_neg:
      return ExtractNumNeg(Const(InsOperand(ins, 4)));
    case PARAM::num1_lo16:
      return ExtractNum(Const(InsOperand(ins, 1))) & 0xffff;
    case PARAM::num1_hi16:
      return (ExtractNum(Const(InsOperand(ins, 1))) >> 16) & 0xffff;
    case PARAM::stk0_offset1:
      return GetStackOffset(InsOperand(ins, 0), InsOperand(ins, 1));
    case PARAM::stk1_offset2:
      return GetStackOffset(InsOperand(ins, 1), InsOperand(ins, 2));

    case PARAM::stk1_offset2_lo:
      return GetStackOffset(InsOperand(ins, 1), InsOperand(ins, 2)) & 0xffff;

    case PARAM::stk1_offset2_hi:
      return (GetStackOffset(InsOperand(ins, 1), InsOperand(ins, 2)) >> 16) &
             0xffff;
    case PARAM::scratch_flt:
      return CpuRegNo(ctx.scratch_cpu_reg);
    case PARAM::scratch_gpr:
      return CpuRegNo(ctx.scratch_cpu_reg);
    case PARAM::bbl0:
    case PARAM::bbl2:
    case PARAM::fun0:
    case PARAM::mem1_num2_lo16:
    case PARAM::mem1_num2_hi16:
    case PARAM::fun1_lo16:
    case PARAM::fun1_hi16:
    case PARAM::jtb1_lo16:
    case PARAM::jtb1_hi16:
      // relocs
      return 0;
    default:
      ASSERT(false, "unsupported parmm " << unsigned(param));
      return 0;
  }
}

void MaybeHandleReloc(a32::Ins* armins, unsigned pos, Ins ins, PARAM op) {
  Str symbol;
  auto handle_addend = [&](Const num) {
    armins->operands[pos] = ConstValueInt32(num);
  };
  switch (op) {
    case PARAM::bbl0:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::JUMP24;
      armins->is_local_sym = true;
      symbol = Name(Bbl(InsOperand(ins, 0)));
      break;
    case PARAM::bbl2:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::JUMP24;
      armins->is_local_sym = true;
      symbol = Name(Bbl(InsOperand(ins, 2)));
      break;
    case PARAM::fun0:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::CALL;
      symbol = Name(Fun(InsOperand(ins, 0)));
      break;
    case PARAM::mem1_num2_lo16:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::MOVW_ABS_NC;
      symbol = Name(Mem(InsOperand(ins, 1)));
      handle_addend(Const(InsOperand(ins, 2)));
      break;
    case PARAM::mem1_num2_hi16:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::MOVT_ABS;
      symbol = Name(Mem(InsOperand(ins, 1)));
      handle_addend(Const(InsOperand(ins, 2)));
      break;
    case PARAM::fun1_lo16:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::MOVW_ABS_NC;
      symbol = Name(Fun(InsOperand(ins, 1)));
      break;
    case PARAM::fun1_hi16:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::MOVT_ABS;
      symbol = Name(Fun(InsOperand(ins, 1)));
      break;
    case PARAM::jtb1_lo16:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::MOVW_ABS_NC;
      armins->is_local_sym = true;
      symbol = Name(Jtb(InsOperand(ins, 1)));
      break;
    case PARAM::jtb1_hi16:
      armins->reloc_kind = elf::RELOC_TYPE_ARM::MOVT_ABS;
      armins->is_local_sym = true;
      symbol = Name(Jtb(InsOperand(ins, 1)));
      break;
    default:
      return;
  }
  armins->reloc_pos = pos;
  armins->reloc_symbol = StrData(symbol);
}

}  // namespace

a32::Ins MakeInsFromTmpl(const InsTmpl& tmpl, Ins ins, const EmitContext& ctx) {
  a32::Ins out;
  out.opcode = &a32::OpcodeTable[unsigned(tmpl.opcode)];
  for (unsigned o = 0; o < a32::MAX_OPERANDS; ++o) {
    if ((tmpl.template_mask & (1 << o)) == 0) {
      out.operands[o] = tmpl.operands[o];
    } else {
      auto param = PARAM(tmpl.operands[o]);
      out.operands[o] = ExtractParamOp(ins, param, ctx);
      // Note: this may overwrite    out.operands[o]
      MaybeHandleReloc(&out, o, ins, param);
    }
  }
  return out;
}

}  // namespace cwerg::code_gen_a32
